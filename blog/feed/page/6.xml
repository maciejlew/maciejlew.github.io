<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LionNet</title>
        <description>Programowanie, sieci komputerowe, informatyka.</description>      
        <link>http://lion.net.pl</link>
        <language>pl</language>
        <generator>Sculpin</generator>
        <category>IT</category>
        <atom:link href="http://lion.net.pl/blog/feed.xml" rel="self" type="application/rss+xml" />
                <item>
            <title>Format opisu leków w DDF</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                                    <content:encoded>&lt;p&gt;Na potrzeby &lt;a href=&quot;{{site.url}}/2016/03/01/dam-sie-poznac.html&quot;&gt;aplikacji DDF&lt;/a&gt; 
(fajnie jest wprowadzać swoje własne 3-znakowe akronimy - informatycy to uwielbiają) 
wymyśliłem format w jakim opisywane będą leki i ich dawkowanie.&lt;/p&gt;

&lt;p&gt;Wszystkie dane przechowywane będą w plikach JSON, dzięki czemu nie będzie problemów
z ich tworzeniem, pobieraniem i przetwarzaniem w aplikacji DDF. Format ten jest 
także bardzo &quot;ludzki&quot; więc myślę że nawet osoby nietechniczne będą w stanie 
przygotować swoje zestawy leków.&lt;/p&gt;

&lt;h2 id=&quot;zestawy-lek%C3%B3w&quot;&gt;Zestawy leków&lt;/h2&gt;

&lt;p&gt;Zestawy leków opisywane będą w plikach o następującej strukturze:&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/aaef76a1781717f15743]&lt;/p&gt;

&lt;h2 id=&quot;dane-o-leku%2C-dawkowanie&quot;&gt;Dane o leku, dawkowanie&lt;/h2&gt;

&lt;p&gt;Każdy lek powinien posiadać identyfikator, nazwę, opis oraz parametry funkcji
dawkowania. Wyróżniłem dwa podstawowe typy opisu dawkowania: przy pomocy funkcji
liniowej (&lt;em&gt;simple&lt;/em&gt;) oraz przy pomocy wartości dyskretnych (&lt;em&gt;complex&lt;/em&gt;). Typ będzie
potrzebny aby algorytm wiedział z czym ma do czynienia przed rozpoczęciem parsowania
danych. Zazwyczaj wzór potrzebny do wyliczenia podawany jest w postaci prostej 
zależności liniowej:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y(x) = a * x&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ogólnie:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y(x) = a * x + b&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/df0aef76b78203fc2034]&lt;/p&gt;

&lt;p&gt;jednak być może ktoś chciałby stworzyć bardziej wyrafinowane zależności, jak:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y_min(x) = a_min * x + b; y_max(x) = a_max * x + b&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/bbb28441759d7262922d]&lt;/p&gt;

&lt;p&gt;lub nawet:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y_1 = a_1; y_2 = a_2; ...; y_n = a_n&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/35eaf86339e6fad33e14]&lt;/p&gt;

&lt;p&gt;Te wszystkie typy opisów zamierzam obsługiwać w DDF.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-03-12T09:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/12/format-opisu-lekow-w-ddf.html</link>
            <atom:link href="http://lion.net.pl/2016/03/12/format-opisu-lekow-w-ddf.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/12/format-opisu-lekow-w-ddf.html</guid>
        </item>
                <item>
            <title>Zapach Jaśminu</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                                    <content:encoded>&lt;p&gt;Postanowiłem, aby uniknąć w przyszłości nieprzyjemnych zapachów w mojej aplikacji
&lt;a href=&quot;http://lion.net.pl/2016/03/01/dam-sie-poznac.html&quot;&gt;Drug Dose Framework&lt;/a&gt;, 
dodać do projektu wsparcie dla Jasmine - frameworka dla testów BDD w JS.&lt;/p&gt;

&lt;p&gt;W tym celu musiałem trochę zaktualizować zależności w projekcie. Nie obyło się
bez chwili walki z NPM. Należało odinstalować kilka innych modułów konkurencyjnych
bibliotek do testowania aby możliwe było uruchomienie Jasmine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm uninstall karma-chai
npm uninstall karma-mocha
npm install karma grunt-karma karma-phantomjs-launcher karma-coverage --save-dev
npm install karma-jasmine karma-chrome-launcher --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wygląda na to że stos narzędzi JS do zainstalowania i nauczenia się w ramach 
jednego małego projektu może rozrastać się z dnia na dzień. Przypomnę tylko że 
do tej pory to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;li&gt;AngularJS&lt;/li&gt;
&lt;li&gt;Ionic&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lion.net.pl/2016/03/03/yeoman-idziemy-na-front.html&quot;&gt;Yeoman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bower&lt;/li&gt;
&lt;li&gt;Grunt&lt;/li&gt;
&lt;li&gt;Karma&lt;/li&gt;
&lt;li&gt;Jasmine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zobaczymy co przyniesie jutro.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-03-07T21:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/07/zapach-jasminu.html</link>
            <atom:link href="http://lion.net.pl/2016/03/07/zapach-jasminu.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/07/zapach-jasminu.html</guid>
        </item>
                <item>
            <title>Yeoman! Idziemy na front!</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                                    <content:encoded>&lt;p&gt;Idziemy na front! Trzeba się przygotować. Misja będzie trudna. Na szczęście mamy
wsparcie.&lt;/p&gt;

&lt;h2 id=&quot;generatory-aplikacji-js&quot;&gt;Generatory aplikacji JS&lt;/h2&gt;

&lt;p&gt;Ostatnimi czasu dużo się działo. Zwłaszcza w światku JS. Powstało sporo frameworków
i narzędzi. Aż głowa może rozboleć gdy nagle trzeba się tego wszystkiego nauczyć. 
Nie inaczej było ze mną. Chcę utworzyć pierwszą aplikację w &lt;strong&gt;AngularJS&lt;/strong&gt;, &lt;strong&gt;Ionic&lt;/strong&gt; i
&lt;strong&gt;Apache Cordova&lt;/strong&gt;. I co? Od czego zacząć? Ściągać paczki? Tworzyć strukturę katalogów?
No ale zaraz, gdzie ja to powinienem wszystko zainstalować? Zaraz, zaraz...&lt;/p&gt;

&lt;p&gt;Każde ww. narzędzi ma swój generator, czyli specjalne interaktywne narzędzie
zrobione tylko po to, aby łatwiej można było rozpocząć pracę. A wiec AngularJS ma
generator który stworzy nam szkielet aplikacji AngularJS. Cordova ma generator
który stworzy nam szkielet aplikacji Cordova. Ionic ma generator który stworzy 
nam szkielet aplikacji Ionic z Angularem i Cordova. No fajnie. Wygląda na to że
najlepiej wykorzystać generator Ionic, który powinien nam wszystko ładnie utworzyć
tak aby nie trzeba się było już niczym przejmować i od razu zacząć kodować. Nic 
bardziej mylnego :)&lt;/p&gt;

&lt;p&gt;Polecenie &lt;em&gt;ionic start&lt;/em&gt; rzeczywiście wygeneruje nam szkielet. Przeglądając go, 
mając pewne nawyki z innych frameworków wyposażonych w generatory, można odnieść
wrażenie że trochę tego za dużo się wygenerowało. Na dodatek nie mamy jeszcze pliku
.gitignore, wiec nie wiadomo co powinno zostać przesłane do repozytorium, a co 
powinno zostać tylko w kopii roboczej. Słabo. Na szczęście inni także mieli takie
dylematy. Tak też prawdopodobnie powstał ionic-generator dla Yeoman.&lt;/p&gt;

&lt;h2 id=&quot;yeoman&quot;&gt;Yeoman&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; to kolejne narzędzie które przyszło mi poznać w 
ostatnim czasie. Z tego powodu nie mogę jeszcze czuć się jego ekspertem, ale 
napiszę tu te kilka zdań - może także właśnie dla Ciebie Yeoman stanie się 
odkryciem dnia. Narzędzie to służy do definiowania szkieletów aplikacji. I chodzi 
tu nie tylko o aplikacje JS, choć te przodują w statystykach upublicznionych 
szablonów Yeomana. Jednym prostym poleceniem generujemy projekt według zadanego 
szablonu. W tej chwili baza zarejestrowanych szablonów Yeomana posiada ponad 3000 
wpisów. Jest z czego wybierać.&lt;/p&gt;

&lt;h3 id=&quot;generator-ionic&quot;&gt;generator-ionic&lt;/h3&gt;

&lt;p&gt;Mój wybór padł na szablon &lt;a href=&quot;https://github.com/diegonetto/generator-ionic&quot;&gt;generator-ionic&lt;/a&gt;
reklamujący się jako szybkie i rozsądne narzędzie do tworzenia
projektów pisanych w Ionic, AngularJS i Cordova, podążające za dobrymi praktykami
formowania struktury projektów.&lt;/p&gt;

&lt;p&gt;Ten generator dodaje ponad to kilka usprawnień których brakuje generatorowi
zawartemu w Ionic. Zostaniemy wypytani o to z jakich chcemy skorzystać pluginów 
Cordova oraz jaki chcemy pobrać szablon Ionic. Dostaniemy gotowy plik .gitignore
dzięki czemu nie będziemy zaśmiecać repozytorium. Otrzymamy także zestaw poleceń
grunta które budują aplikację. Całkiem fajnie.&lt;/p&gt;

&lt;h2 id=&quot;idziemy-na-front%21&quot;&gt;Idziemy na front!&lt;/h2&gt;

&lt;p&gt;Pora wyruszać. Jedynie kilka kroków dzieli nas przed pierwszym zetknięciem z 
frontem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g yo grunt-cli bower generator-ionic ionic cordova
mkdir drug-dose-framework-ionic
cd drug-dose-framework
yo ionic drug-dose-framework
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
            <pubDate>2016-03-03T20:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/03/yeoman-idziemy-na-front.html</link>
            <atom:link href="http://lion.net.pl/2016/03/03/yeoman-idziemy-na-front.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/03/yeoman-idziemy-na-front.html</guid>
        </item>
                <item>
            <title>Dam się poznać</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                                    <content:encoded>&lt;p&gt;Ten wpis to nie anons matrymonialny. Tu chodzi o coś więcej. Jest konkurs do 
wygrania i ja w tym konkursie startuję. A ten konkurs to organizowany przez 
Macieja Aniserowicza &lt;a href=&quot;http://www.maciejaniserowicz.com/daj-sie-poznac/&quot;&gt;&quot;Daj Się Poznać 2016&quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/DSP2016/DSP2016-logo-RGB-color-1.png&quot; alt=&quot;Daj Się Poznać 2016&quot; title=&quot;Daj Się Poznać 2016&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;leo%2C-why%3F&quot;&gt;Leo, why?&lt;/h2&gt;

&lt;p&gt;O konkursie dowiedziałem się z magazynu &quot;Programista&quot;. Od razu zacząłem myśleć
o tych wszystkich niezrealizowanych projektach, planach i marzeniach. Po pierwszym
zachłyśnięciu się dopadły mnie jednak wątpliwości - czy uda mi się wygospodarować
tyle czasu by wziąć udział w konkursie, czy moje projekty są odpowiednio dobrze 
przemyślane, ambitne i interesujące dla innych? Miałem zrezygnować...&lt;/p&gt;

&lt;p&gt;I wtedy dostałem wsparcie od najbliższej mi osoby. Przekonała mnie że warto 
spróbować. Że zawsze warto próbować. Że to zmotywuje mnie do dalszego rozwoju. 
Że to może tylko pozytywnie wpłynąć na dalsze losy mojej kariery. No i że chcę, 
do cholery, wygrać to krzesło ;)&lt;/p&gt;

&lt;h2 id=&quot;z-czym-do-ludzi%3F&quot;&gt;Z czym do ludzi?&lt;/h2&gt;

&lt;p&gt;Wiedziałem już że startuję. Nadeszła pora na wybranie tematu. Miałem kilka w głowie,
głównie związanych z projektami open source w których już i tak się udzielam.
Jednak to nie byłoby to. Projekty te są albo zbyt specjalistyczne by zainteresować
kogoś z zewnątrz, albo praca nad nimi to głównie refaktoryzacja przestarzałych
rozwiązań. Pozostał mi jeden, ciekawy moim zdaniem, projekt nad którym myślałem
od dłuższego czasu.&lt;/p&gt;

&lt;h3 id=&quot;drug-dose-framework&quot;&gt;Drug Dose Framework&lt;/h3&gt;

&lt;p&gt;Mój projekt to :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aplikacja na urządzenia mobilne wspomagająca obliczanie dawek leków. 
  Uniwersalny szkielet pozwalający na import własnych, zewnętrznych zestawów leków.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A w każdym razie coś takiego zgłosiłem do konkursu ;)&lt;/p&gt;

&lt;p&gt;Na pomysł wpadłem już jakiś czas temu, gdy mój kuzyn, z zawodu ratownik medyczny,
pokazał mi tzw. taśmę pediatryczną. Taka taśma to specyficzny rodzaj linijki,
rozwijany przy poszkodowanym dziecku, któremu należy zaaplikować jakiś występujący
na wyposażeniu karetki lek. Na skali tej taśmy znajdują się odpowiadające wzrostowi
dziecka przedziały wagowe, a w nich odpowiednie dla danej wagi dawki leków.
Proste i skuteczne, może pomóc w ustaleniu dawki gdy zapomnimy wzoru odpowiedzialnego
za przeliczanie tejże. Chciałem wtedy zrobić coś takiego na urządzenia mobilne,
tak aby możliwe było szybkie przeliczenie porcji leku nawet gdy nie mamy przy sobie
takiej taśmy (a telefon ma już przy sobie niemal każdy).&lt;/p&gt;

&lt;p&gt;Krótki research pokazuje, że na rynku jest już kilka takich aplikacji, nie znalazłem
jednak takiej o otwartych źródłach. W mojej aplikacji chciałbym także, aby lista 
leków nie była zdefiniowana z góry, a żeby możliwe było jej dostosowanie według
potrzeb. Tak też w nazwie znalazł się człon &quot;framework&quot;.&lt;/p&gt;

&lt;h3 id=&quot;technikalia&quot;&gt;Technikalia&lt;/h3&gt;

&lt;p&gt;Chcę się także przy okazji nauczyć czegoś nowego. Na co dzień robię w &quot;back-endzie&quot;.
Tu z oczywistych względów będzie sporo &quot;front-endu&quot; - w końcu z aplikacji mają
korzystać ludzie, prawdopodobnie &quot;nietechniczni&quot;. Do tej pory z programowaniem
aplikacji mobilnych nie miałem styczności, więc ogrom nowych technologii do nauki
spośród których można wybierać przeraża.&lt;/p&gt;

&lt;p&gt;Ponieważ chciałbym aby aplikacja była jak najbardziej uniwersalna, a co za tym 
idzie, możliwa do uruchomienia na jak największej gamie urządzeń mobilnych szukałem
frameworka to umożliwiającego. Wybór padł na &lt;strong&gt;Apache Cordova&lt;/strong&gt;. Chciałem także
uniknąć uczenia się Javy, bo te 10 tygodni, które przewiduje regulamin konkursu, 
mogłoby się okazać zbyt krótkim czasem na napisanie czegoś działającego. Ucieszyło
mnie to, że istnieje możliwość zaprzęgnięcia do pracy JavaScriptu i osiągnięcie
w pełni funkcjonalnej mobilnej aplikacji, a w każdym spełniającej moje założenia
projektowe. JavaScript znam na tyle że, mam nadzieję, pozwoli mi to na sprawne
rozpoczęcie pracy. Wybrałem za to framework JS z którym wcześniej nie miałem 
styczności - &lt;strong&gt;AngularJS&lt;/strong&gt;. Do tego, aby nie wymyślać koła od nowa, także nowy 
dla mnie framework &lt;strong&gt;Ionic&lt;/strong&gt;. Zapowiada się więc dobra zabawa.&lt;/p&gt;

&lt;h2 id=&quot;co-dalej%3F&quot;&gt;Co dalej?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework&quot;&gt;Repozytorium projektu znajduje się na GitHubie&lt;/a&gt;.
Na tym blogu będę publikować raporty z postępu prac, przemyślenia oraz inne notatki
związane z konkursem. Mam nadzieję że mój projekt Cię zainteresował i będziesz go 
śledzić. Wszelkie uwagi i dobre rady są zawsze mile widziane. A teraz - do roboty! ;)&lt;/p&gt;
</content:encoded>
            <pubDate>2016-03-01T17:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/01/dam-sie-poznac.html</link>
            <atom:link href="http://lion.net.pl/2016/03/01/dam-sie-poznac.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/01/dam-sie-poznac.html</guid>
        </item>
                <item>
            <title>Jak skonfigurować środowisko programistyczne z Apache Cordova, Android SKD i NodeJS na Debianie 8 i386 i nie zwariować</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>JS</category>
                                    <content:encoded>&lt;p&gt;Opiszę pokrótce jak skonfigurowałem sobie środowisko programistyczne na moim 
laptopie z Debianem 8. Laptop wyposażony jest w procesor o architekturze 32-bitowej
co okaże się dość istotne w całym procesie.&lt;/p&gt;

&lt;p&gt;Najpierw przedstawię co chciałem osiągnąć:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache Cordova&lt;/li&gt;
&lt;li&gt;Android SDK&lt;/li&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Netbeans IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaczynamy od pobrania i instalacji NodeJS oraz Android SDK. W repozytorium 
Debiana jest obecnie dostępna nieaktualna, zabugowana, wersja NodeJS pozostaje 
więc jedynie kompilacja ze źródeł. Dodatkowo, nie chcę aby NodeJS był zainstalowany 
globalnie, a jedynie dla mojego użytkownika. Jak się okazuje, dla architektury
32-bitowej w 
&lt;a href=&quot;http://stackoverflow.com/a/34219845&quot;&gt;Android Platform Tools w wersji 23.1+ występuje bug&lt;/a&gt; 
- należy zrobić &quot;downgrade&quot;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/local/src
cd ~/local/src
wget https://nodejs.org/dist/v4.3.1/node-v4.3.1.tar.gz
wget http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz
wget https://dl-ssl.google.com/android/repository/platform-tools_r23.0.1-linux.zip
tar -zxf node-v4.3.1.tar.gz
tar -zxf android-sdk_r24.4.1-linux.tgz
unzip platform-tools_r23.0.1-linux.zip
cd ~/local/src/node-v4.3.1
./configure --prefix=~/local
make
make install
mv ~/local/src/android-sdk-linux ~/local/lib
mv ~/local/src/platform-tools ~/local/lib/android-sdk-linux
echo &#039;export PATH=$HOME/local/bin:$PATH&#039; &amp;gt;&amp;gt; ~/.bashrc
echo &#039;export PATH=$HOME/local/lib/android-sdk-linux/tools:$PATH&#039; &amp;gt;&amp;gt; ~/.bashrc
echo &#039;export PATH=$HOME/local/lib/android-sdk-linux/platform-tools:$PATH&#039; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;W tym momencie można się przelogować aby nowe polecenia stały się widoczne w systemie.&lt;/p&gt;

&lt;p&gt;Teraz możemy doinstalować potrzebne komponenty, pamiętając aby przypadkiem nie 
zrobić aktualizacji platform-tools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;android sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tworzymy wirtualne urządzenie:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;android avd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Możemy teraz doinstalować Apache Cordova:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g cordova
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tworzymy przykładowy projekt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/projects/
cordova create test
cd test
cordova platform add android
cordova run android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prawdopodobnie otrzymamy komunikat jak poniżej:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Either one will allow you to use the 32-bit binaries, but please be
  aware that these will disappear in a future Android SDK release.
  Consider moving to a 64-bit Linux system before that happens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aby się go pozbyć robimy taki trik:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#039;export ANDROID_EMULATOR_FORCE_32BIT=true&#039; &amp;gt;&amp;gt; ~/.bashrc
export ANDROID_EMULATOR_FORCE_32BIT=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Próbujemy ponownie, możemy zobaczyć coś takiego:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;emulator: ERROR: x86 emulation currently requires hardware acceleration!
  Please ensure KVM is properly installed and usable.
  CPU acceleration status: KVM is not installed on this machine (/dev/kvm is missing).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instalujemy potrzebne do wirtualizacji paczki:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aptitude install qemu-kvm libvirt-bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jeśli nadal widzimy powyższy komunikat może to oznaczać że wirtualizacja jest
wyłączona z poziomu BIOS lub że procesor wcale nie wspiera wirtualizacji.&lt;/p&gt;

&lt;p&gt;Uruchamiamy ponownie maszynę i w BIOS szukamy odpowiedniej opcji, w okolicach
ustawień związanych z CPU.&lt;/p&gt;

&lt;p&gt;Po ponownym uruchomieniu komputera polecenie &lt;em&gt;cordova run android&lt;/em&gt; powinno zadziałać.
Jeśli się tak nie stało i nadal otrzymujemy komunikaty związane z KVM warto 
posłużyć się jednym z poniższych poleceń w celu sprawdzenia co jest grane:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ls -l /dev/kvm
egrep &#039;(vmx|svm)&#039; /proc/cpuinfo
sudo systemctl status libvirtd.service
sudo dmesg | grep kvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Na tym etapie mamy już wszystko potrzebne do uruchomienia projektu, pozostaje 
skonfigurowanie IDE.&lt;/p&gt;

&lt;p&gt;Niestety Netbeans 8.1 nie może poradzić sobie z odnalezieniem Apache Cordova
i nie znalazłem żadnego rozwiązania tego problemu. NodeJS oraz NPM można natomiast
skonfigurować wybierając w NB opcję &quot;Tools &gt; Options &gt; HTML/JS &gt; NodeJS&quot;.&lt;/p&gt;

&lt;p&gt;Mam nadzieję że ten opis pomoże osobom zainteresowanym programowaniem urządzeń
mobilnych w konfiguracji swojego środowiska. Ilość trudności jakie napotkałem
podczas uruchamiania tego zestawu narzędzi popchnął mnie do refleksji, że czasy
procesorów 32 bitowych powoli mijają i niebawem, chcąc nie chcąc, trzeba będzie
się przesiąść na ich następców, choćby po to aby odpalić sobie jakieś SDK...&lt;/p&gt;
</content:encoded>
            <pubDate>2016-02-29T19:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/02/29/jak-skonfigurowac-srodowisko-programistyczne-z-apache-cordova-android-sdk-i-nodejs-na-debianie-8-i386-i-nie-zwariowac.html</link>
            <atom:link href="http://lion.net.pl/2016/02/29/jak-skonfigurowac-srodowisko-programistyczne-z-apache-cordova-android-sdk-i-nodejs-na-debianie-8-i386-i-nie-zwariowac.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/02/29/jak-skonfigurowac-srodowisko-programistyczne-z-apache-cordova-android-sdk-i-nodejs-na-debianie-8-i386-i-nie-zwariowac.html</guid>
        </item>
                <item>
            <title>Serwer CI dla LMS</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>QA</category>
                        <category>LMS</category>
                                    <content:encoded>&lt;p&gt;Napisałem ten krótki opis konfiguracji serwera CI dla LMS w celu ułatwienia 
osobom zainteresowanym rozwojem LMS automatyzacji procesu sprawdzania 
poprawności i jakości kodu w repozytorium LMS. &lt;strong&gt;Za serwer CI posłuży 
&lt;a href=&quot;https://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; ze względu na jego popularność oraz gotowe 
komponenty integrujące go z narzędziami służącymi do analizy kodu napisanego w 
języku PHP&lt;/strong&gt;. Instalacja będzie działała &quot;out-of-box&quot; gdy 
&lt;a href=&quot;https://github.com/lmsgit/lms/pull/621&quot;&gt;pull request #621&lt;/a&gt;
zostanie przyjęty. Do tego czasu należy za źródło LMSa brać 
&lt;a href=&quot;https://github.com/maciejlew/lms&quot;&gt;mój fork&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Przed instalacją warto zapoznać się z możliwościami Jenkinsa - materiałów
na jego temat w Internecie jest mnóstwo.&lt;/p&gt;

&lt;p&gt;Jenkins zostanie skonfigurowany z obsługą narzędzi takich jak:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/squizlabs/PHP_CodeSniffer&quot;&gt;PHPCS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phpmd.org/&quot;&gt;PHPMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sebastianbergmann/phpcpd&quot;&gt;PHPCPD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pdepend.org/&quot;&gt;PDEPEND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://phpunit.de/&quot;&gt;PHPUnit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Informacje o nich także znajdziecie w sieci.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Opis instalacji i konfiguracji powstał częściowo w oparciu o 
&lt;a href=&quot;http://jenkins-php.org/&quot;&gt;szablon PHP dla Jenkinsa&lt;/a&gt; oraz częściowo o moje
własne doświadczenia&lt;/strong&gt;. Będzie to opis dla pojedynczego noda.
Instalacja przeprowadzę krok po kroku. W sieci możecie znaleźć gotowe rozwiązania 
pozwalające uprościć proces budowy, tworzenie architektury dla testów, 
jak np. kontenery Dockera, ale nie będę tego omawiał w tym wpisie. 
Instalację możecie przeprowadzić na stacji roboczej lub na wirtualnej maszynie - 
nie ma to znaczenia z punktu widzenia opisanej poniżej procedury.&lt;/p&gt;

&lt;h2 id=&quot;instalacja&quot;&gt;Instalacja&lt;/h2&gt;

&lt;p&gt;Instalacja opisałem jest dla dystrybucji Debian i pochodnych. Zakładam że
w systemie jest zainstalowane to co dotychczas developer musiał i tak mieć
zainstalowane, czyli PHP5, Composer i git.&lt;/p&gt;

&lt;p&gt;Jako root wykonuję polecenia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | apt-key add -
echo &#039;deb http://pkg.jenkins-ci.org/debian binary/&#039; &amp;gt;&amp;gt; /etc/apt/sources.list
aptitude update
aptitude install jenkins php5-xdebug curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jako zwykły użytkownik wykonuję polecenia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://localhost:8080/jnlpJars/jenkins-cli.jar
java -jar jenkins-cli.jar -s http://localhost:8080 install-plugin checkstyle cloverphp crap4j dry htmlpublisher jdepend plot pmd violations warnings xunit git
curl -L https://raw.githubusercontent.com/sebastianbergmann/php-jenkins-template/master/config.xml | java -jar jenkins-cli.jar -s http://localhost:8080 create-job php-template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Po pomyślnej instalacji Jenkins powinien działać już w tle jako daemon i być 
dostępny w przeglądarce pod adresem localhosta na porcie 8080.&lt;/p&gt;

&lt;h2 id=&quot;konfiguracja&quot;&gt;Konfiguracja&lt;/h2&gt;

&lt;p&gt;Konfigurację przeprowadzę przy pomocy interfejsu webowego Jenkinsa.
W opisie konfiguracji będę używał angielskich nazw elementów interfejsu
z powodu tego że część z nich nie jest przetłumaczona na język polski.
Po otwarciu strony głównej tej aplikacji powinniśmy widzieć
panel zarządzania Jenkinsem. (Domyślnie nie są skonfigurowane żadne
ACL więc każdy może dowolnie modyfikować konfigurację i uruchamiać
zadania - nie jest to najlepsze rozwiązanie na dłuższą metę i może 
prowadzić do rzeczy strasznych ;). Skonfigurowanie ACL wykracza
poza zakres tego wpisu - informacje jak to zrobić można znaleźć w
sieci).&lt;/p&gt;

&lt;p&gt;Ostatnie z poleceń wykonanych podczas instalacji dodało do Jenkinsa
szablon dla projektów pisanych w PHP. Na podstawie tego szablonu
zbuduję konfigurację dla LMS (tzw. joba).&lt;/p&gt;

&lt;p&gt;Wybieram &lt;strong&gt;&quot;New Item&quot;&lt;/strong&gt;. Wypełniam nazwę, np: &lt;strong&gt;&quot;LMS&quot;&lt;/strong&gt;. Wybieram 
ostatnią dostępną opcję: &lt;strong&gt;&quot;Copy existing Item&quot;&lt;/strong&gt; i w pole &lt;strong&gt;&quot;Copy
from&quot;&lt;/strong&gt; wpisuję &lt;strong&gt;&quot;php-template&quot;&lt;/strong&gt;. Klikam &lt;strong&gt;&quot;OK&quot;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;W tym momencie na liście jobów widzę nowy projekt o nazwie LMS.
Klikając w jego nazwę przechodzę do podglądu. W menu wybieram &quot;Configure&quot;.&lt;/p&gt;

&lt;p&gt;Konfigurację joba zaczynam od usunięcia zbędnych elementów. Elementy wykonują
się z góry na dół listy. Każdy z takich bloczków mogę przesuwać przy 
pomocy myszy lub usuwać klikając w znajdujące się w jego obrębie przyciski
&lt;strong&gt;&quot;Delete&quot;&lt;/strong&gt;. Usuwam bloki nazywające się &lt;strong&gt;&quot;Plot build data&quot;&lt;/strong&gt; związane z narzędziem
PHPLOC oraz bloki &lt;strong&gt;&quot;Publish HTML reports&quot;&lt;/strong&gt; związane z PHPDOX. Pierwsze z narzędzi pozwala na
analizę złożoności projektu - moim zdaniem raczej nie przydaje się w codziennej 
pracy, poza tym jego instalacja przy pomocy Composera kończy się konfliktami
z innymi bardziej przydatnymi narzędziami. Drugie z narzędzi pozwala na 
wygenerowanie dokumentacji technicznej na podstawie adnotacji w kodzie,
także moim zdaniem jest to zbędne.&lt;/p&gt;

&lt;p&gt;Po poprzednim kroku moja konfiguracja jest już prawie gotowa, poza tym
że nie wiadomo gdzie jest kod projektu który chcę testować ;).
Mógłbym wszystko skonfigurować tak aby celowało w moją kopię roboczą,
jeśli akurat znajdowałaby się ona na tym samym systemie, ale nie jest to dobry 
pomysł. Skonfiguruję Jenkinsa tak, aby zrobił sobie &quot;clone&quot; z mojego
lokalnego repozytorium LMS a następnym razem gdy uruchomię build robił &quot;pull&quot;. 
Mam już doinstalowany plugin obsługujący git w Jenkinsie więc jedyne co pozostaje
mi zrobić to wybrać opcję &lt;strong&gt;&quot;Git&quot;&lt;/strong&gt; w sekcji &lt;strong&gt;&quot;Source Code Management&quot;&lt;/strong&gt;.
Podaję URL do repo. Znajduje się ono na tym samym hoście więc wpisuję
ścieżkę do niego: &lt;strong&gt;&quot;/home/maciek/lms&quot;&lt;/strong&gt;. Jeśli byłoby ono gdzieś w 
sieci to podałbym URL, np: &lt;strong&gt;&quot;https://github.com/lmsgit/lms&quot;&lt;/strong&gt;. Można także wskazać
branch inny niż master. Jest to dobre rozwiązanie jeśli chcemy przetestować
swoje własne zmiany przez wysłaniem ich do głównego brancha i dalej do
LMS na GitHubie. Wpisuję w pole &lt;strong&gt;&quot;Branches to build&quot;&lt;/strong&gt; wartość &lt;strong&gt;&quot;*/dev&quot;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Zajmę się teraz do instalacją wspomnianych wcześniej narzędzi, dzięki którym
przetestujemy LMS. Są one wskazane w pliku composer.json więc należałoby
wykonać polecenie &quot;composer update&quot;. Nie będę tego jednak robić ręcznie -
zajmie się tym Jenkins. Dodaję kolejny krok wybierając &lt;strong&gt;&quot;Add build step&quot;&lt;/strong&gt; &gt;
&lt;strong&gt;&quot;Execute shell&quot;&lt;/strong&gt;. Ustawiam ten bloczek na samym początku sekcji &lt;strong&gt;&quot;Build&quot;&lt;/strong&gt;.
W jego treści wpisuję:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $WORKSPACE
composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kolejnym krokiem na liście zdarzeń naszego joba jest &quot;Invoke Ant&quot;. Spowoduje
on wykonanie targetu &quot;full-build&quot;, który jest opisany w pliku build.xml 
dostarczanym wraz z LMS. Target ten, a właściwie inkludowane przez niego
targety, automatyzują cały proces testowania. Niektóre z nich korzystają
z plików konfiguracyjnych także dostarczanych wraz z LMS w katalogu build.
Myślę że nazwy targetów oraz to co się w nich dzieje jest zrozumiałe więc
nie będę się za bardzo o nich rozpisywał, opis można znaleźć na stronie
&lt;a href=&quot;http://jenkins-php.org/&quot;&gt;szablonu PHP dla Jenkinsa&lt;/a&gt;, jedyna różnica polega
na tym że ścieżki dostosowałem do struktury LMS.&lt;/p&gt;

&lt;h2 id=&quot;uruchomienie&quot;&gt;Uruchomienie&lt;/h2&gt;

&lt;p&gt;Skonfigurowany job mogę uruchomić klikając w przyciski &lt;strong&gt;&quot;Build now&quot;&lt;/strong&gt; znajdujące
się w kilku miejscach interfejsu. Spowoduje to uruchomienie wszystkich 
skonfigurowanych wcześniej kroków w projekcie. Podgląd na żywo mogę uzyskać 
klikając w &lt;strong&gt;&quot;Console Output&quot;&lt;/strong&gt;. Tam też znajdę wszystkie informacje w przypadku
niepowodzenia.&lt;/p&gt;

&lt;p&gt;Domyślnie &quot;workspace&quot; Jenkinsa znajduje się w &lt;strong&gt;&quot;/var/lib/jenkins/jobs&quot;&lt;/strong&gt;. Tam 
też powinien utworzyć się folder o nazwie naszego projektu, a w nim sam
klon repozytorium oraz konfiguracja, logi i raporty z buildów. W przypadku problemów
z konfiguracją Jenkinsa, jeśli podejrzewamy że są one związane z którymś
z targetów opisanych w pliku build.xml, opłaca się uruchamiać tylko 
wybrany podejrzany target. Mogę to zrobić z poziomu katalogu projektu w workspace
wydając komendę, jako użytkownik jenkins:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /var/lib/jenkins/jobs/LMS/workspace/
ant &amp;lt;nazwa_targetu&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opublikowałem także &lt;a href=&quot;https://gist.github.com/maciejlew/9b207f32be4af5bf8cbe&quot;&gt;mój referencyjny konfig joba dla LMS&lt;/a&gt;. 
W razie problemów możecie go porównać z konfigiem znajdującym się w 
&lt;strong&gt;/var/lib/jenkins/jobs/LMS/config.xml&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Po skończonym buildzie kolor ikonki stanu przy projekcie wskazuje, czy w 
projekcie są poważne błędy, czy może wszystkie testy się udały. Klikając
w numer builda mogę przejść do informacji o nim, a stamtąd do podglądu
raportów wygenerowanych przez uruchomione pomocnicze narzędzia.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-02-13T09:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/02/13/konfiguracja-serwera-ci-dla-lms.html</link>
            <atom:link href="http://lion.net.pl/2016/02/13/konfiguracja-serwera-ci-dla-lms.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/02/13/konfiguracja-serwera-ci-dla-lms.html</guid>
        </item>
                <item>
            <title>Quality Meetup #7</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>QA</category>
                                    <content:encoded>&lt;p&gt;Z powodu coraz większego nacisku na testy integracyjne w projektach w których biorę
udział i pojawiających się z tego powodu problemów do rozwiązania, wybrałem się na
&lt;strong&gt;spotkanie grupy osób związanych i/lub zainteresowanych tworzeniem oprogramowania
wysokiej jakości - Quality Meetup #7&lt;/strong&gt;. O spotkaniu dowiedziałem się obserwując
wiadomości związane z Quality Excites, konferencją na której już kiedyś byłem i
której tematyka i poziom wykładów oraz warsztatów bardzo mi się spodobały. Poświęcenie
kilku godzin na Quality Meetup również okazało się być dobrym pomysłem, a dlaczego
napiszę za chwilę. &lt;a href=&quot;http://www.meetup.com/Quality-Meetup/&quot;&gt;Meetup jest wydarzeniem cyklicznym&lt;/a&gt;,
odbywa się na ono na terenie Górnego Śląska, wszystkim którzy są w jego zasięgu 
polecam się wybrać. Na to spotkanie przyszło około 30 osób i mieliśmy okazję 
wysłuchać dwóch prezentacji.&lt;/p&gt;

&lt;h2 id=&quot;jak-powsta%C5%82-%C5%9Akup-%E2%80%93-historia-projektu&quot;&gt;Jak powstał ŚKUP – historia projektu&lt;/h2&gt;

&lt;p&gt;Radek Smilgin opowiedział nam o swoich doświadczeniach z pracy jako konsultant
podczas specyfikowania wymagań dla ŚKUP, doradzania zleceniodawcy oraz zleceniobiorcy
podczas etapu tworzenia, wdrażania i odbioru projektu. Dowiedzieliśmy się jak
ważne może okazać się dokładne określenie wymagań, jak może wyglądać rzeczywistość
w dużych projektach (waterfall, brak wglądu w kod), co może pójść nie tak i ile 
to może kosztować.&lt;/p&gt;

&lt;h2 id=&quot;testy-przegl%C4%85darkowe-w-%C5%9Brodowisku-rozproszonym&quot;&gt;Testy przeglądarkowe w środowisku rozproszonym&lt;/h2&gt;

&lt;p&gt;Łukasz Rosłonek pokazał jak można w łatwy sposób przygotować sobie środowisko
pod testy przeglądarkowe. Środowisko oparte było o Selenium Grid i Dockera.
Docker służył do tworzenia na jednym OS wielu kontenerów jak LXC, z których jednak
każdy był odpowiedzialny za uruchomienie testów na tylko jednej z przeglądarek.
Wszystko zostało zaprezentowane &quot;na żywo&quot;. Mogliśmy obserwować proces instalowania
i uruchamiania huba oraz nodów Selenium, a także 
&lt;a href=&quot;https://github.com/lroslonek/qm7&quot;&gt;uruchamiania testów&lt;/a&gt; na tak utworzonej 
architekturze. Jest to ciekawe podejście które zamierzam przetestować także w 
moich projektach. Więcej na ten temat można znaleźć na 
&lt;a href=&quot;http://testdetective.com/selenium-grid-with-docker/&quot;&gt;blogu autora&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-02-13T09:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/02/13/quality-meetup-7.html</link>
            <atom:link href="http://lion.net.pl/2016/02/13/quality-meetup-7.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/02/13/quality-meetup-7.html</guid>
        </item>
                <item>
            <title>Dlaczego większość stron nie powinna mieć podłączonego (micro) frameworka?</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>OOP</category>
                                    <content:encoded>&lt;p&gt;Ten post jest polemiką z artykułem który ostatnio znalazłem na Planecie PHP - 
&lt;a href=&quot;http://sf.jogger.pl/2015/12/30/dlaczego-kazda-strona-powinna-miec-podlaczony-micro-framewor/&quot;&gt;&quot;Dlaczego każda strona powinna mieć podłączony (micro) framework?&quot;&lt;/a&gt;
 - zachęcam do uprzedniego zapoznania się z jego tezami.&lt;/p&gt;

&lt;h2 id=&quot;dlaczego-frameworki-s%C4%85-takie-fajne%3F&quot;&gt;Dlaczego frameworki są takie fajne?&lt;/h2&gt;

&lt;p&gt;Stanowisko że frameworki są fajne bo standaryzują pewne rozwiązania, zmniejszają
próg wejścia w projekt dla nowych programistów, ułatwiają pracę, są zgodne z regułą
DRY i KISS, wytworzony w oparciu o nie kod może zostać wykorzystany ponownie,
jest powszechne i trudne do obalenia - nie to pchnęło mnie do napisania tego wpisu.
Drażni mnie trochę kwantyfikator jakiego użyto w tytule - &quot;każda strona powinna&quot;...&lt;/p&gt;

&lt;h2 id=&quot;dlaczego-nie-ka%C5%BCda-strona-powinna-mie%C4%87-frameworka%3F&quot;&gt;Dlaczego nie każda strona powinna mieć frameworka?&lt;/h2&gt;

&lt;p&gt;Otóż moim zdaniem większość stron nie powinna mieć podłączonego micro frameworka,
nie powinna mieć także frameworka, a idąc dalej tym tropem w ogóle nie powinna 
być oparta na skryptach napisanych w PHP czy jakimkolwiek innym języku programowania.&lt;/p&gt;

&lt;p&gt;Można zaobserwować że obecnie większość pisanej treści w Internecie to SEO SPAM, 
wygenerowany automatycznie, umieszczony na stronach - zaśmiecaczach internetu. 
Trudno było mi nawet znaleźć wyniki aktualnych badań an ten temat, ale to może 
właśnie z powodu tego że coraz trudniej znaleźć coś sensownego w Internecie. Tacy 
zaśmiecacze z pewnością potrzebują dynamicznie generowanych stron, ale pozwolę 
sobie pominąć ten przypadek w dalszych rozważaniach.&lt;/p&gt;

&lt;p&gt;Większości sensownych stron na świecie wystarczyłyby statyczne treści napisane w 
HTML. Większość z nich to po prostu strony wizytówki firm i osób, które nie 
zmieniają się częściej niż raz na miesiąc lub rzadziej. Wdrażanie na takich 
stronach frameworków to trochę przerost formy nad treścią. Można co prawda 
powiedzieć, że nie wiadomo co będzie później, może będzie potrzebny blog?, może 
ankieta?, może newsletter? A może wystarczyłoby się po prostu zapytać właściciela 
strony, jaką ma wizję rozwoju i dać mu kilka dni na przemyślenie sprawy? Nawet 
jeśli wspomniane wyżej elementy okażą się niezbędne, nie oznacza to od razu że 
trzeba je implementować samemu czy też wykorzystując framework. Tego typu potrzeby 
zostały już dawno zauważone i w sieci istnieje mnóstwo, także darmowych, usług 
oferujących prowadzenia bloga, dodawanie systemów komentarzy, ankiet itp. Mają 
one swój plusy i minusy, ale dla takich &quot;małych stronek&quot; moim zdaniem lista 
plusów jest większa niż minusów.&lt;/p&gt;

&lt;h2 id=&quot;jak-poradzi%C4%87-sobie-bez-frameworka%3F&quot;&gt;Jak poradzić sobie bez frameworka?&lt;/h2&gt;

&lt;p&gt;Załóżmy że mamy zlecenie na prostą stronę - wizytówkę. Z rozmowy wynika że 
zleceniodawca, co prawda, chciałby od czasu do czasu dodać jakiegoś newsa, ale nie 
będzie tego robił zbyt często. Co możemy zrobić aby zmniejszyć koszty i czas 
wdrożenia takiego zlecenia?&lt;/p&gt;

&lt;p&gt;Możemy zaproponować stronę w oparciu o jakiś generator blogów, np Jekyll z hostingiem
na GitHub Pages, z usługą dodawania przez nas newsów zredagowanych przez właściciela. 
Plusy tego rozwiązania to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;w sieci znajdziemy szybko szablon takiego bloga;&lt;/li&gt;
&lt;li&gt;zredagowany tekst szybko można skonwertować na Markdown który jest już standardem
w tego typu rozwiązaniach - przenośność;&lt;/li&gt;
&lt;li&gt;tekst w Markdown jest czytelny dla osób &quot;nietechnicznych&quot;;&lt;/li&gt;
&lt;li&gt;mamy zintegrowany system kontroli wersji;&lt;/li&gt;
&lt;li&gt;podłączenie systemu komentarzy to &quot;pikuś&quot; - jest np. Disqus;&lt;/li&gt;
&lt;li&gt;nie potrzebujemy serwera na treści ani bazy danych - można oszczędzić;&lt;/li&gt;
&lt;li&gt;klient mając swoje konto na GitHubie może zawsze przekazać obsługę strony 
komuś innemu (czasami to minus ;-));&lt;/li&gt;
&lt;li&gt;klient wraca do nas od czasu do czasu (czasem to także jest minus ;-));&lt;/li&gt;
&lt;li&gt;nie musimy się aż tak bardzo martwić o bezpieczeństwo naszej strony i danych 
użytkowników - wszystko mamy przechowywane w postaci statycznych plików lub 
wyniesione do zewnętrznych usług. Jedynie przechwycenie haseł do tych usług przez
napastnika lub problemy u zewnętrznych usługodawców mogłyby nam zaszkodzić;&lt;/li&gt;
&lt;li&gt;treści z plików Markdown łatwo w przyszłości będzie przenieść do bardziej
zaawansowanego rozwiązania jeśli taka migracja okazałaby się konieczna.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minusy to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;niektórych niestandardowych życzeń nie da się zrealizować;&lt;/li&gt;
&lt;li&gt;zleceniodawca, jeśli nie chce nam zlecać dodawania treści lub nie chcemy się 
tym zajmować, musi się nauczyć obsługi GitHuba, czyli poświęcić na to jakieś 10 minut 
(ale panelu WordPress czy czegoś innego także musiałby się nauczyć, prawda?);&lt;/li&gt;
&lt;li&gt;w GitHub Pages każdy może zobaczyć historię naszej strony;&lt;/li&gt;
&lt;li&gt;zleceniodawca łatwo może przekazać obsługę strony komuś innemu.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kiedy-warto-u%C5%BCy%C4%87-micro-frameworka%3F&quot;&gt;Kiedy warto użyć (micro) frameworka?&lt;/h2&gt;

&lt;p&gt;Frameworki warto użyć gdy strona ma potencjał stać się czymś więcej niż zwykłym 
blogiem czy też stroną wizytówką firmy/osoby. Konieczne wydaje się to także, jeśli
strona jest de-facto naszym produktem, gdy zarabiamy na tym że ktoś jej używa,
gdy nad stroną pracuje zespół programistów, gdy przewidujemy że będzie potrzebne API. 
Czy takich stron jest dużo w Internecie? Raczej wątpię, jak napisałem wcześniej 
większość stron to zaśmiecacze lub bardzo proste strony niewymagające do swojego 
działania &quot;rocket science&quot;. Myślę, że do realizacji każdej strony należy podejść 
indywidualnie, przekazując klientowi listę plusów i minusów każdego z rozwiązań. 
Nie należy natomiast bezrefleksyjnie uznawać jednego, nawet popularnego i 
wygodnego, rozwiązania za uniwersalną odpowiedź na każdy problem.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-01-24T16:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/01/24/dlaczego-wiekszosc-stron-nie-powinna-miec-podlaczonego-micro-frameworka.html</link>
            <atom:link href="http://lion.net.pl/2016/01/24/dlaczego-wiekszosc-stron-nie-powinna-miec-podlaczonego-micro-frameworka.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/01/24/dlaczego-wiekszosc-stron-nie-powinna-miec-podlaczonego-micro-frameworka.html</guid>
        </item>
                <item>
            <title>Przegląd aplikacji dla sysadminów</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>LMS</category>
                                    <content:encoded>&lt;p&gt;Jakiś czas temu natrafiłem w czeluściach Internetu na ciekawą 
&lt;a href=&quot;http://sysadmin.it-landscape.info/&quot;&gt;stronę z wykazem aplikacji pomocnych w codziennym zarządzaniu sieciami komputerowymi&lt;/a&gt;,
zarówno tymi małymi jak i większymi. Myślę że każdy sysadmin znajdzie na tej 
stronie coś dla siebie. Wykaz nie obejmuje znanej Ci aplikacji? Nie czekaj - 
zgłoś ją w formularzu dostępnym na ww. stronie. Autor strony bardzo chętnie dopisuje 
zgłoszone propozycje do listy.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-01-24T13:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/01/24/przeglad-aplikacji-dla-sysadminow.html</link>
            <atom:link href="http://lion.net.pl/2016/01/24/przeglad-aplikacji-dla-sysadminow.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/01/24/przeglad-aplikacji-dla-sysadminow.html</guid>
        </item>
                <item>
            <title>Wezwania do zapłaty - nowe funkcje</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>LMS</category>
                                    <content:encoded>&lt;p&gt;[Szablon wezwania do zapłaty]({{ site.url }}/lan-management-system/szablony-dokumentow/wezwanie-do-zaplaty)
oraz 
[szablon przedsądowego wezwania do zapłaty]({{ site.url }}/lan-management-system/szablony-dokumentow/przedsadowe-wezwanie-do-zaplaty), 
cieszące się sporym zainteresowaniem klientów, zostały wyposażone w nowe funkcje:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uwzględnianie korekt faktur VAT, opcja oznaczania pozycji na wezwaniu do których 
były wystawione korekty;&lt;/li&gt;
&lt;li&gt;opcja wyliczania odsetek ustawowych dla okresów gdy stawki tych odsetek wynosiły
13% (poprzednia stawka) i 8% (obecna stawka) z uwzględnieniem przesuwania dnia
rozpoczęcia naliczania odsetek gdy wypada on w dniu ustawowo wolnym od pracy.&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
            <pubDate>2015-12-19T18:45:00+01:00</pubDate>
            <link>http://lion.net.pl/2015/12/19/wezwania-do-zaplaty-nowe-funkcje.html</link>
            <atom:link href="http://lion.net.pl/2015/12/19/wezwania-do-zaplaty-nowe-funkcje.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2015/12/19/wezwania-do-zaplaty-nowe-funkcje.html</guid>
        </item>
            </channel>
</rss>