<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LionNet</title>
        <description>Programowanie, sieci komputerowe, informatyka.</description>      
        <link>http://lion.net.pl</link>
        <language>pl</language>
        <generator>Sculpin</generator>
        <category>IT</category>
        <atom:link href="http://lion.net.pl/blog/feed.xml" rel="self" type="application/rss+xml" />
                <item>
            <title>EmguCVDemo - aplikacja testująca wpływ wybranych filtrów na wyniki segmentacji wododziałowej</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>GKIRO</category>
                                    <content:encoded>&lt;p&gt;To już drugi post z cyklu badania wpływu wstępnej filtracji na jakość wyników
uzyskanych podczas segmentacji wododziałowej. W poprzednim wpisie mogłeś przeczytać
o &lt;a href=&quot;/2016/07/03/przeksztalcenia-morfologiczne-kontekstowe-i-rozmyte.html&quot;&gt;teorii kryjącej się za filtrami kontekstowymi, morfologicznymi i rozmytymi&lt;/a&gt;, 
będącymi przedmiotem badań. W tym wpisie przedstawię narzędzie pomocnicze
napisane przeze mnie w celu przeprowadzenia badań.&lt;/p&gt;

&lt;h3 id=&quot;analiza-obraz%C3%B3w---biblioteka-emgucv&quot;&gt;Analiza obrazów - biblioteka EmguCV&lt;/h3&gt;

&lt;p&gt;EmguCV jest nakładką na OpenCV Open Computer Vision, pozwalającą na wykorzystywanie
tej biblioteki w środowisku Microsoft .NET Framework. OpenCV (Open Source Computer 
Vision) jest biblioteką zawierającą w sobie wiele (ponad 2500) algorytmów 
wykorzystywanych w grafice komputerowej. Oprogramowanie to jest rozwijane od 
1993 roku przez firmę Intel i od tego czasu pełni ważną rolę w badaniach i 
tworzeniu oprogramowania z zakresu wizji komputerowej. Biblioteka posiada 
interfejsy pozwalające na wykorzystanie jej w językach programowania takich jak 
C, C++, Python i Java. OpenCV działa w systemach MS Windows, Linux, Mac oraz 
Android. Wśród zaimplementowanych w bibliotece algorytmów można odleźć 
przekształcenia punktowe, kontekstowe, morfologiczne, algorytmy segmentacji, 
rozpoznawania obrazów. Biblioteka ta wykorzystywana jest m. in. w analizie obrazów 
na potrzeby bezpieczeństwa, w procesach medycznych, do identyfikacji oraz do 
sterowania robotami. Biblioteka OpenCV udostępniana jest na licencji BSD Berkeley 
Software Distribution License, natomiast EmguCV na licencji GNU GPL General 
Public License v3[&lt;a href=&quot;#opencv&quot;&gt;3&lt;/a&gt;].&lt;/p&gt;

&lt;h3 id=&quot;emgucvdemo---specyfikacja-zewn%C4%99trzna&quot;&gt;EmguCVDemo - specyfikacja zewnętrzna&lt;/h3&gt;

&lt;p&gt;W tym rozdziale przedstawiona zostanie aplikacja pomocnicza EmguCVDemo. Aplikacja 
ta została napisana w celu przygotowania środowiska dla testów przeprowadzanych 
w części badawczej pracy. Środowisko to zapewnia dostęp do algorytmów filtracji 
obrazu dostępnych w bibliotece EmguCV oraz do własnych implementacji wybranych 
algorytmów. Aplikacja może być wykorzystywana do testowania wpływu wybranych 
filtrów na obraz i jego późniejszą segmentację.&lt;/p&gt;

&lt;h4 id=&quot;emgucvdemo&quot;&gt;EmguCVDemo&lt;/h4&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/img/gkiro/emgucvdemo.png&quot; alt=&quot;EmguCVDemo - okno programu testowego&quot;&gt;
    &lt;figcaption&gt;Rysunek 1: EmguCVDemo - okno programu testowego&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Na rysunku 1 pokazano główne okno aplikacji EmguCVDemo. Interfejs programu składa 
się z panelu, na którym wyświetlane są zdjęcia, jedno oryginalne - przed obróbką, 
drugie po zastosowaniu dostępnych operacji. Operacje dostępne w programie są za 
pomocą znajdujących się na formatce przycisków lub z poziomu paska zadań programu. 
Do sterowania parametrami niektórych operacji wykorzystuje się kontrolki 
znajdujące się w oknie programu w panelu po lewej stronie. Wśród wykorzystanych 
operacji pochodzących z biblioteki EmguCV można wymienić:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Przekształcenia morfologiczne:

&lt;ul&gt;
&lt;li&gt;Erozja&lt;/li&gt;
&lt;li&gt;Dylacja&lt;/li&gt;
&lt;li&gt;Otwarcie&lt;/li&gt;
&lt;li&gt;Zamknięcie&lt;/li&gt;
&lt;li&gt;White Top Hat&lt;/li&gt;
&lt;li&gt;Black Top Hat&lt;/li&gt;
&lt;li&gt;Gradient morfologiczny&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Przekształcenia kontekstowe:

&lt;ul&gt;
&lt;li&gt;Wyrównanie histogramu&lt;/li&gt;
&lt;li&gt;Filtr medianowy&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Inne narzędzia:

&lt;ul&gt;
&lt;li&gt;Negacja obrazu&lt;/li&gt;
&lt;li&gt;Reset obrazu&lt;/li&gt;
&lt;li&gt;Powiększenie&lt;/li&gt;
&lt;li&gt;Pomniejszenie&lt;/li&gt;
&lt;li&gt;Reset rozmiaru&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wymienione operacje uzupełniono interfejsem do własnych implementacji następujących 
algorytmów:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Przekształcenia logiki rozmytej:

&lt;ul&gt;
&lt;li&gt;Fuzzy Noise Smoothing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Operacje związane z segmentacją:

&lt;ul&gt;
&lt;li&gt;Lokalne minima&lt;/li&gt;
&lt;li&gt;Segmentacja wododziałowa&lt;/li&gt;
&lt;li&gt;Liczenie segmentów&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parametry filtrów dostępne w programie pozwalają na sterowanie rozmiarem elementu 
strukturalnego filtrów morfologicznych, a także położeniem punktu odniesienia w 
jego wnętrzu. Możliwe jest także manipulowanie ilością iteracji.&lt;/p&gt;

&lt;p&gt;Dostępna jest opcja zmiany algorytmu zliczania segmentów z podstawowego 
(&lt;em&gt;SegmentMarkerBasic&lt;/em&gt;) na (&lt;em&gt;SegmentMarkerFlooding&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Możliwe jest także sterowanie rozmiarem okna filtru medianowego.&lt;/p&gt;

&lt;p&gt;Po przeprowadzeniu segmentacji możliwe jest oznaczenie na obrazie wyjściowym 
dwóch segmentów - wewnętrznego i zewnętrznego, po czym następuje wyszukiwanie 
przez algorytm segmentów pośrednich. Pokazano to na rysunku 1, obraz wejściowy 
poddano wstępnej filtracji, segmentacji a następnie zaznaczony czerwony segment 
wewnętrzny i zielony zewnętrzny. Granice segmentów pośrednich oznaczone zostały 
kolorem niebieskim.&lt;/p&gt;

&lt;p&gt;Opcja &lt;em&gt;Liczenie segmentów&lt;/em&gt; pozwala na oznaczenie segmentów i zliczenie ich liczby 
na obrazie. Po zakończonej operacji użytkownik otrzymuje podsumowanie z liczbą 
segmentów oraz czasem zliczania. Wykonanie tej operacji jest niezbędne, aby móc 
oznaczać segmenty na obrazie.&lt;/p&gt;

&lt;h3 id=&quot;literatura&quot;&gt;Literatura&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a name=&quot;wyklady-gkiro&quot;&gt;
    &lt;strong&gt;&lt;em&gt;OpenCV Wiki&lt;/em&gt;.&lt;/strong&gt; http://opencv.willowgarage.com/wiki, 2013
&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Treść tego wpisu zawiera fragmenty mojej pracy dyplomowej &lt;strong&gt;&quot;Badanie wpływu 
wstępnej filtracji na proces segmentacji w analizie patologicznych zmian w 
obrębie zębów widocznych na zdjęciach RTG&quot;&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Zobacz także:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/07/03/przeksztalcenia-morfologiczne-kontekstowe-i-rozmyte.html&quot;&gt;Przekształcenia morfologiczne, kontekstowe i rozmyte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/08/06/wplyw-wstepnej-filtracji-na-segmentacje-wododzialowa.html&quot;&gt;Wpływ wstępnej filtracji na segmentację wododziałową&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
            <pubDate>2016-07-24T15:10:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/07/24/emgucvdemo-aplikacja-testujaca-wplyw-wybranych-filtrow-na-wyniki-segmentacji-wododzialowej.html</link>
            <atom:link href="http://lion.net.pl/2016/07/24/emgucvdemo-aplikacja-testujaca-wplyw-wybranych-filtrow-na-wyniki-segmentacji-wododzialowej.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/07/24/emgucvdemo-aplikacja-testujaca-wplyw-wybranych-filtrow-na-wyniki-segmentacji-wododzialowej.html</guid>
        </item>
                <item>
            <title>Małe - wielkie zmiany w NetBeans dla PHP</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>PHP</category>
                                    <content:encoded>&lt;p&gt;Nadchodzące wydanie NetBeans będzie zawierało w sobie pewną małą, ale istotną,
nowość dla wszystkich piszących w PHP i dbających o jakość stylu wytwarzanego 
oprogramowania.&lt;/p&gt;

&lt;h3 id=&quot;codesniffer-szyty-na-miar%C4%99&quot;&gt;CodeSniffer szyty na miarę&lt;/h3&gt;

&lt;p&gt;Jak można przeczytać na &lt;a href=&quot;https://blogs.oracle.com/netbeansphp/entry/php_tools_minor_improvements&quot;&gt;blogu dotyczącym wsparcia dla PHP w NetBeans&lt;/a&gt;, już 
niebawem, w kolejnej wersji oznaczonej numerem 8.2, możliwe będzie podłączenie
własnego pliku konfiguracyjnego dla analizatora stylu i składni jakim jest 
CodeSniffer. Oznacza to że od tego momentu możliwe będzie bardziej wybiórcze 
skonfigurowanie co ma być sprawdzane i raportowane przez NetBeans. Pomoże to 
wszystkim projektom które zmuszone są (np. z powodu &lt;em&gt;&quot;legacy code&quot;&lt;/em&gt;) pominąć
niektóre z &lt;a href=&quot;http://www.php-fig.org/psr/&quot;&gt;reguł proponowanych w PSR&lt;/a&gt;, a także tym projektom w których zdecydowano 
się stosować niestandardowe reguły sprawdzania składni.&lt;/p&gt;

&lt;h3 id=&quot;phpunit-na-%2Acito%2A&quot;&gt;PHPUnit na &lt;em&gt;cito&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Kolejnym usprawnieniem dla PHP wprowadzanym w NB 8.2 ma być pokazywanie wyników
testów napisanych w PHPUnit na bieżąco podczas ich wykonywania, a nie jak to jest
teraz dopiero po ich zakończeniu. Jest to, moim zdaniem, raczej zmiana kosmetyczna,
ale dobre i to.&lt;/p&gt;

&lt;p&gt;Czekamy więc na oficjalne wydanie NB 8.2. Niecierpliwi mogą już dziś testować te
i inne zmiany &lt;a href=&quot;http://bits.netbeans.org/dev/nightly/&quot;&gt;pobierając wersję &lt;em&gt;&quot;nightly&quot;&lt;/em&gt; ze strony producenta&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-07-20T21:10:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/07/20/male-wielkie-zmiany-w-netbeans-dla-php.html</link>
            <atom:link href="http://lion.net.pl/2016/07/20/male-wielkie-zmiany-w-netbeans-dla-php.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/07/20/male-wielkie-zmiany-w-netbeans-dla-php.html</guid>
        </item>
                <item>
            <title>Przekształcenia morfologiczne, kontekstowe i rozmyte</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>GKIRO</category>
                                    <content:encoded>&lt;p&gt;Post ten jest pierwszym z trzech w cyklu związanym z tematem &lt;strong&gt;badania wpływu
wstępnej filtracji obrazu na wyniki segmentacji wododziałowej&lt;/strong&gt;. Temat ten powinien
zainteresować wszystkie osoby rozpoczynające swoją przygodę z grafiką komputerową
i analizą obrazu.&lt;/p&gt;

&lt;p&gt;W pierwszej części postaram się przybliżyć pojęcia związane z podstawowymi
przekształceniami jakie można wykonać na obrazie. W drugiej części omówiona 
zostanie segmentacja wododziałowa. Kolejny wpis będzie dotyczył narzędzia jakie 
napisałem w celu przeprowadzania badań wpływu wstępnych przekształceń na wyniki 
segmentacji wododziałową. Tematem ostatniego wpisu w tym cyklu będą natomiast 
same wyniki, które udało się uzyskać podczas badania obrazów RTG szczęki człowieka.&lt;/p&gt;

&lt;p&gt;Zacznijmy od teorii.&lt;/p&gt;

&lt;h3 id=&quot;przekszta%C5%82cenia-obrazu&quot;&gt;Przekształcenia obrazu&lt;/h3&gt;

&lt;h4 id=&quot;przekszta%C5%82cenia-punktowe&quot;&gt;Przekształcenia punktowe&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Wyrównanie histogramu&lt;/strong&gt; jest to przykład przekształcenia punktowego obrazu w wyniku 
którego otrzymuje się obraz, w którym wszystkie poziomy szarości są równomiernie 
wykorzystane. Wyjściowy obraz charakteryzuje się lepszym kontrastem. Jeśli 
prawdopodobieństwo wystąpienia poziomu szarości wynosi:&lt;/p&gt;

&lt;p&gt;$$ p(r_k)=\frac{n_k}{n} $$&lt;/p&gt;

&lt;p&gt;gdzie: $$r_k$$ -- poziom szarości k, $$n_k$$ -- liczba pikseli w obrazie 
wejściowym, których wartość wynosi $$r_k$$, $$n$$ -- liczba wszystkich pikseli 
w obrazie, to wzór na wyrównanie histogramu przedstawia się następująco:&lt;/p&gt;

&lt;p&gt;$$ s_k = \sum_{0&amp;lt;j&amp;lt;k}p(r_j) = \sum_{0&amp;lt;j&amp;lt;k}\frac{n_j}{n} $$&lt;/p&gt;

&lt;p&gt;gdzie: $$s_k$$ -- poziom szarości w obrazie wyjściowym, $$k = 0,\ldots,L-1$$, 
L -- liczba odcieni szarości w obrazie wejściowym[&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;].&lt;/p&gt;

&lt;h4 id=&quot;przekszta%C5%82cenia-morfologiczne&quot;&gt;Przekształcenia morfologiczne&lt;/h4&gt;

&lt;p&gt;Przekształcenia morfologiczne polegają na wykonywaniu podstawowych przekształceń 
zbiorów, takich jak suma, różnica, dopełnienie i translacja, na elementach zbioru 
jakim jest obraz - na pikselach. W przekształceniach morfologicznych często 
stosuje się element strukturujący - niewielki, specjalnie przygotowany zbiór 
wartości będący argumentem funkcji przekształcenia morfologicznego
[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;].&lt;/p&gt;

&lt;h4 id=&quot;translacja&quot;&gt;Translacja&lt;/h4&gt;

&lt;p&gt;Translacja zbioru $$A$$ przez wektor $$b$$ oznacza że każdy element zbioru $$A$$ 
jest przesunięty w swojej dziedzinie zgodnie ze wzorem
[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;]:&lt;/p&gt;

&lt;p&gt;$$ A+b = &amp;#123;(a+h)|a \in A&amp;#125; $$&lt;/p&gt;

&lt;h4 id=&quot;erozja&quot;&gt;Erozja&lt;/h4&gt;

&lt;p&gt;Erozja obrazu $$A$$ elementem strukturującym $$B$$ oznacza iloczyn translacji 
$$A$$ poszczególnymi elementami zbioru $$B$$
[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;]:&lt;/p&gt;

&lt;p&gt;$$ E(A,B) = \bigcap_{b \in B}(A-b) $$&lt;/p&gt;

&lt;h4 id=&quot;dylacja&quot;&gt;Dylacja&lt;/h4&gt;

&lt;p&gt;Dylacja obrazu $$A$$ elementem strukturującym $$B$$ oznacza sumę translacji $$A$$
poszczególnymi elementami zbioru $$B$$[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;]:&lt;/p&gt;

&lt;p&gt;$$ D(A,B) = \bigcup_{b \in B}(A+b) $$&lt;/p&gt;

&lt;h4 id=&quot;otwarcie&quot;&gt;Otwarcie&lt;/h4&gt;

&lt;p&gt;Otwarcie obrazu $$A$$ elementem strukturującym $$B$$ jest złożeniem erozji oraz 
dylacji[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;]:&lt;/p&gt;

&lt;p&gt;$$ O(A,B) = D(E(A,B),B) $$&lt;/p&gt;

&lt;h4 id=&quot;zamkni%C4%99cie&quot;&gt;Zamknięcie&lt;/h4&gt;

&lt;p&gt;Zamknięcie obrazu $$A$$ elementem strukturującym $$B$$ jest złożeniem dylacji 
oraz erozji[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;]:&lt;/p&gt;

&lt;p&gt;$$ C(A,B) = E(D(A,B),B) $$&lt;/p&gt;

&lt;h4 id=&quot;white-top-hat&quot;&gt;White Top Hat&lt;/h4&gt;

&lt;p&gt;Transformata White Top Hat oznacza różnicę obrazu wejściowego $$A$$ i jego 
otwarcia elementem strukturującym $$B$$[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;]:&lt;/p&gt;

&lt;p&gt;$$ WTH(A,B) = A-O(A,B) $$&lt;/p&gt;

&lt;h4 id=&quot;black-top-hat&quot;&gt;Black Top Hat&lt;/h4&gt;

&lt;p&gt;Transformata Black Top Hat oznacza różnicę zamknięcia obrazu $$A$$ elementem 
strukturującym $$B$$ i obrazu wejściowego $$A$$
[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;]:&lt;/p&gt;

&lt;p&gt;$$ BTH(A,B) = C(A,B)-A $$&lt;/p&gt;

&lt;h4 id=&quot;gradient-morfologiczny&quot;&gt;Gradient morfologiczny&lt;/h4&gt;

&lt;p&gt;Gradient morfologiczny oznacza różnicę pomiędzy dylacją obrazu $$A$$ elementem 
strukturującym $$B$$ a erozją tego samego obrazu tym samym elementem 
strukturującym[&lt;a href=&quot;#segm-obr-cyfr&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;]:&lt;/p&gt;

&lt;p&gt;$$ G(A,B) = D(A,B)-E(A,B) $$&lt;/p&gt;

&lt;h3 id=&quot;przekszta%C5%82cenia-kontekstowe&quot;&gt;Przekształcenia kontekstowe&lt;/h3&gt;

&lt;h4 id=&quot;filtr-medianowy&quot;&gt;Filtr medianowy&lt;/h4&gt;

&lt;p&gt;Przekształcenie nazywane filtrem medianowym polega na przypisaniu pikselowi 
znajdującemu się pośrodku okna wartości będącej medianą wartości pikseli 
znajdujących się w danym oknie. Filtry medianowe pozwalają na usunięcie z obrazów 
szumów, zwłaszcza szumów typu &quot;pieprz i sól&quot;, przy czym nie wpływają znacząco na 
kontury obiektów znajdujących się na obrazie. Okna stosowane w filtrach 
medianowych mają kształt kwadratów o środku znajdującym się na współrzędnych 
aktualnie rozpatrywanego piksela[&lt;a href=&quot;#wyklady-gkiro&quot;&gt;1&lt;/a&gt;].&lt;/p&gt;

&lt;h3 id=&quot;przekszta%C5%82cenia-wykorzystuj%C4%85ce-elementy-logiki-rozmytej&quot;&gt;Przekształcenia wykorzystujące elementy logiki rozmytej&lt;/h3&gt;

&lt;h4 id=&quot;zbiory-rozmyte&quot;&gt;Zbiory rozmyte&lt;/h4&gt;

&lt;p&gt;Logika rozmyta jest produktem teorii zbiorów rozmytych. W teorii zbiorów 
rozmytych, w przeciwieństwie do klasycznej teorii zbiorów, przynależność 
elementu do zbioru nie jest opisana przy pomocy zbioru dwóch wartości &amp;#123;0, 1&amp;#125;, 
lecz jako wartość z przedziału [0, 1]. Dzięki temu możliwe jest takie 
przedstawianie podzbiorów wszystkich możliwych wartości rozpatrywanych zbiorów 
na jakie wskazywałaby baza zebranej wiedzy. Wartości z przedziału [0, 1], 
przypisywane poszczególnym elementom zbiorów rozmytych noszą nazwę stopni 
przynależności danego elementu do zbioru[&lt;a href=&quot;#ster-rozm&quot;&gt;3&lt;/a&gt;].&lt;/p&gt;

&lt;h4 id=&quot;zmienne-lingwistyczne&quot;&gt;Zmienne lingwistyczne&lt;/h4&gt;

&lt;p&gt;W teorii zbiorów rozmytych występują zbiory określane poprzez zmienne lingwistyczne:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Przez &lt;em&gt;zmienną lingwistyczną&lt;/em&gt; rozumiemy zmienną, której wartościami są słowa 
  lub zdania w języku naturalnym lub sztucznym. Dla przykładu &lt;em&gt;Wiek&lt;/em&gt; jest zmienną 
  lingwistyczną, jeśli jej wartości są wyrażone słowami, a nie liczbami, to znaczy 
  &lt;em&gt;młody&lt;/em&gt;, &lt;em&gt;niemłody&lt;/em&gt;, &lt;em&gt;bardzo młody&lt;/em&gt;, &lt;em&gt;całkiem młody&lt;/em&gt;, &lt;em&gt;stary&lt;/em&gt;, &lt;em&gt;nie bardzo stary&lt;/em&gt;, 
  &lt;em&gt;nie bardzo młody&lt;/em&gt; itd. zamiast 20, 21, 22, 23, ...[&lt;a href=&quot;#ster-rozm&quot;&gt;3&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/img/gkiro/podobienstwo_pikseli_fuzzy.png&quot; 
        alt=&quot;Zbiory rozmyte - podobieństwo pikseli, przykład rysunek poglądowy&quot;&gt;
    &lt;figcaption&gt;
        Rysunek 1: Zbiory rozmyte - podobieństwo pikseli, przykład rysunek poglądowy
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Dzięki zastosowaniu zmiennych lingwistycznych o wiele łatwiejsze stało się takie 
opisywanie badanych wielkości, by utworzone przedziały odzwierciedlały wiedzę 
ekspertów w danej dziedzinie. Zastosowanie zbiorów rozmytych, połączone z 
tworzeniem bazy wiedzy eksperckiej, pozwoliło na o wiele łatwiejsze, a dzięki 
temu szybsze, rozwiązanie wielu problemów z dziedziny automatyki i elektroniki. 
Algorytmy wykorzystujące zbiory rozmyte wykorzystywane są w sterowaniu procesami 
wytwórczymi, sterowaniu powszechnie używanymi urządzeniami elektronicznymi oraz 
w innych dziedzinach. Algorytmy te zostały wykorzystane w wielu dziedzinach 
informatyki, w tym także w grafice komputerowej. W przypadku obrazu, 
rozpatrywanym zagadnieniem może być np. podobieństwo pikseli, a utworzonymi 
zmiennymi lingwistycznymi oceny jakie można temu podobieństwu przypisać, np. 
&lt;em&gt;bardzo małe&lt;/em&gt;, &lt;em&gt;małe&lt;/em&gt;, &lt;em&gt;średnie&lt;/em&gt;, &lt;em&gt;duże&lt;/em&gt;, &lt;em&gt;bardzo duże&lt;/em&gt;. Przykład takich zbiorów 
rozmytych, przedstawiony w formie wykresy pokazano na rysunku 1. Widać na nim, 
że zbiory nie są ostre, istnieją takie wartości różnicy intensywności pikseli, 
dla których przynależność do danego zbioru zawiera się w przedziale [0, 1]. Co 
więcej istnieją takie wartości różnicy intensywności pikseli, dla których 
wartość ta zawiera się w dwóch (w tym przypadku), ogólnie w więcej niż jednym 
zbiorze. Odzwierciedla to sytuację, w której ekspert dziedziny nie może 
jednoznacznie wskazać do jakiego zbiory przyporządkować zadany element
[&lt;a href=&quot;#ster-rozm&quot;&gt;3&lt;/a&gt;].&lt;/p&gt;

&lt;h4 id=&quot;regu%C5%82y-decyzyjne&quot;&gt;Reguły decyzyjne&lt;/h4&gt;

&lt;p&gt;Do opisu związków pomiędzy zbiorami wprowadzono wyrażenia warunkowe w postaci:&lt;/p&gt;

&lt;p&gt;$$ jeżeli \langle\ poprzednik&amp;#95;reguly\ \rangle\ to \langle\ nastepnik&amp;#95;reguly\ \rangle $$&lt;/p&gt;

&lt;p&gt;Każde takie wyrażenie nazywane jest regułą decyzyjną, lub w skrócie regułą[&lt;a href=&quot;#ster-rozm&quot;&gt;3&lt;/a&gt;].&lt;/p&gt;

&lt;h4 id=&quot;filtr-redukuj%C4%85cy-szum-wykorzystuj%C4%85cy-elementy-logiki-rozmytej&quot;&gt;Filtr redukujący szum wykorzystujący elementy logiki rozmytej&lt;/h4&gt;

&lt;p&gt;W artykule [&lt;a href=&quot;#fuzzy-noise-reduction&quot;&gt;4&lt;/a&gt;] zaproponowano algorytm służący do 
redukcji szumu na obrazach, wykorzystujący technikę rozmytą. Działanie algorytmu 
dzieli się na dwie części. Podczas pierwszej z nich, dla każdego piksela obrazu 
określane jest czy jest on pikselem będącym szumem i w jakim stopniu można to 
określić, etap ten nazwano &lt;em&gt;Fuzzy Noise Estimation&lt;/em&gt;. Określenie czy piksel 
zawiera szum następuje po obliczeniu dwóch parametrów rozmytych. Pierwszy z nich 
to różnica w intensywności koloru pomiędzy danym pikselem a pikselami w jego 
8-sąsiedztwie, dalej oznaczana jako &lt;em&gt;deg&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;$$ dif = min|f(x, y)-f(x&#039;, y&#039;)| $$&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/img/gkiro/fuzzy/fuzzy_dif_chart.png&quot; 
        alt=&quot;Wykres stopnia przynależności parametru dif&quot;&gt;
    &lt;figcaption&gt;
        Rysunek 2: Wykres stopnia przynależności parametru &lt;em&gt;dif&lt;/em&gt;. 
        Reprodukcja z &lt;a href=&quot;#fuzzy-noise-reduction&quot;&gt;4&lt;/a&gt;.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Pierwszy parametr może przyjmować następujące wartości lingwistyczne: &lt;em&gt;Low&lt;/em&gt;, 
&lt;em&gt;Medium&lt;/em&gt;, &lt;em&gt;High&lt;/em&gt;. Wykres stopni przynależności pokazano na rysunku 2.&lt;/p&gt;

&lt;p&gt;Drugi parametr to liczba pikseli podobnych do danego piksela w jego 8-sąsiedztwie, 
dalej oznaczany jako &lt;em&gt;num&lt;/em&gt;. Podobieństwo określa się na podstawie różnicy 
intensywności koloru i progu, poniżej którego ta różnica oznacza podobieństwo, 
a powyżej którego niepodobieństwo dwóch pikseli:&lt;/p&gt;

&lt;p&gt;$$ num = &amp;#123; (x&#039;, y&#039;)|(x&#039;, y&#039;) \in N_8 (x, y) \&amp;amp; |f(x, y) - f (x&#039;, y&#039;)| &amp;lt; treshold &amp;#125; $$&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/img/gkiro/fuzzy/fuzzy_num_chart.png&quot; 
        alt=&quot;Wykres stopnia przynależności parametru num&quot;&gt;
    &lt;figcaption&gt;
        Rysunek 3: Wykres stopnia przynależności parametru &lt;em&gt;num&lt;/em&gt;. 
        Reprodukcja z &lt;a href=&quot;#fuzzy-noise-reduction&quot;&gt;4&lt;/a&gt;.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Drugi parametr może przyjmować następujące wartości lingwistyczne: &lt;em&gt;None&lt;/em&gt;, &lt;em&gt;Few&lt;/em&gt;, 
&lt;em&gt;Many&lt;/em&gt;. Wykres stopni przynależności pokazano na rysunku 3.&lt;/p&gt;

&lt;p&gt;Na podstawie przedstawionych wcześniej parametrów przygotowano następujące reguły 
decyzyjne, wyznaczające stopień w jakim dany piksel jest uznawany za piksel 
zaszumiony, danej oznaczany jako &lt;em&gt;deg&lt;/em&gt;. Parametr ten może przyjmować wartości 
lingwistyczne takie jak &lt;em&gt;Small&lt;/em&gt;, &lt;em&gt;Moderate&lt;/em&gt;, &lt;em&gt;Big&lt;/em&gt;, &lt;em&gt;Very Big&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest Low) &lt;strong&gt;i&lt;/strong&gt; (num jest None) &lt;strong&gt;to&lt;/strong&gt; (deg jest Moderate)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest Low) &lt;strong&gt;i&lt;/strong&gt; (num jest Few) &lt;strong&gt;to&lt;/strong&gt; (deg jest Big)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest Low) &lt;strong&gt;i&lt;/strong&gt; (num jest Many) &lt;strong&gt;to&lt;/strong&gt; (deg jest Very Big)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest Medium) &lt;strong&gt;i&lt;/strong&gt; (num jest None) &lt;strong&gt;to&lt;/strong&gt; (deg jest Small)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest Medium) &lt;strong&gt;i&lt;/strong&gt; (num jest Few) &lt;strong&gt;to&lt;/strong&gt; (deg jest Moderate)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest Medium) &lt;strong&gt;i&lt;/strong&gt; (num jest Many) &lt;strong&gt;to&lt;/strong&gt; (deg jest Big)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest High) &lt;strong&gt;i&lt;/strong&gt; (num jest None) &lt;strong&gt;to&lt;/strong&gt; (deg jest Small)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest High) &lt;strong&gt;i&lt;/strong&gt; (num jest Few) &lt;strong&gt;to&lt;/strong&gt; (deg jest Moderate)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (dif jest High) &lt;strong&gt;i&lt;/strong&gt; (num jest Many) &lt;strong&gt;to&lt;/strong&gt; (deg jest Moderate)&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/img/gkiro/fuzzy/fuzzy_deg_chart.png&quot; 
        alt=&quot;Wykres stopnia przynależności parametru deg&quot;&gt;
    &lt;figcaption&gt;
        Rysunek 4: Wykres stopnia przynależności parametru &lt;em&gt;deg&lt;/em&gt;. 
        Reprodukcja z &lt;a href=&quot;#fuzzy-noise-reduction&quot;&gt;4&lt;/a&gt;.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Wykres stopni przynależności pokazano na rysunku 4.&lt;/p&gt;

&lt;p&gt;Parametr &lt;em&gt;deg&lt;/em&gt; jest wyjściem algorytmu &lt;em&gt;Fuzzy Noise Estimation&lt;/em&gt;, a jednocześnie 
jednym z argumentów wejściowych dla algorytmu &lt;em&gt;Fuzzy Smoothing&lt;/em&gt;. W drugim 
algorytmie, aby wyliczyć wagi dla wszystkich pikseli znajdujących się w 
8-sąsiedztwie obliczany jest parametr &lt;em&gt;diff&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;$$ diff = |f(x,y) - f(x-k, y-l)| $$&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/img/gkiro/fuzzy/fuzzy_diff_chart.png&quot; 
        alt=&quot;Wykres stopnia przynależności parametru diff&quot;&gt;
    &lt;figcaption&gt;
        Rysunek 5: Wykres stopnia przynależności parametru &lt;em&gt;diff&lt;/em&gt;. 
        Reprodukcja z &lt;a href=&quot;#fuzzy-noise-reduction&quot;&gt;4&lt;/a&gt;.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Wykres stopni przynależności pokazano na rysunku 5. Jeśli wynik działania jest 
&lt;em&gt;duży&lt;/em&gt; to &lt;em&gt;mała&lt;/em&gt; waga powinna zostać przypisana do danego piksela, by zredukować 
jego udział w procesie uśredniania.&lt;/p&gt;

&lt;p&gt;Na podstawie otrzymanych wartości rozmytych &lt;em&gt;diff&lt;/em&gt; oraz wyjścia poprzedniego 
algorytmu &lt;em&gt;deg&lt;/em&gt; utworzono następujące reguły decyzyjne wyznaczające parametr 
&lt;em&gt;weight&lt;/em&gt; będący zbiorem rozmytym w którym znajduje się szukana wartość wagi dla 
danego piksela:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Small) &lt;strong&gt;i&lt;/strong&gt; (deg jest Low) &lt;strong&gt;to&lt;/strong&gt; (weight jest Small)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Small) &lt;strong&gt;i&lt;/strong&gt; (deg jest Moderate) &lt;strong&gt;to&lt;/strong&gt; (weight jest Moderate)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Small) &lt;strong&gt;i&lt;/strong&gt; (deg jest Big) &lt;strong&gt;to&lt;/strong&gt; (weight jest Big)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Small) &lt;strong&gt;i&lt;/strong&gt; (deg jest Very Big) &lt;strong&gt;to&lt;/strong&gt; (weight jest Very Big)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Medium) &lt;strong&gt;i&lt;/strong&gt; (deg jest Low) &lt;strong&gt;to&lt;/strong&gt; (weight jest Small)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Medium) &lt;strong&gt;i&lt;/strong&gt; (deg jest Moderate) &lt;strong&gt;to&lt;/strong&gt; (weight jest Moderate)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Medium) &lt;strong&gt;i&lt;/strong&gt; (deg jest Big) &lt;strong&gt;to&lt;/strong&gt; (weight jest Big)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Medium) &lt;strong&gt;i&lt;/strong&gt; (deg jest Very Big) &lt;strong&gt;to&lt;/strong&gt; (weight jest Very Big)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Large) &lt;strong&gt;i&lt;/strong&gt; (deg jest Low) &lt;strong&gt;to&lt;/strong&gt; (weight jest Small)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Large) &lt;strong&gt;i&lt;/strong&gt; (deg jest Moderate) &lt;strong&gt;to&lt;/strong&gt; (weight jest Moderate)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Large) &lt;strong&gt;i&lt;/strong&gt; (deg jest Big) &lt;strong&gt;to&lt;/strong&gt; (weight jest Big)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jeżeli&lt;/strong&gt; (diff jest Large) &lt;strong&gt;i&lt;/strong&gt; (deg jest Very Big) &lt;strong&gt;to&lt;/strong&gt; (weight jest Very Big)&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/img/gkiro/fuzzy/fuzzy_weight_chart.png&quot; 
        alt=&quot;Wykres stopnia przynależności parametru weight&quot;&gt;
    &lt;figcaption&gt;
        Rysunek 6: Wykres stopnia przynależności parametru &lt;em&gt;weight&lt;/em&gt;. 
        Reprodukcja z &lt;a href=&quot;#fuzzy-noise-reduction&quot;&gt;4&lt;/a&gt;.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Wykres stopni przynależności pokazano na rysunku 6. Na podstawie otrzymanych w 
algorytmie &lt;em&gt;Fuzzy Smoothing&lt;/em&gt; wartości dobiera się wagi dla pikseli znajdujących 
się w oknie 3x3 i oblicza nową wartość dla dla piksela centralnego.&lt;/p&gt;

&lt;h2 id=&quot;literatura&quot;&gt;Literatura&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a name=&quot;wyklady-gkiro&quot;&gt;
    &lt;strong&gt;A. Świtoński. &lt;em&gt;Wykłady z przedmiotu Grafika Komputerowa i 
    Rozpoznawanie Obrazów&lt;/em&gt;.&lt;/strong&gt; Politechnika Śląska, 2013
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a name=&quot;segm-obr-cyfr&quot;&gt;&lt;strong&gt;M. Nieniewski. &lt;em&gt;Segmentacja obrazów cyfrowych. Metody segmentacji wododziałowej&lt;/em&gt;.&lt;/strong&gt; Akademicka Oficyna Wydawnicza EXIT, 2005&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a name=&quot;ster-rozm&quot;&gt;&lt;strong&gt;D. Driankov, H. Hellendoorm, M. Reinfrank. &lt;em&gt;Wprowadzenie do sterowania rozmytego&lt;/em&gt;.&lt;/strong&gt; Wydawnictwa Naukowo-Techniczne, 1993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a name=&quot;fuzzy-noise-reduction&quot;&gt;&lt;strong&gt;H. V. Nejad, H. R. Pourreza, H. Ebrahimi. &lt;em&gt;A Novel Fuzzy Technique for Image Noise Reduction&lt;/em&gt;.&lt;/strong&gt; World Academy Of Science, Engineering and Technology, 2008&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Treść tego wpisu zawiera fragmenty mojej pracy dyplomowej &lt;strong&gt;&quot;Badanie wpływu 
wstępnej filtracji na proces segmentacji w analizie patologicznych zmian w 
obrębie zębów widocznych na zdjęciach RTG&quot;&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Zobacz także:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/07/24/emgucvdemo-aplikacja-testujaca-wplyw-wybranych-filtrow-na-wyniki-segmentacji-wododzialowej.html&quot;&gt;EmguCVDemo - aplikacja testująca wpływ wybranych filtrów na wyniki segmentacji wododziałowej&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/08/06/wplyw-wstepnej-filtracji-na-segmentacje-wododzialowa.html&quot;&gt;Wpływ wstępnej filtracji na segmentację wododziałową&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
            <pubDate>2016-07-03T09:30:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/07/03/przeksztalcenia-morfologiczne-kontekstowe-i-rozmyte.html</link>
            <atom:link href="http://lion.net.pl/2016/07/03/przeksztalcenia-morfologiczne-kontekstowe-i-rozmyte.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/07/03/przeksztalcenia-morfologiczne-kontekstowe-i-rozmyte.html</guid>
        </item>
                <item>
            <title>Dałem się poznać</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>DDF</category>
                        <category>BLOG</category>
                                    <content:encoded>&lt;p&gt;Przez ostatnie 3 miesiące mogłeś śledzić jak sobie radzę w konkursie &lt;em&gt;&quot;Daj się 
poznać 2016&quot;&lt;/em&gt;. Mam nadzieję, że dałem się poznać z tej lepszej strony. Teraz gdy 
już po wszystkim, gdy emocje opadają a projekty są skończone, czas na małą 
refleksję.&lt;/p&gt;

&lt;h3 id=&quot;wyniki-konkursu&quot;&gt;Wyniki konkursu&lt;/h3&gt;

&lt;p&gt;Konkurs &lt;a href=&quot;http://devstyle.pl/2016/06/01/daj-sie-poznac-2016-wielki-final&quot;&gt;został zakończony&lt;/a&gt;, została ogłoszona &lt;a href=&quot;http://devstyle.pl/daj-sie-poznac/daj-sie-poznac-finalisci-2016&quot;&gt;lista bohaterów&lt;/a&gt;. Tym 
wszystkim osobom udało się dotrwać do końca i spełnić warunki konkursu. Miło mi
że &lt;strong&gt;jedną z tych 70 osób jestem ja&lt;/strong&gt;. Gdy 3 miesiące temu startowałem nie myślałem
że zgłosi się prawie 300 osób, liczyłem że będzie to góra 50 programistycznych
geeków. A tu taka niespodzianka. Okazuje się że jest nas sporo, że ludzie interesują
się samorozwojem i nadspodziewanie optymistycznie podchodzą do takich inicjatyw
jak DPS2016. W tym zawodzie ciągły rozwój to podstawa! Oby tak dalej! Życzę nam
wszystkim dalszej wytrwałości w dążeniu do perfekcji w dziedzinie wytwarzania
oprogramowania!&lt;/p&gt;

&lt;h4 id=&quot;fina%C5%82&quot;&gt;Finał&lt;/h4&gt;

&lt;p&gt;Z grupy bohaterów &lt;a href=&quot;http://devstyle.pl/2016/06/08/daj-sie-poznac-2016-glosowanie-i-gala/&quot;&gt;została wybrana w wewnętrznym głosowaniu szczęśliwa 16-tka&lt;/a&gt;, 
której projekty i blog najbardziej spodobał się konkurencji. Niestety tam już się
nie załapałem... Gratuluję szczęśliwcom.&lt;/p&gt;

&lt;p&gt;Wśród finalistów znalazł się jeden z blogów i powiązana aplikacja, na który oddałem 
swój głos. Jest to &lt;strong&gt;&lt;a href=&quot;http://programistka.net&quot;&gt;aplikacja mobilna służąca do planowania zakupów&lt;/a&gt;&lt;/strong&gt;, napisana 
w Java. Tą aplikację zauważyłem dopiero po zakończeniu konkursu, jednak po 
przejrzeniu wszystkich innych, zarówno tych które śledziłem jak i tych na które nie
starczyło mi czasu, wydaje mi się że &lt;strong&gt;najbardziej zasługuje na wyróżnienie&lt;/strong&gt;. 
Wygląda całkiem fajnie na zaprezentowanych screenach, może kiedyś przetestuję ją 
także na telefonie. Autorce udało się zrobić całkiem sporo w tak krótkim czasie.&lt;/p&gt;

&lt;p&gt;Ciekawymi projektami, które jednak nie przeszły dalej były są także:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://incodable.blogspot.com&quot;&gt;aplikacja służąca do planowania tras wycieczek&lt;/a&gt;, napisana w Ionic Framework.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsdn.pl&quot;&gt;gra platformowa napisana w JS&lt;/a&gt;, a także kilka innych gierek które można 
znaleźć na blogu tego uczestnika.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ogólnie można zauważyć że na liście finalistów królują projekty i blogi powiązane
z technologiami &lt;em&gt;.NET&lt;/em&gt; (11/16), jest też trochę o Java (2/16) oraz JavaScript i C.
Takie nierównomierne rozłożenie technologii było już widać na poprzednich etapach
konkursu, ale jest to pewnie związane z tym że sam konkurs wypłynął z środowiska
.NETowców, a głównym sponsorem jest sami wiecie kto ;). &lt;a href=&quot;http://macieklesiczka.github.io/&quot;&gt;Ciekawe statystyki 
konkursu&lt;/a&gt; można znaleźć na stronie jednego z finalistów który pisał aplikację 
do zbierania danych o konkursie.&lt;/p&gt;

&lt;p&gt;Pozostaje teraz czekać na &lt;a href=&quot;http://ankieta.dajsiepoznac.pl/&quot;&gt;wyniki ankiety kolejnej ankiety&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;m%C3%B3j-blog&quot;&gt;Mój blog&lt;/h3&gt;

&lt;p&gt;Konkurs miał duży pozytywny wpływ na ten blog. &lt;strong&gt;Udało mi się przez 3 miesiące 
napisać 28 postów&lt;/strong&gt; z czego &lt;a href=&quot;blog/tags/#DSP2016&quot;&gt;27 było postami konkursowymi&lt;/a&gt;. &lt;strong&gt;Napisałem
w sumie aż 13525 słów&lt;/strong&gt; co daje średnio 500 słów na post. Dawno się tak nie rozpisywałem.
Ogólnie jestem bardzo zadowolony z merytorycznej wartości każdego z opublikowanych
postów. Ich przygotowanie kosztowało mnie trochę czasu, ale jest to dobrze
spożytkowany czas - raz napisany i opublikowany post zostanie tu na zawsze i 
będzie przyciągał czytelników.&lt;/p&gt;

&lt;p&gt;Blog przeszedł w tym czasie także spory lifting, nadal charakteryzuje go 
minimalistyczna forma, nadal jest &lt;a href=&quot;/2014/06/19/ready-steady-blog.html&quot;&gt;hostowany na GitHub Pages a jego silnikiem 
jest Jekyll&lt;/a&gt;. Udało mi się jednak poświęcić trochę czasu aby jego czytanie
było łatwiejsze wprowadzając trochę więcej semantyki i RWD w kod bloga.&lt;/p&gt;

&lt;h4 id=&quot;kana%C5%82-rss&quot;&gt;Kanał RSS&lt;/h4&gt;

&lt;p&gt;Jednym z warunków uczestnictwa w DSP2016 było udostępnienie kanału RSS czytelnikom.
Sama idea kanałów RSS tak bardzo mi się spodobała, że od razu w rozszerzyłem swój 
czytnik poczty o czytnik kanałów z wiadomościami z blogów. Jeśli jeszcze nie masz 
kanału RSS na swoim blogu załóż go jak najszybciej - super sprawa. Nie trzeba
zapisywać się żadną listę mailingową by być informowanym na bieżąco.&lt;/p&gt;

&lt;p&gt;Z drugiej strony lista mailingowa daje dużo większe możliwości promocji, jednak
na obecnym etapie byłaby przerostem formy nad treścią.&lt;/p&gt;

&lt;p&gt;Jeśli jeszcze nie zapisałeś się na &lt;a href=&quot;blog/feed.xml&quot;&gt;mój kanał RSS możesz to zrobić klikając w ten
link&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;seo&quot;&gt;SEO&lt;/h4&gt;

&lt;p&gt;Popracowałem także trochę nad optymalizacją strony, tak aby roboty wielkiego brata
czuły się na niej jak w domu, ale jest jeszcze sporo do zrobienia. Nie chciałem
specjalnie spamować gdzie się tylko da, więc jeśli trafiłeś tu z wyszukiwarki to
jest to raczej &lt;strong&gt;zasługa pasywnego SEO&lt;/strong&gt; niż agresywnej autopromocji.&lt;/p&gt;

&lt;p&gt;Nie zdecydowałem się na śledzenie użytkowników, bo w sumie nie jest mi to do niczego
potrzebne, a sam blokuje takie wynalazki jak tylko się da w mojej przeglądarce
(AdBlock, NoScript). Mimo to mogłem w narzędziach dla webmasterów od wielkiego 
brata (zwanych obecnie konsolą), &lt;strong&gt;zauważyć pewien wzrost ruchu na tej stronie&lt;/strong&gt;.
Nie było by go gdyby nie ten konkurs i wyprodukowana przeze mnie treść na blogu.&lt;/p&gt;

&lt;h3 id=&quot;ja&quot;&gt;Ja&lt;/h3&gt;

&lt;p&gt;Konkurs DSP2016 nauczył mnie bardzo wiele o sobie samym. Cieszę się że udało mi
się sprostać warunkom konkursu. Wymagało to ode mnie &lt;strong&gt;dużej konsekwencji w działaniu,
samozaparcia, planowania z wyprzedzeniem&lt;/strong&gt;. Sporo także przy okazji nauczyłem się
o samym JS. Wybranie zestawu technologii o którym nie ma się zielonego pojęcia
okazało się strzałem w dziesiątkę! &lt;strong&gt;Jestem zadowolony&lt;/strong&gt; z &lt;a href=&quot;/2016/05/30/raport-3-z-prac-nad-ddf.html&quot;&gt;rezultatu jaki udało mi
się ostatecznie osiągnąć&lt;/a&gt;. Aplikacja DDF nie powstałaby zapewne gdyby nie ten 
konkurs. Mam nadzieję że &lt;strong&gt;w przyszłości ta &lt;a href=&quot;/2016/03/01/dam-sie-poznac.html&quot;&gt;aplikacja obliczająca dawki leków na
urządzenia mobilne&lt;/a&gt; przyda się komuś w codziennym życiu lub w pracy&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;moje-wsparcie&quot;&gt;Moje wsparcie&lt;/h4&gt;

&lt;p&gt;W tym miejscu chciałbym podziękować wszystkim tym którzy wspierali mnie przez te 
ostatnie 3 miesiące. &lt;strong&gt;W szczególności mojej drugiej połówce, która od samego 
początku wspierała mnie podczas trwania konkursu&lt;/strong&gt;. Bez takiego wsparcia pewnie 
nie dotrwałbym do końca, a tak, wiedząc że pierwszym i najsurowszym recenzentem
będzie najbliższa osoba, która bez chwili zawahania wypunktuje każdy błąd i każdą
fuszerkę, udało mi się dostarczyć Wam kilka całkiem dobrej jakości, merytorycznych 
postów na temat JS, QA  i inżynierii programowania.&lt;/p&gt;

&lt;h4 id=&quot;leo%2C-what%27s-next%3F&quot;&gt;Leo, what&#039;s next?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Zamierzam dalej rozwijać DDF&lt;/strong&gt;. Możecie się spodziewać także kolejnych artykułów
dotyczących JS bo spodobał mi się ten cały frontend, a zwłaszcza możliwość robienia
w JS mobilnych aplikacji hybrydowych. &lt;strong&gt;Mam w planach także serię artykułów o PHP&lt;/strong&gt;, 
czyli o mojej preferowanej technologii. Nie obędzie się bez inżynierii oprogramowania
i technik zapewnienia jakości oprogramowania. Tak więc bądźcie czujni, wpadajcie 
na bloga, &lt;a href=&quot;blog/feed.xml&quot;&gt;zapisujcie się na kanał RSS&lt;/a&gt;!&lt;/p&gt;
</content:encoded>
            <pubDate>2016-06-12T20:20:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/06/12/dalem-sie-poznac.html</link>
            <atom:link href="http://lion.net.pl/2016/06/12/dalem-sie-poznac.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/06/12/dalem-sie-poznac.html</guid>
        </item>
                <item>
            <title>Raport #3 z prac nad DDF</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                        <category>OOP</category>
                        <category>QA</category>
                                    <content:encoded>&lt;p&gt;To już koniec. Ale coś jest. Jest skończona aplikacja na konkurs DSP2016! Zachęcam
do zapoznania się z trzecim i ostatnim raportem z prac nad DDF wykonanym podczas
trwania DSP2016 (mam zamiar dalej rozwijać aplikację, ale już poza konkursem).&lt;/p&gt;

&lt;h3 id=&quot;post%C4%99py-w-ddf&quot;&gt;Postępy w DDF&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;img/DSP2016/icon.png&quot; alt=&quot;Ikona DDF&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Z powodów opisanych &lt;a href=&quot;/2016/05/28/szewc-ze-starym-smartfonem-chodzi.html&quot;&gt;przeze mnie ostatnio&lt;/a&gt;, postanowiłem przesunąć funkcjonalność
polegającą na możliwości wskazywania plików z lekami i ich dawkowaniem do &lt;a href=&quot;/2016/04/29/podroz-na-wschod-roadmap-z-moscow.html&quot;&gt;sekcji
&quot;COULD&quot; analizy wymagań&lt;/a&gt;. Zostały za to spełnione inne wymagania, czyli 
&lt;a href=&quot;/2016/04/26/i18n-z-angularjs-gettext.html&quot;&gt;wdrożenie I18N&lt;/a&gt;, &lt;a href=&quot;/2016/05/26/ikony-i-splash-screen-aplikacji-w-ionic-framework.html&quot;&gt;dodanie ikony i splash screena&lt;/a&gt; (widoczne obok).
Została wydana &lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework/releases/tag/v0.3.0&quot;&gt;wersja 0.3 aplikacji DDF, do pobrania z repozytorium&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;model&quot;&gt;Model&lt;/h4&gt;

&lt;p&gt;Model aplikacji nie zmienił się od czasu &lt;a href=&quot;/2016/04/14/raport-2-z-prac-nad-ddf.html&quot;&gt;poprzedniego raportu&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;kontroler&quot;&gt;Kontroler&lt;/h4&gt;

&lt;p&gt;Jeśli chodzi o kontrolery to tutaj zaszły pewne zmiany. Dodałem obsługę &lt;a href=&quot;/2016/04/19/powiadomienia-w-ionic-framework.html&quot;&gt;powiadomień 
z Ionic Framework&lt;/a&gt;. Wprowadziłem &lt;a href=&quot;/2016/04/26/i18n-z-angularjs-gettext.html&quot;&gt;wsparcie dla I18N&lt;/a&gt; - udało mi się to 
zrobić tak, że &lt;a href=&quot;/2016/05/10/zmiana-jezyka-on-the-fly-w-ionic-i-angular-gettext.html&quot;&gt;zmiana języka odbywa się bez konieczności przeładowania aplikacji 
na telefonie&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;widoki&quot;&gt;Widoki&lt;/h4&gt;

&lt;p&gt;Został zmieniony sposób w jaki przechodzi się do szczegółów leku oraz do kalkulatora
dawki leku. Dodano zostało wysuwane boczne menu. Z tego menu można przejść do 
widoku ustawień językowych. Poniżej przedstawiam galerię prezentującą poszczególne
widoki:&lt;/p&gt;

&lt;div class=&quot;gallery&quot;&gt;

    &lt;div class=&quot;galleryItem&quot;&gt;
        &lt;div class=&quot;stack twisted&quot;&gt;
            &lt;a href=&quot;{{site.url}}/assets/img/DSP2016/ddf-drug-list-polish.png&quot;&gt;
                &lt;img src=&quot;{{site.url}}/assets/img/DSP2016/ddf-drug-list-polish.png&quot; alt=&quot;lista leków&quot;/&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;galleryItem&quot;&gt;
        &lt;div class=&quot;stack twisted&quot;&gt;
            &lt;a href=&quot;{{site.url}}/assets/img/DSP2016/ddf-drug-details.png&quot;&gt;
                &lt;img src=&quot;{{site.url}}/assets/img/DSP2016/ddf-drug-details.png&quot; alt=&quot;szczegóły leku&quot;/&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;galleryItem&quot;&gt;
        &lt;div class=&quot;stack twisted&quot;&gt;
            &lt;a href=&quot;{{site.url}}/assets/img/DSP2016/ddf-dose-calculator.png&quot;&gt;
                &lt;img src=&quot;{{site.url}}/assets/img/DSP2016/ddf-dose-calculator.png&quot; alt=&quot;kalkulator dawki leku&quot;/&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;galleryItem&quot;&gt;
        &lt;div class=&quot;stack twisted&quot;&gt;
            &lt;a href=&quot;{{site.url}}/assets/img/DSP2016/ddf-dose-result.png&quot;&gt;
                &lt;img src=&quot;{{site.url}}/assets/img/DSP2016/ddf-dose-result.png&quot; alt=&quot;wynik obliczenia dawki leku&quot;/&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;galleryItem&quot;&gt;
        &lt;div class=&quot;stack twisted&quot;&gt;
            &lt;a href=&quot;{{site.url}}/assets/img/DSP2016/ddf-dose-exception.png&quot;&gt;
                &lt;img src=&quot;{{site.url}}/assets/img/DSP2016/ddf-dose-exception.png&quot; alt=&quot;komunikat o błędzie podczas obliczania dawki leku&quot;/&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;galleryItem&quot;&gt;
        &lt;div class=&quot;stack twisted&quot;&gt;
            &lt;a href=&quot;{{site.url}}/assets/img/DSP2016/ddf-language-settings-1.png&quot;&gt;
                &lt;img src=&quot;{{site.url}}/assets/img/DSP2016/ddf-language-settings-1.png&quot; alt=&quot;boczne menu prowadzące do widoku zmiany języka aplikacji&quot;/&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;galleryItem&quot;&gt;
        &lt;div class=&quot;stack twisted&quot;&gt;
            &lt;a href=&quot;{{site.url}}/assets/img/DSP2016/ddf-language-settings-2.png&quot;&gt;
                &lt;img src=&quot;{{site.url}}/assets/img/DSP2016/ddf-language-settings-2.png&quot; alt=&quot;formularz zmiany języka aplikacji&quot;/&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;galleryItem&quot;&gt;
        &lt;div class=&quot;stack twisted&quot;&gt;
            &lt;a href=&quot;{{site.url}}/assets/img/DSP2016/ddf-drug-list-english.png&quot;&gt;
                &lt;img src=&quot;{{site.url}}/assets/img/DSP2016/ddf-drug-list-english.png&quot; alt=&quot;lista leków po angielsku&quot;/&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;testy&quot;&gt;Testy&lt;/h4&gt;

&lt;p&gt;Włączyłem w projekcie &lt;a href=&quot;/2016/05/18/code-coverage-w-karma.html&quot;&gt;raporty pokrycia kodu testami jednostkowymi uruchamianymi
przez Karma&lt;/a&gt;. Pomimo rozwoju aplikacji udało się utrzymać pokrycie na wysokim
poziomie, oscylującym wokół 80%, model przetestowany jest w 100%!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/DSP2016/ddf-code-coverage-1.png&quot; alt=&quot;DDF Karma code coverage report #1&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;stan-aplikacji&quot;&gt;Stan aplikacji&lt;/h4&gt;

&lt;p&gt;Ostatnie 3 miesiące były dla mnie bardzo pracowite. Poza codziennymi obowiązkami
zgłosiłem się do DSP2016. Warunki konkursu były bardzo dobrze wyważone - pozwalały
wystartować w nim osobom pracującym, które na rozbudowę aplikacji i blogowanie
mogły poświęcić ograniczoną ilość czasu. Myślę że udało mi się wykorzystać ten 
czas w optymalny sposób. Aplikacja konkursowa działa, może być już wykorzystywana
w zakresie dla którego została wymyślona, czyli do budowy aplikacji obliczających dawki
leków na urządzeniach mobilnych. Użytkownikowi został dostarczony działający
szkielet, do którego wystarczy że wgra &lt;a href=&quot;/2016/03/12/format-opisu-lekow-w-ddf.html&quot;&gt;zestaw interesujących do leków zgodny ze
wspieranym formatem&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;co-dalej-z-ddf%3F&quot;&gt;Co dalej z DDF?&lt;/h4&gt;

&lt;p&gt;Aplikacja będzie dalej rozwijana. W moim wolnym czasie
postaram się dodać kolejne funkcjonalności. Czekam także na opinie użytkowników
i pomysły na dalszy rozwój DDF!&lt;/p&gt;
</content:encoded>
            <pubDate>2016-05-30T21:30:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/05/30/raport-3-z-prac-nad-ddf.html</link>
            <atom:link href="http://lion.net.pl/2016/05/30/raport-3-z-prac-nad-ddf.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/05/30/raport-3-z-prac-nad-ddf.html</guid>
        </item>
                <item>
            <title>Szewc ze starym smartfonem chodzi</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                                    <content:encoded>&lt;p&gt;Zawsze uważałem, że telefon powinien służyć do tego do czego został stworzony, 
czyli do dzwonienia, a przynajmniej odbierania połączeń. No może jeszcze do 
wysyłania SMS... Chociaż przeglądanie e-maila też się przydaje... No i może 
jeszcze budzik... I rozbudowana lista kontaktów... I apka do sprawdzania 
autobusów... No dobra wystarczy! W każdym razie, po wejściu na rynek smartfonów
długo się im opierałem, w końcu kupiłem sobie jeden z podanych wyżej powodów.&lt;/p&gt;

&lt;p&gt;Czas mijał, większość ludzi, zwłaszcza tych na abonamencie, rzuciła się w wir 
corocznego zmieniania modeli swoich telefonów (w liczbie mnogiej bo czasami 
jeden to za mało...). Mnie to nie ruszało, zgodnie z zasadą &lt;em&gt;&quot;działa - nie 
ruszaj!&quot;&lt;/em&gt;. Nadszedł jednak taki czas że ten brak pogoni za postępem odbił się 
na moich planach...&lt;/p&gt;

&lt;h3 id=&quot;programowanie-na-urz%C4%85dzenia-mobilne&quot;&gt;Programowanie na urządzenia mobilne&lt;/h3&gt;

&lt;p&gt;Programowanie na urządzenia mobilne jest stosunkowo młodą gałęzią całego biznesu
kręcącego się wokół dostarczania ludzkości nowych rozwiązań informatycznych.
Cały czas się to rozwija - &lt;strong&gt;nowy sprzęt, nowe technologie, nowe frameworki&lt;/strong&gt; - 
trudno za tym wszystkim nadążyć.&lt;/p&gt;

&lt;h4 id=&quot;programowanie-hybrydowe&quot;&gt;Programowanie hybrydowe&lt;/h4&gt;

&lt;p&gt;Na szczęście, &lt;strong&gt;ze zmianami w sprzęcie i jego różnorodnością
można sobie już dziś poradzić przy pomocy frameworków do tworzenia aplikacji 
hybrydowych&lt;/strong&gt;, np. Ionic Framework. Pisanie kodu który działa podobnie, a w każdym 
razie w miarę przewidywalnie, na dużej gamie sprzętu powoduje że takie rozwiązanie
jak Ionic zyskuje ostatnio na popularności. Nie potrzebujemy już znać kilku języków 
programowania, instalować kilku emulatorów lub kupować kilku urządzeń różnych
producentów, by zbudować aplikację z powodzeniem uruchamianą przez szerokie
spektrum użytkowników. Możliwe jest nawet uruchomienie takich aplikacji na 
urządzeniach już dawno zapomnianych nawet przez ich producentów, którzy przestali
im już dostarczać aktualizacje OS. Na przykład &lt;a href=&quot;/2016/04/16/apache-cordova-ionic-framework-i-starsze-wersje-androida.html&quot;&gt;Apache Cordova udało mi się
zmusić do współpracy z archaicznym dziś Androidem 2.3&lt;/a&gt;, choć dokumentacja mówi 
że do działania potrzebna jest dużo nowsza wersja Androida!&lt;/p&gt;

&lt;h5 id=&quot;programowanie-hybrydowe-bez-sprz%C4%99tu&quot;&gt;Programowanie hybrydowe bez sprzętu&lt;/h5&gt;

&lt;p&gt;Podczas programowania aplikacji we frameworku takim jak Ionic wcale nie potrzebujemy
instalować emulatora ani posiadać smartfona. Podstawową funkcjonalność można
bardzo łatwo przetestować w przeglądarce. Oczywiście Ionic wspiera uruchamianie
aplikacji na emulatorze a także wysyłanie jej do podłączonego urządzenia. 
Jednak testowanie w przeglądarce to najszybsze i najwygodniejsze rozwiązanie.
We wbudowanej w przeglądarce konsoli można szybko debugować podstawowe problemy.&lt;/p&gt;

&lt;h5 id=&quot;przegl%C4%85darka-to-nie-wszystko&quot;&gt;Przeglądarka to nie wszystko&lt;/h5&gt;

&lt;p&gt;Niektóre funkcjonalności nie zadziałają nam w przeglądarce. Trudno na przykład
skorzystać z systemu plików, wibracji, powiadomień, listy kontaktów itp. To jednak
trzeba przetestować na emulatorze lub na urządzeniu. I tu zaczynają się schody.&lt;/p&gt;

&lt;h4 id=&quot;problemy-z-debugowaniem-na-starym-sprz%C4%99cie&quot;&gt;Problemy z debugowaniem na starym sprzęcie&lt;/h4&gt;

&lt;p&gt;Nie wszystko wszystko wygląda tak kolorowo z testowaniem na starych Androidach, 
zwłaszcza jeśli nie działa i nie wiesz dlaczego, a logów nie ma... Nawet &lt;a href=&quot;/2016/05/18/code-coverage-w-karma.html&quot;&gt;dobre
pokrycie kodu testami jednostkowymi&lt;/a&gt; nie zawsze wszystko wyłapie, zwłaszcza 
gdy dopiero uczysz się danej biblioteki. Plugin dedykowany do współpracy z 
&lt;em&gt;console.log&lt;/em&gt; nie działa. Chrome Remote Debugging działa od Androida
4.4... Generalnie, nawet jeśli to co chcesz zrobić powinno działać, a problemem 
jest Twój błąd w kodzie to nie dowiesz się o tym bo logów ni ma...&lt;/p&gt;

&lt;h3 id=&quot;no-i-co-dalej%3F&quot;&gt;No i co dalej?&lt;/h3&gt;

&lt;p&gt;W &lt;a href=&quot;/2016/05/04/moscow-dla-drug-dose-framework.html&quot;&gt;planach rozwoju mojej aplikacji do obliczania dawek leków&lt;/a&gt; miałem dodanie 
pobierania danych z systemu plików urządzenia na którym aplikacja jest uruchamiana. 
Użytkownik miał mieć możliwość definiowania swoich własnych zestawów leków i dawek.
To niestety na razie nie będzie działało. Zestawy te muszą zostać zdefiniowane
przed zbudowaniem paczki i wraz z nią wgrane na urządzenie. Może to i lepiej,
zapobiegnie to różnym niebezpieczeństwom jakie musiałyby być brane pod uwagę gdyby
w ustawienia dawkowania mógł ingerować każdy kto ma dostęp do urządzenia. Do 
tego problemu wrócę gdy sam siebie przekonam do zmiany telefonu i będę miał
na czym testować.&lt;/p&gt;

&lt;p&gt;Podsumowując, &lt;strong&gt;nie potrzebujesz mieć wypasionego smartfona&lt;/strong&gt; by móc zacząć pisać
aplikacje na urządzenia mobilne. Mimo wszystko, &lt;strong&gt;warto jednak mieć w miarę aktualny
OS&lt;/strong&gt;, aby móc w pełni wykorzystać możliwości jakie dają nam biblioteki i narzędzia
przygotowane do debugowania aplikacji.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-05-28T19:30:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/05/28/szewc-ze-starym-smartfonem-chodzi.html</link>
            <atom:link href="http://lion.net.pl/2016/05/28/szewc-ze-starym-smartfonem-chodzi.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/05/28/szewc-ze-starym-smartfonem-chodzi.html</guid>
        </item>
                <item>
            <title>Tłumaczenie atrybutów w angular-gettext</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                                    <content:encoded>&lt;p&gt;W &lt;a href=&quot;/2016/03/01/dam-sie-poznac.html&quot;&gt;mojej aplikacji&lt;/a&gt; wykorzystuję &lt;a href=&quot;/2016/04/26/i18n-z-angularjs-gettext.html&quot;&gt;bibliotekę angular-gettext&lt;/a&gt; w celu zapewnienia 
jej wsparcia dla I18N. Dzięki niej przygotowanie wielojęzykowej aplikacji w 
AngularJS jest w miarę proste. Biblioteka ta oferuje wiele możliwości oznaczania
tekstu jako &lt;em&gt;&quot;do przetłumaczenia&quot;&lt;/em&gt;. Istnieją jednak pewne pułapki o których więcej
informacji znajdziesz właśnie w tym wpisie.&lt;/p&gt;

&lt;h3 id=&quot;custom-annotations-w-angular-gettext&quot;&gt;Custom annotations w angular-gettext&lt;/h3&gt;

&lt;p&gt;Mechanizm &lt;a href=&quot;https://angular-gettext.rocketeer.be/dev-guide/custom-annotations/&quot;&gt;&lt;em&gt;custom annotations&lt;/em&gt;&lt;/a&gt; pozwala nam na zdefiniowanie własnych lub
wbudowanych atrybutów HTML które zostaną rozpoznane jako &quot;do przetłumaczenia&quot;
przez narzędzie &lt;em&gt;nggettext-extract&lt;/em&gt;. &lt;a href=&quot;/2016/04/26/i18n-z-angularjs-gettext.html&quot;&gt;Jak używać mechanizmu &lt;em&gt;custom annotations&lt;/em&gt; 
pisałem w poście opisującym angular-gettext&lt;/a&gt;. Jest to metoda określana jako 
optymalna dla tłumaczenia tekstów zawartych w atrybutach. Ma jednak swoje 
ograniczenia. Załóżmy że mamy taki kod:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;foo bar=&quot;abc&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w wyniku &lt;em&gt;nggettext_extract&lt;/em&gt; otrzymamy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msgid &quot;abc&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tak samo dla:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;foo bar=&quot;abc&quot;&amp;gt;&amp;lt;/foo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ale dla:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;foo bar=&quot;abc&quot;&amp;gt;xyz&amp;lt;/foo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;otrzymamy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msgid &quot;xyz&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jak widać &lt;strong&gt;mechanizm ten nie radzi sobie w niepustymi elementami HTML&lt;/strong&gt;. W 
przypadku gdy musimy przetłumaczyć atrybut takiego elementu &lt;strong&gt;należy skorzystać z 
filtra &lt;em&gt;translate&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;foo bar=&quot;{{ &quot;{{&#039;abc&#039;|translate &quot; }}}}&quot;&amp;gt;xyz&amp;lt;/foo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Problem ten był już &lt;a href=&quot;https://github.com/rubenv/angular-gettext/issues/226&quot;&gt;zgłaszany&lt;/a&gt; opiekunom biblioteki angular-gettext i czeka 
na rozwiązanie.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-05-27T17:00:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/05/27/tlumaczenie-atrybutow-html-w-angular-gettext.html</link>
            <atom:link href="http://lion.net.pl/2016/05/27/tlumaczenie-atrybutow-html-w-angular-gettext.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/05/27/tlumaczenie-atrybutow-html-w-angular-gettext.html</guid>
        </item>
                <item>
            <title>Ikony i splash screen aplikacji w Ionic Framework</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>JS</category>
                        <category>DDF</category>
                        <category>DSP2016</category>
                                    <content:encoded>&lt;p&gt;Przygotowanie ikony aplikacji i jej &quot;splash screena&quot; w Ionic Framework jest bardzo 
proste. W tym wpisie dowiesz się jak zrobić to w mgnieniu oka i to na wszystkie
najbardziej popularne urządzenia za jednym zamachem!&lt;/p&gt;

&lt;h3 id=&quot;tworzenie-ikony&quot;&gt;Tworzenie ikony&lt;/h3&gt;

&lt;p&gt;Utworzenie ikony dla aplikacji rozwijanej w Ionic polega na dwóch prostych krokach.
Po pierwsze należy przygotować wyjściowy obrazek. Powinien on mieć rozmiary 512x512
pikseli. Należy go umieścić w katalogu projektu w podkatalogu &lt;em&gt;resources&lt;/em&gt;. Nazwą
obrazka ikony powinno być &lt;em&gt;icon&lt;/em&gt;, obsługiwane rozszerzenia to &lt;em&gt;.psd&lt;/em&gt;, &lt;em&gt;.png&lt;/em&gt; i 
&lt;em&gt;.ai&lt;/em&gt;. Kolejnym krokiem jest wydanie polecenia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic resources --icon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ionic Framework wygeneruje w tym momencie zestaw ikon dla wszystkich skonfigurowanych
środowisk uruchomieniowych (android, ios, itd.) i dla wszystkich najpopularniejszych
rozmiarów urządzeń.&lt;/p&gt;

&lt;h3 id=&quot;tworzenie-splash-screen&quot;&gt;Tworzenie splash screen&lt;/h3&gt;

&lt;p&gt;Tworzenie obrazu powitalnego aplikacji nie odbiega bardzo od tworzenia ikony.
Należy jednak dobrze przygotować wyjściowy obrazek. Powinien on mieć 2208x2208
pikseli, z czego najważniejsze jego elementy powinny się zmieścić w kwadracie
o rozmiarze 1200x1200 pikseli. Pozostałe części obrazka mogą zostać przycięte 
podczas generowania splash screena na poszczególne rozdzielczości urządzeń.
Niestety jest to dość nieprzewidywalne i jedynym wyjściem jest próbowanie do skutku
aż uzyskamy zadowalający rezultat dla większości rozdzielczości. Poleceniem
które uruchamia generowanie splash screenów jest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic resources --splash
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;optymalizacja&quot;&gt;Optymalizacja&lt;/h3&gt;

&lt;p&gt;Zarówno wynikowe ikony jak i obrazy powitalne aplikacji nie są zoptymalizowane.
Przepuszczając je przez narzędzie optipng można zyskać kilkanaście procent na wadze
obrazków, co może się przełożyć nawet na kilkadziesiąt kilobajtów mniej w 
rozmiarze całej aplikacji.&lt;/p&gt;

&lt;h3 id=&quot;testowanie-ikony-i-splash-screena&quot;&gt;Testowanie ikony i splash screena&lt;/h3&gt;

&lt;p&gt;Aby przetestować działanie ikon i splash screena należy wgrać aplikację na urządzenie
poleceniem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jeśli aplikacja była już wcześniej testowana na urządzeniu pomocne może okazać
się wyczyszczenie cache aplikacji na urządzeniu.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-05-26T19:40:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/05/26/ikony-i-splash-screen-aplikacji-w-ionic-framework.html</link>
            <atom:link href="http://lion.net.pl/2016/05/26/ikony-i-splash-screen-aplikacji-w-ionic-framework.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/05/26/ikony-i-splash-screen-aplikacji-w-ionic-framework.html</guid>
        </item>
                <item>
            <title>Nie używaj String|Numer|Boolean jako konstruktorów w JavaScript!</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>QA</category>
                        <category>JS</category>
                        <category>DDF</category>
                        <category>DSP2016</category>
                        <category>OOP</category>
                                    <content:encoded>&lt;p&gt;Śmieszne może się wydawać to że w języku obiektowym (czy też prototypowanym) jest 
możliwość utworzenia prostych obiektów opakowujących wartości proste, a 
jednocześnie wszyscy odradzają korzystania z nich. W tym wpisie dowiesz się dlaczego
tak właśnie dzieje się w JavaScript.&lt;/p&gt;

&lt;h3 id=&quot;typy-proste-w-js&quot;&gt;Typy proste w JS&lt;/h3&gt;

&lt;p&gt;JS posiada kilka prymitywów, czyli typów reprezentujących najprostsze i najczęściej
wykorzystywane w aplikacjach byty. Są to &lt;em&gt;boolean, number, string, null, undefined&lt;/em&gt;.
Pierwsze trzy możemy utworzyć wykorzystując konstruktory obiektów o tej samej nazwie:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var b1 = true;
var b2 = new Boolean(true);
var n1 = 1;
var n2 = new Number(1);
var s1 = &#039;a&#039;;
var s2 = new String(&#039;a&#039;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wszystko fajnie, dopóki nie musimy gdzieś w kodzie sprawdzić typu zmiennej by np.
&lt;a href=&quot;/2016/04/05/typy-wyjatkow-w-javascript.html&quot;&gt;rzucić odpowiednim wyjątkiem&lt;/a&gt;. Jeśli w naszej domenie zmienna powinna być 
stringiem to musimy to zrobić np. tak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!(s instanceof String) || typeof s !== &#039;string&#039;) {
    throw new TypeError(&#039;Wrong type!&#039;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sprawdzenie samym &lt;em&gt;typeof&lt;/em&gt; nic nam niestety nie pomoże bo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typeof new String(&#039;a&#039;) === &#039;object&#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kolejne problemy pojawią się gdy będziemy chcieli porównać wartość zmiennej:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (s === &#039;a&#039;) {
    console.log(&#039;wartość s to a&#039;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;W przypadku gdy &lt;em&gt;s = s2&lt;/em&gt; powyższe sprawdzenie nam nie zadziała. W przypadku gdy 
&lt;em&gt;s = s1&lt;/em&gt;, zobaczymy w konsoli log. Możemy, co prawda, zrezygnować z operatora ===
i zastąpić go słabszym porównaniem ==, ale nie jest to zalecana praktyka która 
pociąga za sobą inne problemy.&lt;/p&gt;

&lt;p&gt;Przedstawione powyżej problemy są dwoma głównymi przyczynami dla których &lt;strong&gt;nie zaleca
się korzystać z wbudowanych w JS obiektów String, Number i Boolean&lt;/strong&gt;. &lt;a href=&quot;/2016/05/16/jshint-jakosc-kodu-js-pod-kontrola.html&quot;&gt;Narzędzie
do analizy statycznej kodu JSHint&lt;/a&gt; po natrafieniu na wykorzystanie w kodzie 
konstruktora &lt;em&gt;new&lt;/em&gt; powyższych typów zgłasza błąd, np: &lt;em&gt;&quot;Do not use Number as a 
constructor&quot;&lt;/em&gt;. Na szczęście wykrycie tego typu pułapek w kodzie i zastąpienie
ich typami prostymi jest bardzo łatwe, a może zaoszczędzić wielu nieporozumień
w przyszłości.&lt;/p&gt;

&lt;p&gt;Muszę się przyznać, że sam nadużywałem tworzenia obiektów Number i String. Robiłem 
to aby choć trochę zapanować nad tym co się dzieje ze zmiennymi w moim &lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework&quot;&gt;projekcie
DDF&lt;/a&gt; i zrobić sobie substytut silnego typowania. Taki podejście niestety wiąże 
się z dużą ilością nadmiarowego kodu sprawdzającego typy zmiennych i konwertującego
prymitywy do obiektów je opakowujących. To się po prostu nie opłaca. Po 
refraktoryzacji do typów prostych kod wygląda bardziej czytelnie, jest go także
dużo mniej. Ilość przypadków testowych dla testów jednostkowych także spada.
Łatwiej jest zadbać o dobre &lt;a href=&quot;/2016/05/18/code-coverage-w-karma.html&quot;&gt;pokrycie kodu testami&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-05-19T19:00:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/05/19/nie-uzywaj-string-number-boolean-jako-konstruktorow-w-javascript.html</link>
            <atom:link href="http://lion.net.pl/2016/05/19/nie-uzywaj-string-number-boolean-jako-konstruktorow-w-javascript.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/05/19/nie-uzywaj-string-number-boolean-jako-konstruktorow-w-javascript.html</guid>
        </item>
                <item>
            <title>Code Coverage w Karma</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>QA</category>
                        <category>JS</category>
                        <category>DDF</category>
                        <category>DSP2016</category>
                                    <content:encoded>&lt;p&gt;Raporty pokrycia kodu testami jednostkowymi pozwalają szybko i przyjemnie przeanalizować
stan projektu. Wskazują miejsca gdzie kod nie jest dostatecznie przetestowany.
W tym wpisie dowiesz się jak wygenerować i jak interpretować &lt;em&gt;code coverage&lt;/em&gt; w 
narzędziu Karma dla JS.&lt;/p&gt;

&lt;h3 id=&quot;konfiguracja-karma-dla-code-coverage&quot;&gt;Konfiguracja Karma dla code coverage&lt;/h3&gt;

&lt;p&gt;Aby skorzystać z raportów pokrycia kodu testami jednostkowymi musimy doinstalować
bibliotekę &lt;em&gt;karma-coverage&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install karma-coverage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Następnie w konfiguracji, w pliku karma.conf.js bądź Gruntfile.js, należy dodać
następujące wpisy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugins: [&#039;karma-coverage&#039;],
reporters: [&#039;coverage&#039;],
preprocessors: { &#039;*.js&#039;: [&#039;coverage&#039;] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Przykładowy wpis w Gruntfile.js, częściowo &lt;a href=&quot;/2016/03/03/yeoman-idziemy-na-front.html&quot;&gt;wygenerowany przez Yeoman&lt;/a&gt;, może 
wyglądać po wprowadzeniu powyższych zmian tak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;karma: {
  options: {
    basePath: &#039;&#039;,
    frameworks: [&#039;jasmine&#039;],
    files: [
      &#039;&amp;lt;%= yeoman.app %&amp;gt;/&amp;lt;%= yeoman.scripts %&amp;gt;/**/*.js&#039;,
      &#039;&amp;lt;%= yeoman.test %&amp;gt;/mock/**/*.js&#039;,
      &#039;&amp;lt;%= yeoman.test %&amp;gt;/spec/**/*.js&#039;
    ],
    autoWatch: true,
    plugins: [
        &#039;karma-jasmine&#039;,
        &#039;karma-coverage&#039;,
        &#039;karma-phantomjs-launcher&#039;
    ],
    reporters: [&#039;dots&#039;, &#039;coverage&#039;],
    port: 8080,
    singleRun: false,
    preprocessors: {
      &#039;&amp;lt;%= yeoman.app %&amp;gt;/&amp;lt;%= yeoman.scripts %&amp;gt;/**/*.js&#039;: [&#039;coverage&#039;]
    },
    coverageReporter: {
      reporters: [
        { type: &#039;html&#039;, dir: &#039;coverage/&#039; },
        { type: &#039;text-summary&#039; }
      ]
    }
  },
  unit: {
    browsers: [&#039;PhantomJS&#039;],
    background: false
  },
  continuous: {
    browsers: [&#039;PhantomJS&#039;],
    singleRun: true
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Od tej chwili po wykonaniu testów Karma w folderze coverage przygotuje raporty dla
każdej przeglądarki dla której testy zostały przeprowadzone. W katalogach tych 
znajdziemy pliki &lt;em&gt;index.php&lt;/em&gt;, które po uruchomieniu w przeglądarce przedstawią
nam raport. Poniżej kilka przykładowych zrzutów ekranu z raportem:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/DSP2016/karma-code-coverage-1.png&quot; alt=&quot;Karma code coverage report #1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/DSP2016/karma-code-coverage-2.png&quot; alt=&quot;Karma code coverage report #2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/DSP2016/karma-code-coverage-3.png&quot; alt=&quot;Karma code coverage report #3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na zrzutach widzimy, że raport HTML pozwala nam szybko przejrzeć strukturę projektu,
odnaleźć pliki dla których brakuje bądź jest za mało testów. &lt;strong&gt;Mamy wyszczególnione
pokrycie testami linii, funkcji oraz gałęzi&lt;/strong&gt;, czyli ścieżek którymi może nasz kod 
przejść od startu do końca podczas jego wykonywania.&lt;/p&gt;

&lt;p&gt;Dodatkowo, po przejściu do konkretnego pliku, Karma a właściwie wykorzystywane 
przez nią w tle narzędzie o nazwie Istanbul, wskaże nam podejrzane rozgałęzienia 
kodu, oznaczając je symbolami &lt;em&gt;I (if path not taken)&lt;/em&gt; lub &lt;em&gt;E (else path not taken)&lt;/em&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-05-18T15:30:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/05/18/code-coverage-w-karma.html</link>
            <atom:link href="http://lion.net.pl/2016/05/18/code-coverage-w-karma.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/05/18/code-coverage-w-karma.html</guid>
        </item>
            </channel>
</rss>