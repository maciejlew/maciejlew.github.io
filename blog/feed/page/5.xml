<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LionNet</title>
        <description>Programowanie, sieci komputerowe, informatyka.</description>      
        <link>http://lion.net.pl</link>
        <language>pl</language>
        <generator>Sculpin</generator>
        <category>IT</category>
        <atom:link href="http://lion.net.pl/blog/feed.xml" rel="self" type="application/rss+xml" />
                <item>
            <title>Apache Cordova, Ionic Framework i starsze wersje Androida</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                                    <content:encoded>&lt;p&gt;Stanąłem dziś przed problemem wgrania mojej aplikacji stworzonej w Ionic Framework
na kilkuletni już telefon z trochę starszą wersją Androida, a co za tym idzie także
wymaganą wersją SDK na którym budowano aplikację. Opiszę co udało mi się po kilku 
godzinach walki zrobić aby to zadziałało.&lt;/p&gt;

&lt;h3 id=&quot;uruchamianie-aplikacji-na-telefonie&quot;&gt;Uruchamianie aplikacji na telefonie&lt;/h3&gt;

&lt;p&gt;Uruchomić aplikację zbudowaną w Ionic Framework możemy na kilka sposobów. Do tej
listy dołączyła się opcja przegotowana przez &lt;a href=&quot;/2016/03/03/yeoman-idziemy-na-front.html&quot;&gt;szablon Yeoman&lt;/a&gt;. 
Lista ta, posortowana od najbardziej opakowujących poleceń do najbardziej 
&quot;niskopoziomowych&quot;, wygląda tak:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grunt run&lt;/li&gt;
&lt;li&gt;ionic run&lt;/li&gt;
&lt;li&gt;cordova run&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;grunt-run&quot;&gt;grunt run&lt;/h4&gt;

&lt;p&gt;To polecenie opakowuje polecenie ionic run. Polecenie czyści śmieci powstałe
przy poprzednich wywołaniach zadań takich jak run, build czy serve, po czym buduje paczkę.
Po jej zbudowaniu i wgraniu jej na telefon dodatkowo obserwuje projekt i w razie 
zmian powtarza automatycznie ten proces.&lt;/p&gt;

&lt;h4 id=&quot;ionic-run&quot;&gt;ionic run&lt;/h4&gt;

&lt;p&gt;To polecenie tworzy paczkę i wgrywa ją na telefon. W tle wykonywane jest cordova run.&lt;/p&gt;

&lt;h4 id=&quot;cordova-run&quot;&gt;cordova run&lt;/h4&gt;

&lt;p&gt;To polecenie wykonuje całe budowanie paczki APK. Na podstawie manifestu jest w 
stanie określić jakiego ma użyć SDK.&lt;/p&gt;

&lt;h4 id=&quot;gradle&quot;&gt;gradle&lt;/h4&gt;

&lt;p&gt;Uruchomienie powyższych poleceń powoduje uruchomienie narzędzia Gradle (choć można je 
zmienić na Ant), zbudowanie paczki .apk i wgranie na podłączony do komputera 
telefon.&lt;/p&gt;

&lt;h3 id=&quot;opcja-minsdkversion&quot;&gt;Opcja minSdkVersion&lt;/h3&gt;

&lt;p&gt;Aby uruchomić aplikacje na starszym Androidzie musimy dowiedzieć się jakiemu
numerowi SDK odpowiada wersja Androida. Powiedzmy że mamy Androida 2.3.6, a 
odpowiadająca mu wersja SDK to 9. Apache Cordova domyślnie obsługuje minimalnie
wersję 14. A więc mamy problem. Jeśli korzystamy z Gradle możemy przekazać opcję
ustawiającą minimalna wersję SDK (z Ant nie działa).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic run -- --minSdkVersion=9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Możemy także, aby nie musieć ciągle podawać tego parametru, umieścić to w &lt;strong&gt;pliku
&lt;em&gt;config.xml&lt;/em&gt; naszej aplikacji. Należy dodać taką sekcję:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;platform name=&quot;android&quot;&amp;gt;
    &amp;lt;preference name=&quot;android-minSdkVersion&quot; value=&quot;9&quot; /&amp;gt;
    &amp;lt;preference name=&quot;android-targetSdkVersion&quot; value=&quot;9&quot; /&amp;gt;
&amp;lt;/platform&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spowoduje to że w pliku manifestu będziemy już mieli zapisane jakiej chcemy używać
wersji, ale nadal nie da się wgrać aplikacji na telefon z powodu:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What went wrong:
  Execution failed for task &#039;:processDebugManifest&#039;.
  Manifest merger failed : uses-sdk:minSdkVersion 9 cannot be smaller than version 
  14 declared in library [android:CordovaLib:unspecified:debug]
  Suggestion: use tools:overrideLibrary=&quot;org.apache.cordova&quot; to force usage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wygląda na to że wystarczy dodać w config.xml taki wpis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;preference name=&quot;tools-overrideLibrary&quot; value=&quot;org.apache.cordova&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lub taki:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;preference name=&quot;tools:overrideLibrary&quot; value=&quot;org.apache.cordova&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Niestety to nie zadziała (a w każdym razie długo debugowałem czemu nie zadziała 
i wygląda na to że nie zadziała i już).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jedynym wyjściem jest oszukanie Cordovy w taki sposób że wyedytujemy jej plik
manifestu i zmniejszymy wartość minSdkVersion. Plik ten znajduje się w katalogu
&lt;em&gt;platforms/android/CordovaLib/AndroidManifest.xml&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Po takim zabiegu zobaczymy w końcu &lt;strong&gt;BUILD SUCCESSFUL&lt;/strong&gt; i &lt;strong&gt;LAUNCH SUCCESS&lt;/strong&gt; co 
oznacza, że możemy się już bawić naszą aplikacją na starszym telefonie.&lt;/p&gt;

&lt;p&gt;Przykładowy plik &lt;em&gt;config.xml&lt;/em&gt; można znaleźć w &lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework&quot;&gt;repozytorium DDF&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-04-16T23:30:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/04/16/apache-cordova-ionic-framework-i-starsze-wersje-androida.html</link>
            <atom:link href="http://lion.net.pl/2016/04/16/apache-cordova-ionic-framework-i-starsze-wersje-androida.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/04/16/apache-cordova-ionic-framework-i-starsze-wersje-androida.html</guid>
        </item>
                <item>
            <title>Raport #2 z prac nad DDF</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                        <category>OOP</category>
                        <category>QA</category>
                                    <content:encoded>&lt;p&gt;Konkurs DSP2016 jest już na półmetku. Czas po raz kolejny pochwalić się postępami
w pracy nad DDF.&lt;/p&gt;

&lt;p&gt;Prace dotarły do takiego etapu że uznałem za stosowne wydanie na świat wersji 0.1
mojej aplikacji &amp;lt;&lt;brawa&gt;&gt;.&lt;/p&gt;

&lt;h2 id=&quot;model&quot;&gt;Model&lt;/h2&gt;

&lt;p&gt;Model aplikacji rozrósł się do 10 klas. Spróbowałem w JS zaimplementować takie
znane wzorce jak fabryka i strategia - myślę że się to udało. Na chwilę obecną 
wydaje mi się że prace nad modelem zostały ukończone.&lt;/p&gt;

&lt;p&gt;Rozbudowałem diagram UML o nowe klasy oraz zaznaczyłem interakcję  między nimi:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;{{site.url}}/assets/img/ddf002.png&quot;&gt;Diagram klas w projekcie DDF&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;kontroler&quot;&gt;Kontroler&lt;/h2&gt;

&lt;p&gt;Dostosowałem kontrolery do nowego modelu. W miejscach w których dane ładowane 
były bezpośrednio z plików JSON zastosowałem ich parsowanie przy pomocy fabryk
i strategii. Podłączyłem także model obliczający dawki. Dodałem prostą obsługę 
błędów.&lt;/p&gt;

&lt;h2 id=&quot;widok&quot;&gt;Widok&lt;/h2&gt;

&lt;p&gt;Zmieniłem widok formularza obliczania dawki. W tej chwili wyniki i ewentualne
błędy prezentowane są w postaci wyskakujących alertów. Mam zamiar to zmienić 
na komponent modal, dostępny w Ionic, w najbliższej przyszłości.&lt;/p&gt;

&lt;h2 id=&quot;testy&quot;&gt;Testy&lt;/h2&gt;

&lt;p&gt;Udało mi się utrzymać wysoki poziom pokrycia kodu testami jednostkowymi. A nawet
go zwiększyć. Pokrycie kodu to niemal 95% &amp;lt;&lt;oklaski rozległy się nawet z 
najdalszej części sali&gt;&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Statements : 94.71% ( 322/340 )&lt;/li&gt;
&lt;li&gt;Branches : 85.82% ( 115/134 )&lt;/li&gt;
&lt;li&gt;Functions: 92.59% ( 75/81 )&lt;/li&gt;
&lt;li&gt;Lines: 94.71% ( 322/340 )&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;plany&quot;&gt;Plany&lt;/h2&gt;

&lt;p&gt;W ciągu kilku następnych tygodni mam zamian ogarnąć wgrywanie aplikacji na 
urządzenia mobilne, zmienić trochę wygląd - zwłaszcza wyniki obliczeń, dodać 
interfejs pozwalający na wybór zestawu leków, popracować nad komunikacją apki z
systemem plików na telefonie.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-04-14T22:50:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/04/14/raport-2-z-prac-nad-ddf.html</link>
            <atom:link href="http://lion.net.pl/2016/04/14/raport-2-z-prac-nad-ddf.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/04/14/raport-2-z-prac-nad-ddf.html</guid>
        </item>
                <item>
            <title>PHPers Silesia #8 - relacja</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>PHP</category>
                        <category>OOP</category>
                                    <content:encoded>&lt;p&gt;W dniu 06.05.2016, czyli kilka dni temu, odbyło się ósme spotkanie programistów
PHP na Śląsku. Czas na moją krótką relację z tego wydarzenia.&lt;/p&gt;

&lt;p&gt;Na spotkaniu mieliśmy okazję wysłuchać trzech prezentacji na tematy mniej lub 
bardziej bezpośrednio związane z PHP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wprowadzenie do kolejek wiadomości na przykładzie RabbitMQ&lt;/li&gt;
&lt;li&gt;SPL!!!11oneone&lt;/li&gt;
&lt;li&gt;CQRS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wprowadzenie-do-kolejek-wiadomo%C5%9Bci-na-przyk%C5%82adzie-rabbitmq&quot;&gt;Wprowadzenie do kolejek wiadomości na przykładzie RabbitMQ&lt;/h3&gt;

&lt;p&gt;Podczas tej prezentacji Sebastian Kremiec zrobił nam wprowadzenie do idei systemów
kolejek wiadomości. Dowiedzieliśmy się jakie wiadomości mogą być buforowane w 
kolejkach i do czego to się może przydać. Przedstawione zostało także jedno z 
wiodących narzędzi w tej dziedzinie, czyli RabbitMQ. Sebastian przedstawił podstawowe
konfiguracje w systemach MQ, mogliśmy zobaczyć proste przykłady w PHP i JS.&lt;/p&gt;

&lt;p&gt;Tak się akurat składa że ten temat jest teraz na topie. Tych, którzy chcieli by się
nim zainteresować, a nie byli na spotkaniu lub chcą poszerzyć zdobytą tam wiedzę,
odsyłam do na prawdę dobrego wprowadzenia jakie ukazało się w numerze 02/2016 
magazynu Programista:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://szukaj.programistamag.pl/uuid/ce15f4f242250c82e4eb2eb14d935c7fe95d338a&quot;&gt;RabbitMQ – otwarty system pośredniczący w wymianie wiadomości w środowisku rozproszonym&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;spl%21%21%2111oneone&quot;&gt;SPL!!!11oneone&lt;/h3&gt;

&lt;p&gt;Wystąpienie Mateusza Juścińskiego miało na celu przypomnienie tym którzy zapomnieli
lub nigdy nie mieli przyjemności poznać czym jest SPL i co dzięki niej możemy
poprawić w pracy z kodem napisanym w PHP. Nie było to kompletne omówienie 
biblioteki, ale za to Mateusz wskazał nam te jej elementy które są ciekawe lub
wyjątkowo przydatne. A więc było o zaletach jakie przynosi w sobie autolaoding
dostępny właśnie w SPL, o rozbudowanym systemie iteratorów i wyjątków. Przedstawione
zostały także korzyści płynące z wykorzystania bardziej złożonych od tablic typów
opisujących kolekcje, czyli stert, stosów i kolejek, które także znajdziemy w SPL.
Dowiedzieliśmy się także co prelegent myśli o osobach nie znających/korzystających
z SPL ;). Była to moim zdaniem najciekawsza i najlepiej przeprowadzona prezentacja 
podczas tego spotkania.&lt;/p&gt;

&lt;h3 id=&quot;cqrs&quot;&gt;CQRS&lt;/h3&gt;

&lt;p&gt;Ostatnia prezentacja została wybrana przez publiczność. Większość z nas chciała
posłuchać o CQRS, czyli podejściu do projektowania architektury programu mówiącym
o tym że warto wydzielić model odpowiadający za zapis stanu aplikacji oraz modelu 
ten stan odczytujący. Piotr Pasich zrobił wprowadzenie do tego nośnego ostatnio
tematu. Omówione zostały zalety takiego podejścia. Koncepcja ta także została
rozwinięta przez Piotra o pomysł na rozdzielenie warstwy przechowującej dane
(bazy danych) również na dwa lub więcej bytów, przystosowanych do zapisu bądź 
odczytu danych przez model w stylu CQRS.&lt;/p&gt;

&lt;p&gt;Ciekawy artykuł na ten temat także jest do poczytania w magazynie Programista 02/2016:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://szukaj.programistamag.pl/uuid/2a3d3d8bc606f0ae4cc4f9314c2d74ce1fa6ce62&quot;&gt;CQRS pragmatycznie&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;podsumowanie&quot;&gt;Podsumowanie&lt;/h3&gt;

&lt;p&gt;Całe spotkanie oceniam za udane. Na afterparty również była okazja pogadać na 
tematy związane z programowaniem, nie tylko w PHP. Warto raz na kilka miesięcy
poświęcić jeden wieczór by móc spojrzeć na to co się robi z trochę innego punktu 
widzenia, poszerzyć wiedzę i kontakty. Do zobaczenia na kolejnym PHPers Silesia,
mam nadzieję że już wkrótce.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-04-12T23:25:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/04/12/phpers-silesia-8-relacja.html</link>
            <atom:link href="http://lion.net.pl/2016/04/12/phpers-silesia-8-relacja.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/04/12/phpers-silesia-8-relacja.html</guid>
        </item>
                <item>
            <title>Debugowanie testów. Jasmine i Karma</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>DDF</category>
                        <category>JS</category>
                        <category>QA</category>
                                    <content:encoded>&lt;p&gt;W tym wpisie przedstawię jak uruchomić przy pomocy środowiska Karma testy napisane
w frameworku Jasmine z opcją debugowania w przeglądarce.&lt;/p&gt;

&lt;p&gt;Jeśli śledzisz od dłuższego czasu rozwój DDF to zauważyłeś pewnie że sporo czasu
i miejsca na tym blogu poświęcam testom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;{{site.url}}/2016/03/07/zapach-jasminu.html&quot;&gt;Zapach Jaśminu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;{{site.url}}/2016/03/15/testowanie-wyjatkow-w-jasmine.html&quot;&gt;Testowanie wyjątków w Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dziś, z powodu pewnego głupiutkiego błędu 
zmuszony byłem dowiedzieć się w jaki sposób uruchomić test w środowisku przeglądarki
by móc przy pomocy FireBuga i wbudowanego w niego debuggera prześledzić co się 
dzieje w kodzie. Możesz powiedzieć że przecież jest funkcja &lt;em&gt;dump()&lt;/em&gt; dzięki której
można w kodzie Jasmine wyrzucić sobie na ekran zawartość zmienne. Niestety, to nie
zadziała gdy test wpadnie w nieskończoną pętlę, a tak właśnie działo się w moim 
przypadku.&lt;/p&gt;

&lt;p&gt;Okazało się że rozwiązanie jest proste, trzeba tylko dobrze poszukać. Wykorzystałem
do tego &lt;a href=&quot;http://www.itsmycodeblog.com/debugging-phantomjs-tests-in-a-browser/&quot;&gt;wpis na blogu &quot;It&#039;s my code blog&quot;&lt;/a&gt;.
Zawarte tam wskazówki dostosowałem do sekcji opisującej zadanie odpalające Karma
w moim pliku Gruntfile.js. Co należało zrobić?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;doinstalować przy pomocy NPM i dodać informację o pluginach w sekcji options:&lt;/p&gt;

&lt;p&gt;plugins: [
    &#039;karma-jasmine&#039;,
    &#039;karma-coverage&#039;,
    &#039;karma-phantomjs-launcher&#039;
],&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;zmienić wartość autoWatch z false na true w sekcji options&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;zmienić wartość singleRun z true na false w sekcji options&lt;/li&gt;
&lt;li&gt;zmienić wartość background z true na false w sekcji unit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Od tego momentu wywołanie polecenia &lt;em&gt;grunt karma&lt;/em&gt; powoduje wykonanie wszystkich 
testów ale po wszystkim nie kończy działania środowiska testowego Karma. Dzięki 
temu można w przeglądarce pod adresem &lt;em&gt;http://localhost:8080/debug.html&lt;/em&gt; zobaczyć
przy pomocy FireBuga co się dzieje w kodzie. Ponowne wykonanie testów polega na
odświeżeniu strony w przeglądarce. Dzięki temu kod testów można zatrzymać na
ustawionych w FireBugu punktach wstrzymania i podejrzeć co też kryje się w zmiennych.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-04-07T22:35:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/04/07/debugowanie-testow-jasmine-i-karma.html</link>
            <atom:link href="http://lion.net.pl/2016/04/07/debugowanie-testow-jasmine-i-karma.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/04/07/debugowanie-testow-jasmine-i-karma.html</guid>
        </item>
                <item>
            <title>Typy wyjątków w JavaScript</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>OOP</category>
                                    <content:encoded>&lt;p&gt;W tym wpisie znajdziesz informacje wbudowanych w JS typach wyjątków. Przedstawię 
także moje spostrzeżenia kiedy i jakich wyjątków używać.&lt;/p&gt;

&lt;h2 id=&quot;rzucanie-wyj%C4%85tkami&quot;&gt;Rzucanie wyjątkami&lt;/h2&gt;

&lt;p&gt;Nikt nie lubi gdy go aplikacja znienacka atakuje błędem. Jeszcze gorzej jest gdy
z opisu błędu nic nie wynika. Czujemy się wtedy niepewnie. Być może jest to pierwsze
nasze spotkanie z apką a tu od razu taka niespodzianka. Przeklinamy wtedy wszytko
i wszystkich - aplikację za to że jest taka do niczego, programistów za to że w 
ogóle zaczęli zajmować się w życiu programowaniem (no chyba że to nasza aplikacja 
i na dodatek jesteśmy pewni że to my to napisaliśmy ;)). Jedynym co w takiej chwili
mogłoby nas troszeczkę uspokoić to jasny i jednoznaczny komunikat błędu. Niestety
nie zawsze tak jest.&lt;/p&gt;

&lt;p&gt;W moich aplikacjach staram się implementować jak najbardziej intuicyjną obsługę
błędów i wyjątków - czyli stanu aplikacji który jest nietypowy i nie powinien się
zdarzyć. W obecnych czasach aplikacje to już nie proste, monolityczne twory. 
Coraz częściej zdarza się że aplikacje mają budowę modułową, a moduły mogą zostać
ponownie wykorzystane w innych miejscach. Z tego powodu kontekst w jakim sytuacja 
staje się wyjątkowa zawęża się. Dobrym zwyczajem staje się jak największe 
ograniczenie odpowiedzialności modułu/klasy - tylko do intuicyjnie im przypisywanych 
zachowań. Z tego powodu coś co w ogólnym kontekście jest sytuacją jasną i obsługiwaną
przez program w kontekście modułu/klasy jest sytuacją wyjątkową. W takim przypadku
rzucany z moduły wyjątek jest obsługiwany przez wyższe warstwy aplikacji.&lt;/p&gt;

&lt;h2 id=&quot;typy-wyj%C4%85tk%C3%B3w&quot;&gt;Typy wyjątków&lt;/h2&gt;

&lt;p&gt;W chwili obecnej JS udostępnia 7 typów błędów. Są to Error i dziedziczące po nim
EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError. Z tymi 
błędami możemy się spotkać podczas wykonywania skryptu, nie muszą być one przez 
nas specjalnie implementowane aby je zobaczyć. Poza wymienionymi typami możemy 
także przygotować swój własny obiekt który rzucimy w niestandardowej sytuacji 
poleceniem throw.&lt;/p&gt;

&lt;p&gt;Wszystkie standardowe obiekty błędów w JS tworzy się w analogiczny sposób:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;throw new Error(message);
throw new EvalError(message);
throw new RangeError(message);
throw new ReferenceError(message);
throw new SyntaxError(message);
throw new TypeError(message);
throw new URIError(message);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;error&quot;&gt;Error&lt;/h3&gt;

&lt;p&gt;Jest to podstawowy typ błędu, najczęściej wykorzystywany w znanych mi aplikacjach
(ale to raczej z braku wiedzy o innych bardziej opisowych typach).
Poza samą treścią nie niesie on z sobą żadnej informacji. We własnych programach
wykorzystuję go gdy nic innego nie pasuje do kontekstu danej sytuacji wyjątkowej.&lt;/p&gt;

&lt;h3 id=&quot;evalerror&quot;&gt;EvalError&lt;/h3&gt;

&lt;p&gt;Ten błąd mógł się pojawić w przypadku problemów podczas wykonywania funkcji eval.
Obecnie zastąpiony SyntaxError. Mam nadzieję że nie wykorzystujesz funkcji eval, 
lub robisz to z głową i jeśli nie ma innego wyjścia. Osobiście nie widzę
zastosowania dla tego typu błędów, choć nic nie broni go rzucić w dowolnym miejscu 
aplikacji niekoniecznie związanym z eval.&lt;/p&gt;

&lt;h3 id=&quot;rangeerror&quot;&gt;RangeError&lt;/h3&gt;

&lt;p&gt;Błąd zakresu jest jednym z bardziej przydatnych typów błędu w JS. Może się on 
pojawić podczas zabaw z tablicami w JS lub typem Number. Można go wykorzystać
tworząc &lt;a href=&quot;{{site.url}}/2016/03/24/walidacja-w-akcesorach-javascript.html&quot;&gt;walidację danych przekazywanych do funkcji i metod, w tym do setterów&lt;/a&gt;.
&lt;strong&gt;Przydaje się on gdy sprawdzamy czy wartość numeryczna znajduje się w zbiorze wartości
z określonej dziedziny&lt;/strong&gt; - ja tak często robię.&lt;/p&gt;

&lt;h3 id=&quot;referenceerror&quot;&gt;ReferenceError&lt;/h3&gt;

&lt;p&gt;Jeden z częściej spotykanych błędów rzucanych przez silnik przeglądarki. 
Powstaje gdy wykonywana jest próba przypisania nieistniejącego obiektu do zmiennej.
Podobnie jak dla EvalError, nie widzę zastosowania w innych przypadkach.&lt;/p&gt;

&lt;h3 id=&quot;syntaxerror&quot;&gt;SyntaxError&lt;/h3&gt;

&lt;p&gt;To typ błędu to to samo co EvalError, tyle że istnieje w obecnym oficjalnym 
standardzie JS.&lt;/p&gt;

&lt;h3 id=&quot;typeerror&quot;&gt;TypeError&lt;/h3&gt;

&lt;p&gt;Błąd typu. Jeden z częściej rzucanych przez JS. Występuje np. gdy pobierany jest 
jakiś obiekt drzewa DOM, a następnie bez sprawdzenia czy ta akcja przyniosła 
zamierzony efekt wykonywane są na nim inne operacje. Lub gdy na typie string 
próbujemy wykonać metody specyficzne dla typu numeric itp. Ogólnie gdy obiekt 
nie ma metody której chcemy użyć. Tak jak RangeError może być
wykorzystywany w walidacji argumentów funkcji i metod. &lt;strong&gt;Możemy go rzucać gdy typ
przekazanego argumentu nie zgadza się z dziedziną. Jest to pewien substytut braku
silnego typowania w JS&lt;/strong&gt;. Tego typ także często (nad)używam w swoich aplikacjach.&lt;/p&gt;

&lt;h3 id=&quot;urierror&quot;&gt;URIError&lt;/h3&gt;

&lt;p&gt;Błąd URI może pojawić się podczas próby sparsowania błędnego URI (czego pewnie
nie trudno się było domyślić, ale właśnie po to by się nie domyślać tworzymy typy
błędów). Funkcje które można podejrzewać o rzucanie wyjątkami URIError to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;decodeURI(),&lt;/li&gt;
&lt;li&gt;decodeURIComponent(),&lt;/li&gt;
&lt;li&gt;encodeURI(),&lt;/li&gt;
&lt;li&gt;encodeURIComponent(),&lt;/li&gt;
&lt;li&gt;escape(),&lt;/li&gt;
&lt;li&gt;unescape().&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;czym-rzuca%C4%87%3F&quot;&gt;Czym rzucać?&lt;/h2&gt;

&lt;p&gt;Jak widać mamy sporo fajnych typów błędów w JS, jednak &lt;strong&gt;w moim subiektywnym rankingu
wygrywają TypeError i RangeError&lt;/strong&gt;. Pozostałe typy poza przypisanymi do siebie
sytuacjami raczej nie pasują opisu spotykanych w aplikacjach problemów, ale być 
może Tobie uda się im znaleźć jakieś dodatkowe zastosowanie. Oczywiście nic nie
broni nas przed tym aby &lt;strong&gt;rozszerzać wachlarz dostępnych typów błędów o własne,
bardziej adekwatne do kontekstu typy wyjątków&lt;/strong&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-04-05T21:45:00+02:00</pubDate>
            <link>http://lion.net.pl/2016/04/05/typy-wyjatkow-w-javascript.html</link>
            <atom:link href="http://lion.net.pl/2016/04/05/typy-wyjatkow-w-javascript.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/04/05/typy-wyjatkow-w-javascript.html</guid>
        </item>
                <item>
            <title>Wyszukiwanie binarne i interpolacja liniowa w JavaScript</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                                    <content:encoded>&lt;p&gt;Warto pamiętać o podstawowych algorytmach wpajanych już we wczesnych latach na 
lekcjach matematyki lub później na zajęciach z algorytmów na uczelniach. Nawet
jeśli nie pamięta się już ich implementacji, to sama znajomość pojęć może się przydać.
W obecnych czasach dostęp do wiedzy jest ogromny, trzba tylko wiedzieć co chce
się odnaleźć w tym gąszczu informacji. Taki wniosek nasunął mi się sam podczas 
tworzenia aplikacji konkursowej DDF.&lt;/p&gt;

&lt;p&gt;W aplikacji mam założone że dawki leków mogą być opisane jako zbiory dyskretnych
wartości. Mam więc zbiór wag (iksy) oraz zbiór dawek (igreki). Gdy użytkownik 
aplikacji chce obliczyć dawkę dla leku opisanego właśnie w taki sposób &lt;strong&gt;należy
odnaleźć w zbiorze iksów zadaną wagę i odczytać dla niej ze zbioru igreków dawkę&lt;/strong&gt;.
Można oczywiście wykorzystać wyszukiwanie liniowe i przeszukać cały zbiór iks po 
iksie, ale w najgorszym wypadku musimy sprawdzić wszystkie iksy. Jest wątpliwe
aby kiedyś ktoś dodał do aplikacji tak złożony model aby zrobiło to wrażenie 
na procesorze współczesnego telefonu komórkowego, ale nigdy nic nie wiadomo.
Poza tym skoro są już znane lepsze algorytmy to czemu by z nich nie skorzystać?
Dodatkowym utrudnieniem niech będzie to, że &lt;strong&gt;jeśli zadana waga nie jest obecna 
w zbiorze należy dokonać interpolacji liniowej przy pomocy dwóch najbliższych wag
i odpowiadających im dawek&lt;/strong&gt;. Do dzieła.&lt;/p&gt;

&lt;h3 id=&quot;wyszukiwanie-binarne&quot;&gt;Wyszukiwanie binarne&lt;/h3&gt;

&lt;p&gt;Wyszukiwanie tego typu polega na zawężaniu obszaru poszukiwań poprzez jego podział
na połowy. &lt;strong&gt;Zbiór musi być uporządkowany rosnąco&lt;/strong&gt;. W przypadku gdy nie trafimy 
w szukany element zbiory w zależności od tego czy szukana wartość jest mniejsza 
czy też większa od wartości środkowej wartość ta jest brana za początek bądź 
koniec nowego obszaru poszukiwań. Algorytm kończy się gdy krańce obszaru 
poszukiwań są sobie równe. Pod koniec algorytmu wiemy czy poszukiwana wartość 
znajduje się w zbiorze czy też jej tam nie ma. Poniżej przedstawiam implementację 
dla opisanego na wstępie problemu w DDF:&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/74db81244ff491dde85d]&lt;/p&gt;

&lt;p&gt;Wstępne uporządkowanie zapewnia nam implementacja klasy DoseComplexParameters.
&lt;strong&gt;Algorytm umieszczony jest w metodzie &lt;em&gt;calculateDose&lt;/em&gt;&lt;/strong&gt;. Zaczynamy od ustawienia
krańców przedziału x1 i x2. Zostają one ustawione na pierwszy i ostatni indeks
zbioru wag. Następnie w pętli obliczamy środek zbioru. Korzystamy tu z zaokrąglenia
w dół ponieważ ilość elementów w zbiorze może nie być parzysta. Następnie w 
zależności od tego czy szukana waga jest mniejsza czy też większa od znalezionej
modyfikujemy krańce przedziałów. Należy tu zwrócić uwagę na &lt;strong&gt;+1&lt;/strong&gt;. Po wyjściu z
pętli jeśli pod indeksem wskazywanym przez ostatni badany element w zbiorze znajduje
się szukana waga to odpowiadająca jej wartość dawki wpisywana jest do obiektu dawki.
W przeciwnym wypadku dawka to zero.&lt;/p&gt;

&lt;h3 id=&quot;interpolacja-liniowa&quot;&gt;Interpolacja liniowa&lt;/h3&gt;

&lt;p&gt;Pokazany wcześniej algorytm działa, ale w przypadku gdy waga nie występuje na 
liście zwracane są zera. Nie jest to to czego oczekiwałby użytkownik aplikacji.
Dodamy więc wspomnianą we wstępie interpolację liniową. Jest to najprostszy 
rodzaj interpolacji wielomianowej. Wyznaczymy funkcję interpolacyjną, obliczając
parametry &lt;strong&gt;a&lt;/strong&gt; i &lt;strong&gt;b&lt;/strong&gt; z dwóch punktów najbliższych szukanej wadze.&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/076a91fe3bfa698f2aef]&lt;/p&gt;

&lt;p&gt;Dodaliśmy zmienną przechowującą współrzędną iks najbliższego punktu po lewej.
Zmieniliśmy także blok alternatywy w przypadku gdy nie dało się odnaleźć wagi w
zbiorze. Tym razem nie zwracamy już zera a wartość interpolowaną przy pomocy 
funkcji liniowej.&lt;/p&gt;

&lt;p&gt;Przedstawiony kod można zobaczyć także w repozytorium aplikacji konkursowej
&lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework&quot;&gt;Drug Dose Framework&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-03-26T23:40:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/26/wyszukiwanie-binarne-i-interpolacja-liniowa-w-javascript.html</link>
            <atom:link href="http://lion.net.pl/2016/03/26/wyszukiwanie-binarne-i-interpolacja-liniowa-w-javascript.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/26/wyszukiwanie-binarne-i-interpolacja-liniowa-w-javascript.html</guid>
        </item>
                <item>
            <title>Walidacja w akcesorach JavaScript</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                        <category>OOP</category>
                        <category>QA</category>
                                    <content:encoded>&lt;p&gt;Chciałbym poruszyć, dość banalny jak mogłoby się wydawać, temat jakim jest walidacja
w akcesorach, a konkretniej w setterach, w języku JavaScript.&lt;/p&gt;

&lt;h3 id=&quot;oop-w-js&quot;&gt;OOP w JS&lt;/h3&gt;

&lt;p&gt;JavaScript ewoluował. Z prostego języka skryptowego, mającego zastąpić aplety Java
w przeglądarkach, powstał język o szerokim zastosowaniu, o coraz lepiej określonych
standardach, wymagający od użytkownika specyficznego podejścia do OOP. Można 
w nim co prawda nadal pisać proste skrypty, nie ocierając się nawet o paradygmaty
programowania obiektowego, ale coraz większa ilość nowoczesnych bibliotek, coraz 
większa ilość programistów profesjonalnie podchodzących do jakości dostarczanego
softu powoduje że prędzej czy później spotykamy się w naszej karierze z kodem
napisanym w OOP. Z czasem sami chcemy taki kod wytwarzać. Jak wspomniałem 
wcześniej, JS ma specyficzne podejście do OOP. Dla osób piszących wcześniej w innych
obiektowych językach programowania może być ono trudne i czasami irracjonalne.
Często stajemy przed problemami które w naszym bazowym języku programowania 
rozwiązujemy od ręki, ale przeniesienie tego na kod JS sprawia wiele trudności.
Tak także może być w przypadku implementacji walidacji parametrów przekazywanych
do setterów naszych obiektów.&lt;/p&gt;

&lt;h3 id=&quot;typowanie-i-walidacja-w-js&quot;&gt;Typowanie i walidacja w JS&lt;/h3&gt;

&lt;p&gt;JavaScript jest językiem słabo typowanym. Oznacza to że typ zmiennej może ulegać
zmianie podczas działania programu oraz że sam język nie pilnuje za nas czy to co
chcemy przypisać do zmiennej ma jakikolwiek sens z punktu widzenia naszej domeny.
To samo tyczy się pól w obiektach. Musimy o to zadbać sami. Możemy co prawda 
pozwolić klientom naszych klas na wpisywanie do nich czego dusza zapragnie,
ale prędzej czy później ktoś z niewiedzy lub z wyrafinowaniem to wykorzysta nie 
w taki sposób w jaki byśmy chcieli.&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/a2eb3798ec6867adc675]&lt;/p&gt;

&lt;h4 id=&quot;enkapsulacja-p%C3%B3l-obiekt%C3%B3w&quot;&gt;Enkapsulacja pól obiektów&lt;/h4&gt;

&lt;p&gt;Dobrym pomysłem jest próba enkapsulacji pól klas jako pól pseudo prywatnych i 
utworzenie dla nich setterów i getterów:&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/b9e745708bff98539826]&lt;/p&gt;

&lt;p&gt;W tej chwili ustawiamy stan obiektu przy pomocy setterów. Co prawda nadal możliwe
jest przypisanie wartości o typach z poza dziedziny oraz bezpośredni dostęp do pól,
ale zyskaliśmy pewne punkty zaczepienia, czyli nasze settery, w których możemy 
dokonać walidacji.&lt;/p&gt;

&lt;h4 id=&quot;walidacja-w-setterach&quot;&gt;Walidacja w setterach&lt;/h4&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/ce9d59ad88ec7cbc9449]&lt;/p&gt;

&lt;p&gt;W tym przykładzie settery zostały rozbudowane o dodatkową walidację. Przekazywane
do setterów wartości są przypisywane do pól obiektu tylko wtedy gdy przejdą przez
przygotowane sito. W przeciwnym wypadku rzucane są odpowiednie wyjątki, które klient
powinien przechwycić i odpowiednio na nie zareagować. W przypadku braku reakcji
klienta w konsoli przeglądarki pojawi się odpowiedni komunikat. Jest to także
rozwiązanie przydatne pod względem debugowania - jeśli komunikaty przypisane do
wyjątków są w miarę sensowne od razu wiemy co się stało.&lt;/p&gt;

&lt;h3 id=&quot;zalety-walidacji-w-setterach&quot;&gt;Zalety walidacji w setterach&lt;/h3&gt;

&lt;p&gt;Walidacja danych wejściowych w setterach ma wiele zalet niezależnie od języka
programowania w jakim przyszło nam tworzyć aplikację. Niektóre języki, zwłaszcza
silnie typowane, ułatwiają nam tworzenie takiej walidacji out-of-box walidując
typy zmiennych przekazywanych do setterów. Jednak także w przypadku języków słabo
typowanych nie jesteśmy z góry na przegranej pozycji. Odrobina pracy powoduje że
możemy się zabezpieczyć przynajmniej przed najczęstszymi błędami.&lt;/p&gt;

&lt;p&gt;W pokazany w przykładzie sposób zabezpieczyliśmy w pewien sposób nasz obiekt przed 
przypadkowym przypisaniem do jego pól wartości z poza dziedziny. Podpowiedzieliśmy 
także osobie która będzie korzystać z naszej klasy (być może nam samym w przyszłości)
co oczekujemy zastać w polach obiektu gdy odpytamy go o jego stan.&lt;/p&gt;

&lt;p&gt;Wykorzystaliśmy tu prawo Demeter, delegując walidację do metod prywatnych. 
Wykorzystaliśmy możliwość rzucania wyjątków przez co nasz obiekt nie musi się 
martwić co zrobić w przypadku niepoprawności danych wejściowych. Można by powiedzieć,
że naruszyliśmy zasady KISS i YAGNI, ale zostało to zrobione w słusznym celu. 
Te kilka linijek nadmiarowego kodu może w przyszłości oszczędzić wielu minut 
podczas których moglibyśmy szukać odpowiedzi na pytanie jaka to też znowu magia 
podziała się w naszym ulubionym języku programowania.&lt;/p&gt;

&lt;p&gt;Tworzenie setterów i getterów ułatwia także testowanie aplikacji. Także 
&lt;a href=&quot;{{site.url}}//2016/03/15/testowanie-wyjatkow-w-jasmine.html&quot;&gt;testowanie wyjątków w JS&lt;/a&gt; 
jest w miarę proste i przyjemne. Dobrze przygotowane settery oraz suita testów
na pewno pomoże w utrzymaniu kodu wysokiej jakości.&lt;/p&gt;

&lt;p&gt;Więcej przykładów można znaleźć w kodzie źródłowym mojej aplikacji konkursowej
&lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework&quot;&gt;Drug Dose Framework&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-03-24T19:20:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/24/walidacja-w-akcesorach-javascript.html</link>
            <atom:link href="http://lion.net.pl/2016/03/24/walidacja-w-akcesorach-javascript.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/24/walidacja-w-akcesorach-javascript.html</guid>
        </item>
                <item>
            <title>Raport #1 z prac nad DDF</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                        <category>OOP</category>
                        <category>QA</category>
                                    <content:encoded>&lt;p&gt;Mija już powoli trzeci tydzień trwania konkursu oraz mojej pracy nad projektem.
Nadszedł czas aby się wyspowiadać co też do tej pory udało mi się stworzyć w 
&lt;a href=&quot;{{site.url}}/2016/03/01/dam-sie-poznac.html&quot;&gt;projekcie DDF&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;model&quot;&gt;Model&lt;/h2&gt;

&lt;p&gt;Udało mi się do tej pory napisać aż 4 klasy modelu. Są to proste klasy typu Value
Object - kilka pól, prosta walidacja, gettery, settery. Postanowiłem także na
wprowadzenie do projektu dokumentacji w postaci diagramów UML. Jak to czasami bywa
zaczynam od tyłu - w pierwszej kolejności powstał diagram klas, ubogi ale zawsze coś.
Zamodelowane zostały klasy opakowujące 
&lt;a href=&quot;{{site.url}}/2016/03/12/format-opisu-lekow-w-ddf.html&quot;&gt;formaty leków obsługiwanych w DDF&lt;/a&gt;.
Modelowanie będę przeprowadzał w bardzo fajnym programiku Dia. Plik z modelem
znajdziecie w 
&lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework/blob/master/doc/ddf.dia&quot;&gt;repozytorium&lt;/a&gt;, 
poniżej prezentuję wspomniany diagram klas:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;{{site.url}}/assets/img/ddf001.png&quot;&gt;Diagram klas w projekcie DDF&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;kontroler&quot;&gt;Kontroler&lt;/h2&gt;

&lt;p&gt;Jeśli chodzi o kontrolery to skorzystałem z wbudowanego w AngularJS modułu routingu
- ngRoute. Powstały trzy proste kontrolery, obsługujące listę leków, szczegóły
leku oraz formatkę obliczania dawek leku (która jeszcze niczego sensownego nie
wylicza). Poznałem także framework Angular na tyle, że zrobiłem ładowanie plików 
serwisem $http.&lt;/p&gt;

&lt;h2 id=&quot;widok&quot;&gt;Widok&lt;/h2&gt;

&lt;p&gt;Powstały trzy partiale do wspomnianych wyżej kontrolerów. Wykorzystuję w nich
takie komponenty frameworka Ionic jak ion-list i ion-option-button - naprawdę
świetnie działają!&lt;/p&gt;

&lt;h2 id=&quot;testy&quot;&gt;Testy&lt;/h2&gt;

&lt;p&gt;Ostro testuję moją apkę. Do tej pory powstały 44 testy w frameworku Jasmine.
Na razie są to proste asercje i 
&lt;a href=&quot;{{site.url}}//2016/03/15/testowanie-wyjatkow-w-jasmine.html&quot;&gt;testowanie rzucanych wyjątków&lt;/a&gt;. 
Pokrycie kodu to niemal 90%:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Statements : 89.38% ( 202/226 )&lt;/li&gt;
&lt;li&gt;Branches : 79.61% ( 82/103 )&lt;/li&gt;
&lt;li&gt;Functions : 80.95% ( 51/63 )&lt;/li&gt;
&lt;li&gt;Lines : 89.38% ( 202/226 )&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;plany&quot;&gt;Plany&lt;/h2&gt;

&lt;p&gt;To tyle na razie. W kolejnym tygodniu zamierzam wyspecyfikować przy pomocy 
diagramów UML działanie aplikacji oraz dokończyć model.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-03-17T21:10:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/17/raport-1-z-prac-nad-ddf.html</link>
            <atom:link href="http://lion.net.pl/2016/03/17/raport-1-z-prac-nad-ddf.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/17/raport-1-z-prac-nad-ddf.html</guid>
        </item>
                <item>
            <title>Testowanie wyjątków w Jasmine</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                        <category>OOP</category>
                        <category>QA</category>
                                    <content:encoded>&lt;p&gt;Czasami jest tak źle, że aż chce się rzucić mięsem... eee, tzn. wyjątkiem. Dobrze
by było przetestować także i takie scenariusze, aby nie rzucić nim przypadkiem 
w twarz całkiem niewinnemu użytkownikowi naszej aplikacji.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jasmine ma wbudowany matcher toThrow&lt;/strong&gt;. Gdy tylko go znajdujemy w API tego 
frameworka dla testów JS, a mamy doświadczenie z PHPUnit, pierwsze co przychodzi 
na myśl to wywołanie go w następujący sposób:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expect().toThrow(TypeError);
object.method();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;co, jak się pewnie domyślasz, kończy się katastrofą:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error: Actual is not a Function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Asercja, w tym przypadku, oczekuje od nas że przekazana zostanie funkcja. &lt;strong&gt;Najlepszym
rozwiązaniem jest opakowanie metody która ma wyrzucić wyjątek w funkcję anonimową.&lt;/strong&gt;
Spróbujmy ponownie:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expect(function(){object.method();}).toThrow(TypeError);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Expected function to throw Function, but it threw TypeError&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jest już lepiej, nasz test się wykonał. Niestety nie jest zielono. Dostajemy 
podpowiedź, mówiącą że oczekiwaliśmy funkcji, a w rzeczywistości dostaliśmy wyjątek
typu TypeError, bo załóżmy że ta metoda akurat taki wyjątek powinna nam rzucić.
Poprawmy w takim razie nasz kod tak, aby oczekiwać tego co w rzeczywistości jest
nam zwracane:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expect(function(){object.method();}).toThrow(new TypeError());
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Expected function to throw TypeError, but it threw TypeError: Dose value must be numeric!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ha! Okazuje się że &lt;strong&gt;matcher toThow porównuje także komunikaty błędu!&lt;/strong&gt; Tak więc przed 
nami jeszcze jedna poprawka (Jasmine nie sprawdza pozostałych argumentów możliwych 
do podania podczas tworzenia obiektów wyjątków, tj.: fileName i lineNumber):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expect(function(){object.method();}).toThrow(new TypeError(&#039;Dose value must be numeric!&#039;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Teraz możemy podziwiać wynik naszego testu wypisany zielonymi zgłoskami.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Więcej przykładów testowania wyjątków w Jasmine można zobaczyć przeglądając 
&lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework&quot;&gt;repozytorium projektu DDF&lt;/a&gt;, 
np. &lt;a href=&quot;https://github.com/maciejlew/drug-dose-framework/blob/master/test/spec/DoseSpec.js&quot;&gt;test modelu dawki leku&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-03-15T19:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/15/testowanie-wyjatkow-w-jasmine.html</link>
            <atom:link href="http://lion.net.pl/2016/03/15/testowanie-wyjatkow-w-jasmine.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/15/testowanie-wyjatkow-w-jasmine.html</guid>
        </item>
                <item>
            <title>Format opisu leków w DDF</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2016</category>
                        <category>JS</category>
                        <category>DDF</category>
                                    <content:encoded>&lt;p&gt;Na potrzeby &lt;a href=&quot;{{site.url}}/2016/03/01/dam-sie-poznac.html&quot;&gt;aplikacji DDF&lt;/a&gt; 
(fajnie jest wprowadzać swoje własne 3-znakowe akronimy - informatycy to uwielbiają) 
wymyśliłem format w jakim opisywane będą leki i ich dawkowanie.&lt;/p&gt;

&lt;p&gt;Wszystkie dane przechowywane będą w plikach JSON, dzięki czemu nie będzie problemów
z ich tworzeniem, pobieraniem i przetwarzaniem w aplikacji DDF. Format ten jest 
także bardzo &quot;ludzki&quot; więc myślę że nawet osoby nietechniczne będą w stanie 
przygotować swoje zestawy leków.&lt;/p&gt;

&lt;h2 id=&quot;zestawy-lek%C3%B3w&quot;&gt;Zestawy leków&lt;/h2&gt;

&lt;p&gt;Zestawy leków opisywane będą w plikach o następującej strukturze:&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/aaef76a1781717f15743]&lt;/p&gt;

&lt;h2 id=&quot;dane-o-leku%2C-dawkowanie&quot;&gt;Dane o leku, dawkowanie&lt;/h2&gt;

&lt;p&gt;Każdy lek powinien posiadać identyfikator, nazwę, opis oraz parametry funkcji
dawkowania. Wyróżniłem dwa podstawowe typy opisu dawkowania: przy pomocy funkcji
liniowej (&lt;em&gt;simple&lt;/em&gt;) oraz przy pomocy wartości dyskretnych (&lt;em&gt;complex&lt;/em&gt;). Typ będzie
potrzebny aby algorytm wiedział z czym ma do czynienia przed rozpoczęciem parsowania
danych. Zazwyczaj wzór potrzebny do wyliczenia podawany jest w postaci prostej 
zależności liniowej:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y(x) = a * x&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ogólnie:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y(x) = a * x + b&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/df0aef76b78203fc2034]&lt;/p&gt;

&lt;p&gt;jednak być może ktoś chciałby stworzyć bardziej wyrafinowane zależności, jak:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y_min(x) = a_min * x + b; y_max(x) = a_max * x + b&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/bbb28441759d7262922d]&lt;/p&gt;

&lt;p&gt;lub nawet:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y_1 = a_1; y_2 = a_2; ...; y_n = a_n&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Przykład)[https://gist.github.com/maciejlew/35eaf86339e6fad33e14]&lt;/p&gt;

&lt;p&gt;Te wszystkie typy opisów zamierzam obsługiwać w DDF.&lt;/p&gt;
</content:encoded>
            <pubDate>2016-03-12T09:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/03/12/format-opisu-lekow-w-ddf.html</link>
            <atom:link href="http://lion.net.pl/2016/03/12/format-opisu-lekow-w-ddf.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/03/12/format-opisu-lekow-w-ddf.html</guid>
        </item>
            </channel>
</rss>