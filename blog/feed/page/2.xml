<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LionNet</title>
        <description>Programowanie, sieci komputerowe, informatyka.</description>      
        <link>http://lion.net.pl</link>
        <language>pl</language>
        <generator>Sculpin</generator>
        <category>IT</category>
        <atom:link href="http://lion.net.pl/blog/feed.xml" rel="self" type="application/rss+xml" />
                <item>
            <title>Pistache i RapidJSON - czytanie danych z pliku</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2017</category>
                        <category>C++</category>
                        <category>DDS</category>
                                    <content:encoded>&lt;p&gt;&lt;a href=&quot;/2017/03/28/pistache-i-rapidjson-prosty-obiekt-json-w-odpowiedzi.html&quot;&gt;Zapowiadałem&lt;/a&gt;, że pokażę jak wczytać przy pomocy RapidJSON dane z pliku i odesłać
je do użytkownika webserwisu stworzonego w Pistache. Oto jak to możesz zrobić.&lt;/p&gt;

&lt;h3 id=&quot;strumie%C5%84-z-pliku-json&quot;&gt;Strumień z pliku JSON&lt;/h3&gt;

&lt;p&gt;Po otwarciu pliku, wykorzystując standardowe fopen, możesz w RapidJSON nakazać 
aby dane z tego pliku były zaczytane przy pomocy obiektu strumienia &lt;em&gt;FileReadStream&lt;/em&gt;.
Następnie należy przetworzyć te dane używając metody &lt;em&gt;parseStream&lt;/em&gt; obiektu &lt;em&gt;Document&lt;/em&gt;.
W ten nieskomplikowany sposób możesz w kilku linijkach kody w szybki i wydajny
sposób uzyskać dostęp do zapisanych w plikach JSON. Możesz sprawdzać ich wartości,
manipulować nimi, zapisywać ponownie do pliku (tu pomocny może okazać się obiekt
klasy &lt;em&gt;FileWriteStream&lt;/em&gt;). Poniższy przykład pokazuje jak otwieram plik z konfiguracją
na podstawie której otwieram docelowy plik z danymi, po czym odsyłam całą jego 
zawartość do użytkownika webserwisu. Oczywiście dla takiej funkcjonalności parsowanie
pliku jest trochę przerostem formy nad treścią, ale jest to dobra baza pod to by
w przyszłości wprowadzić w tej metodzie paginację, wyszukiwanie i inne zaawansowane
funkcje.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void DrugsHandler::onRequest(const Net::Rest::Request&amp;amp; request, Net::Http::ResponseWriter response) {

    Document drugs, config;
    char _drugs_buffer[65536], _config_buffer[65536], _files_path_buffer[65536];
    StringBuffer drugs_buffer;

    FILE* config_pointer = fopen(&quot;config.json&quot;, &quot;r&quot;);
    FileReadStream config_stream(config_pointer, _config_buffer, sizeof(_config_buffer));
    config.ParseStream(config_stream);
    fclose(config_pointer);

    if (config.HasMember(&quot;files_path&quot;)) {

        sprintf(_files_path_buffer, &quot;%s/drugs.json&quot;, config[&quot;files_path&quot;].GetString());
        FILE* drugs_pointer = fopen(_files_path_buffer, &quot;r&quot;);

        if (drugs_pointer) {
            FileReadStream drugs_stream(drugs_pointer, _drugs_buffer, sizeof(_drugs_buffer));
            drugs.ParseStream(drugs_stream);
            fclose(drugs_pointer);

            Writer&amp;lt;StringBuffer&amp;gt; writer(drugs_buffer);
            drugs.Accept(writer);

            response.send(Http::Code::Ok, drugs_buffer.GetString());

        } else {
            response.send(Http::Code::Internal_Server_Error);
        }
    } else {
        response.send(Http::Code::Internal_Server_Error);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pokazane w tym wpisie przykłady są zaczerpnięte z &lt;a href=&quot;https://github.com/maciejlew/drug-dose-server&quot;&gt;aplikacji DDS&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2017-03-30T21:40:00+02:00</pubDate>
            <link>http://lion.net.pl/2017/03/30/pistache-i-rapidjson-czytanie-danych-z-pliku.html</link>
            <atom:link href="http://lion.net.pl/2017/03/30/pistache-i-rapidjson-czytanie-danych-z-pliku.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2017/03/30/pistache-i-rapidjson-czytanie-danych-z-pliku.html</guid>
        </item>
                <item>
            <title>Pistache i RapidJSON - prosty obiekt w odpowiedzi</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2017</category>
                        <category>C++</category>
                        <category>DDS</category>
                                    <content:encoded>&lt;p&gt;Zdecydowałem się wykorzystać bibliotekę RapidJSON w mojej aplikacji DDS. Kilka 
kolejnych artykułów będzie jej poświęconych. W tym wpisie pokażę jak zbudować i 
zwrócić przy pomocy Pistache prosty obiekt JSON.&lt;/p&gt;

&lt;h3 id=&quot;budowniczy-obiekt%C3%B3w-json-w-rapidjson&quot;&gt;Budowniczy obiektów JSON w RapidJSON&lt;/h3&gt;

&lt;p&gt;Jak zarejestrować metodę odpowiadającą na żądanie REST pisałem na blogu w wpisie
&lt;a href=&quot;/2017/03/25/front-controller-w-pistache.html&quot;&gt;&quot;Front controller w Pistache&quot;&lt;/a&gt;. Gdy już mamy to gotowe, najprostsza metoda
może wyglądać następująco:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void ProjectHandler::onRequest(const Rest::Request&amp;amp; request, Net::Http::ResponseWriter response) {
    StringBuffer s;
    Writer&amp;lt;StringBuffer&amp;gt; writer(s);
    writer.StartObject();
    writer.Key(&quot;name&quot;);
    writer.String(DDS_NAME);
    writer.Key(&quot;full_name&quot;);
    writer.String(DDS_FULL_NAME);
    writer.Key(&quot;version&quot;);
    writer.String(DDS_VERSION);
    writer.Key(&quot;license&quot;);
    writer.String(DDS_LICENSE);
    writer.EndObject();
    response.send(Http::Code::Ok, s.GetString());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To co tu widać, to najprostsza budowa obiektu JSON w RapidJSON. Nie ma
tu żadnej interakcji z użytkownikiem, otwierania strumieni, zaczytywania JSON z pliku 
itp. &quot;Otwieramy&quot; obiekt, dodajemy kolejne pola-klucze i ich wartości, &quot;zamykamy&quot;
obiekt. Tekstową reprezentację obiektu wysyłamy w odpowiedzi HTTP do użytkownika.
Prawda że proste? Można by oczywiście ten łańcuch znaków przygotować po prost sklejając
wszystko przy pomocy podstawowych operacji na łańcuchach, czy też wykorzystując sprint,
ale API oferowane przez RapidJSON wydaje się po prostu ładniejsze od własnoręcznego
rzeźbienia w JSON.&lt;/p&gt;

&lt;p&gt;W kolejnych wpisach postaram się pokazać jak przesłać odpowiedź w formacie JSON
pobraną z pliku.&lt;/p&gt;
</content:encoded>
            <pubDate>2017-03-28T22:05:00+02:00</pubDate>
            <link>http://lion.net.pl/2017/03/28/pistache-i-rapidjson-prosty-obiekt-json-w-odpowiedzi.html</link>
            <atom:link href="http://lion.net.pl/2017/03/28/pistache-i-rapidjson-prosty-obiekt-json-w-odpowiedzi.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2017/03/28/pistache-i-rapidjson-prosty-obiekt-json-w-odpowiedzi.html</guid>
        </item>
                <item>
            <title>Front Controller w Pistache</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2017</category>
                        <category>C++</category>
                        <category>DDS</category>
                                    <content:encoded>&lt;p&gt;Front controller to jeden z najczęściej wykorzystywanych wzorców projektowych.
W tym wpisie pokażę jak wykorzystać go w Pistache do stworzenia klasy zarządzającej
routingiem.&lt;/p&gt;

&lt;h3 id=&quot;routing-w-pistache&quot;&gt;Routing w Pistache&lt;/h3&gt;

&lt;h4 id=&quot;http%3A%3Ahandler&quot;&gt;Http::Handler&lt;/h4&gt;

&lt;p&gt;Temat trasowania w Pistache można rozwiązać na kilka sposobów. Najłatwiejszym,
pierwszym na jaki natkniesz się czytając dokumentację frameworka, jest zarejestrowanie
klasy implementującej interfejsy &lt;em&gt;Http::Handler&lt;/em&gt; metodą &lt;em&gt;onRequest&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Metoda ta może wyglądać następująco:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void VersionHandler::onRequest(const Http::Request&amp;amp; request, Http::ResponseWriter response) {
    response.send(Http::Code::Ok, &quot;DDS &quot; DDS_VERSION);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A kod ją rejestrujący tak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int main() {
    Http::listenAndServe&amp;lt;VersionHandler&amp;gt;(&quot;*:9080&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;routes%3A%3Aget&quot;&gt;Routes::Get&lt;/h4&gt;

&lt;p&gt;Jednak, gdy chcemy udostępnić więcej niż jedną metodę, warto poszukać czegoś 
bardziej zaawansowanego. Tym krokiem na przód będzie stworzenie klasy 
kontrolującej routing. Klasa ta będzie wykorzystywała wbudowany w Pistache 
mechanizm routingu. Poszczególne żądania będą obsługiwane przez wyspecjalizowane 
klasy - handlery. Może to wyglądać na przykład tak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &quot;pistache/endpoint.h&quot;
#include &quot;handlers/VersionHandler.h&quot;

class Endpoint
{

public:

    Endpoint(Net::Address addr)
        : httpEndpoint(std::make_shared&amp;lt;Net::Http::Endpoint&amp;gt;(addr))
    {
    }

    void init(size_t thr = 2) {
        auto opts = Net::Http::Endpoint::options()
            .threads(thr)
            .flags(Net::Tcp::Options::InstallSignalHandler);
        httpEndpoint-&amp;gt;init(opts);
        setupRoutes();
    }

    void start() {
        httpEndpoint-&amp;gt;setHandler(router.handler());
        httpEndpoint-&amp;gt;serve();
    }

    void shutdown() {
        httpEndpoint-&amp;gt;shutdown();
    }

    private:

        Rest::Router router;
        std::shared_ptr&amp;lt;Net::Http::Endpoint&amp;gt; httpEndpoint;
        VersionHandler version_handler;

        void setupRoutes() {
            using namespace Net::Rest;
            Routes::Get(router, &quot;/version&quot;, Routes::bind(&amp;amp;VersionHandler::onRequest, &amp;amp;version_handler));

        }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Po tej zmianie kod rejestrujący może wyglądać w ten sposób:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int main() {

    Net::Port port(9080);

    int thr = 2;

    Net::Address addr(Net::Ipv4::any(), port);

    Endpoint stats(addr);

    stats.init(thr);
    stats.start();

    stats.shutdown();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wykorzystując &lt;em&gt;Routes::Get** należy zwrócić uwagę aby zmienić interfejs metody *onRequest&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void VersionHandler::onRequest(const Rest::Request&amp;amp; request, Net::Http::ResponseWriter response) {
    response.send(Http::Code::Ok, &quot;DDS &quot; DDS_VERSION);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I to wszystko. Po tej małej zmianie mamy do dyspozycji front controller, w którym
możemy rejestrować w prosty sposób kolejne wyspecjalizowane handlery obsługujące 
żądania użytkowników naszej aplikacji.&lt;/p&gt;

&lt;p&gt;Pokazane w tym wpisie przykłady są zaczerpnięte z &lt;a href=&quot;https://github.com/maciejlew/drug-dose-server&quot;&gt;aplikacji DDS&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
            <pubDate>2017-03-25T21:05:00+01:00</pubDate>
            <link>http://lion.net.pl/2017/03/25/front-controller-w-pistache.html</link>
            <atom:link href="http://lion.net.pl/2017/03/25/front-controller-w-pistache.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2017/03/25/front-controller-w-pistache.html</guid>
        </item>
                <item>
            <title>Analiza wymagań dla serwera dawek leków</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2017</category>
                        <category>C++</category>
                        <category>DDS</category>
                                    <content:encoded>&lt;p&gt;Po wyborze technologii w jakiej rozwijany będzie DDS przyszedł czas na zastanowienie
się jaki w ogóle będzie cel tego projektu (poza nauką C++), co da się zrobić w
czasie trwania konkursu (zostało jeszcze trochę ponad 2 miesiące). Czas na MoSCoW.&lt;/p&gt;

&lt;h3 id=&quot;no-wi%C4%99c-czym-b%C4%99dzie-ten-dds%3F&quot;&gt;No więc czym będzie ten DDS?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/2016/04/29/podroz-na-wschod-roadmap-z-moscow.html&quot;&gt;O metodzie MoSCoW miałem okazję napisać rok temu&lt;/a&gt;, podczas rozwijania &lt;a href=&quot;/2016/03/01/dam-sie-poznac.html&quot;&gt;DDF&lt;/a&gt;.
Wtedy spisanie wymagań dla aplikacji mobilnej obliczającej dawki leków pozwoliło mnie samemu określić kierunki rozwoju DDF, na których należy się skupić, aby móc uznać projekt za ukończony (przynajmniej w ramach konkursu). Po fazie poszukiwań rozwiązań technologicznych jakie zastosuję w DDS (C++, &lt;a href=&quot;/2017/03/14/pistacja.html&quot;&gt;pistache&lt;/a&gt;, rapidjson), przyszedł właściwy moment aby spisać krótką listę zadań dla DDS:&lt;/p&gt;

&lt;h4 id=&quot;dds-musi-mie%C4%87%3A&quot;&gt;DDS musi mieć:&lt;/h4&gt;

&lt;h5 id=&quot;lista-lek%C3%B3w&quot;&gt;Lista leków&lt;/h5&gt;

&lt;p&gt;Jedna z metod webserwisu powinna zwrócić użytkownikowi pełną listę leków. Lista zostanie zwrócona w postaci dokumentu JSON (jak z resztą wszystkie odpowiedzi z DDS). &lt;a href=&quot;/2016/03/12/format-opisu-lekow-w-ddf.html&quot;&gt;Format odpowiedzi będzie identyczny z tym znanym z DDS&lt;/a&gt;. Źródło informacji o lekach powinno być modyfikowalne (pliki, baza danych, inne web serwisy).&lt;/p&gt;

&lt;h5 id=&quot;dawkowanie-leku&quot;&gt;Dawkowanie leku&lt;/h5&gt;

&lt;p&gt;Kolejny z webserwisów będzie umożliwiał pobranie szczegółowych informacji dotyczących dawkowania danego leku. Tu tak samo spodziewajcie się odpowiedzi w JSON w formacie z DDF.&lt;/p&gt;

&lt;h4 id=&quot;dds-powinien-posiada%C4%87%3A&quot;&gt;DDS powinien posiadać:&lt;/h4&gt;

&lt;h5 id=&quot;kalkulator-dawek&quot;&gt;Kalkulator dawek&lt;/h5&gt;

&lt;p&gt;Aplikacja powinna także umożliwiać obliczenie dawki leku po podaniu wagi pacjenta. Będzie to ukłon w kierunku użytkowników niekorzystających z aplikacji zbudowanych na podstawie DDF.&lt;/p&gt;

&lt;h5 id=&quot;kalkulator-rozpuszczania-lek%C3%B3w&quot;&gt;Kalkulator rozpuszczania leków&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Kalkulator ten będzie nowością&lt;/strong&gt;. Nie znajdziecie tego w tej chwili w DDS, choć być może kiedyś i tam to dorobię. Kalkulator ten będzie obliczał i zwracał odpowiedź na pytanie jak uzyskać lek o dowolnym stężeniu rozpuszczając lek o bazowym stężeniu w innej substancji. Format odpowiedzi zostanie ustalony w trakcie prac nad tą częścią systemu.&lt;/p&gt;

&lt;h4 id=&quot;dds-m%C3%B3g%C5%82by-posiada%C4%87%3A&quot;&gt;DDS mógłby posiadać:&lt;/h4&gt;

&lt;h5 id=&quot;system-logowania&quot;&gt;System logowania&lt;/h5&gt;

&lt;p&gt;DDS mógłby opcjonalnie pozwalać włączyć autentykację i autoryzację użytkowników.&lt;/p&gt;

&lt;h5 id=&quot;szyfrowanie-po%C5%82%C4%85czenia&quot;&gt;Szyfrowanie połączenia&lt;/h5&gt;

&lt;p&gt;System mógłby opcjonalnie pozwalać włączyć tryb SSL.&lt;/p&gt;

&lt;h5 id=&quot;wersja-produktu&quot;&gt;Wersja produktu&lt;/h5&gt;

&lt;p&gt;Aplikacja mogłaby zwracać jedną z metod informację o swojej wersji.&lt;/p&gt;

&lt;h3 id=&quot;i-to-wszystko-za-darmoszk%C4%99%3F-dost%C4%99pne-dla-ka%C5%BCdego%3F&quot;&gt;I to wszystko za darmoszkę? Dostępne dla każdego?&lt;/h3&gt;

&lt;p&gt;Tak. Wszystko będzie &lt;a href=&quot;https://github.com/maciejlew/drug-dose-server&quot;&gt;za darmo do pobrania, zmodyfikowania&lt;/a&gt; i wykorzystania. Super, co nie?&lt;/p&gt;
</content:encoded>
            <pubDate>2017-03-20T20:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2017/03/20/analiza-wymagan-dla-serwera-dawek-lekow.html</link>
            <atom:link href="http://lion.net.pl/2017/03/20/analiza-wymagan-dla-serwera-dawek-lekow.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2017/03/20/analiza-wymagan-dla-serwera-dawek-lekow.html</guid>
        </item>
                <item>
            <title>Jak włączyć tryb debug w cmake?</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2017</category>
                        <category>DDS</category>
                        <category>C++</category>
                                    <content:encoded>&lt;p&gt;W tym krótkim wpisie pokażę jak włączyć tryb debug podczas wykonywania Makefile
wygenerowanego przez narzędzie cmake.&lt;/p&gt;

&lt;h3 id=&quot;po-co-debugowa%C4%87-makefile%3F&quot;&gt;Po co debugować Makefile?&lt;/h3&gt;

&lt;p&gt;Natrafiłem dziś na dziwny problem podczas budowania &lt;a href=&quot;http://lion.net.pl/2017/03/01/powtorka-z-rozrywki.html&quot;&gt;aplikacji DDS&lt;/a&gt;. Błędy kompilacji
wskazywały na problem z linkowaniem zewnętrznych bibliotek. Wygenerowany przez
cmake plik Makefile był długi i skomplikowany a ja nie do końca wiedziałem co
w rzeczywistości dzieje się podczas wykonywania polecenia make. Przydałoby się
zobaczyć polecenie przekazywane do g++.&lt;/p&gt;

&lt;h3 id=&quot;konfiguracja-cmake&quot;&gt;Konfiguracja cmake&lt;/h3&gt;

&lt;p&gt;Podczas budowania pliku Makefile, cmake tworzy także plik CMakeCache.txt. W pliku
tym znajduje się dodatkowa konfiguracja dla make. Znajdziesz tam opcję 
&lt;em&gt;CMAKE_VERBOSE_MAKEFILE&lt;/em&gt; z wartością domyślnie ustawioną na &lt;em&gt;FALSE&lt;/em&gt;. Aby zobaczyć 
bardziej szczegółowe logi podczas wykonywania polecenia make należy ustawić tę
opcję na &lt;em&gt;TRUE&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;co-mo%C5%BCna-zobaczy%C4%87%3F&quot;&gt;Co można zobaczyć?&lt;/h3&gt;

&lt;p&gt;Z opcją &lt;em&gt;CMAKE_VERBOSE_MAKEFILE&lt;/em&gt; równą &lt;em&gt;FALSE&lt;/em&gt; przykładowe wyjście z make wygląda tak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make
[100%] Building CXX object CMakeFiles/http_server.dir/src/main.cpp.o
Linking CXX executable http_server
[100%] Built target http_server
$ make
[100%] Built target http_server
$ make clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Z tą samą opcją ustawioną na &lt;em&gt;TRUE&lt;/em&gt; wyjście wygląda następująco:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make
/usr/bin/cmake -H/home/user/drug-dose-server -B/home/user/drug-dose-server --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/user/drug-dose-server/CMakeFiles /home/user/drug-dose-server/CMakeFiles/progress.marks
make -f CMakeFiles/Makefile2 all
make[1]: Wejście do katalogu &#039;/home/user/drug-dose-server&#039;
make -f CMakeFiles/http_server.dir/build.make CMakeFiles/http_server.dir/depend
make[2]: Wejście do katalogu &#039;/home/user/drug-dose-server&#039;
cd /home/user/drug-dose-server &amp;amp;&amp;amp; /usr/bin/cmake -E cmake_depends &quot;Unix Makefiles&quot; /home/user/drug-dose-server /home/user/drug-dose-server /home/user/drug-dose-server /home/user/drug-dose-server /home/user/drug-dose-server/CMakeFiles/http_server.dir/DependInfo.cmake --color=
make[2]: Opuszczenie katalogu &#039;/home/user/drug-dose-server&#039;
make -f CMakeFiles/http_server.dir/build.make CMakeFiles/http_server.dir/build
make[2]: Wejście do katalogu &#039;/home/user/drug-dose-server&#039;
Linking CXX executable http_server
/usr/bin/cmake -E cmake_link_script CMakeFiles/http_server.dir/link.txt --verbose=1
/usr/bin/c++    -std=c++11 -pthread    CMakeFiles/http_server.dir/src/main.cpp.o  -o http_server -rdynamic -lnet_static 
make[2]: Opuszczenie katalogu &#039;/home/user/drug-dose-server&#039;
/usr/bin/cmake -E cmake_progress_report /home/user/drug-dose-server/CMakeFiles  1
[100%] Built target http_server
make[1]: Opuszczenie katalogu &#039;/home/user/drug-dose-server&#039;
/usr/bin/cmake -E cmake_progress_start /home/user/drug-dose-server/CMakeFiles 0
$ make
/usr/bin/cmake -H/home/user/drug-dose-server -B/home/user/drug-dose-server --check-build-system CMakeFiles/Makefile.cmake 0
/usr/bin/cmake -E cmake_progress_start /home/user/drug-dose-server/CMakeFiles /home/user/drug-dose-server/CMakeFiles/progress.marks
make -f CMakeFiles/Makefile2 all
make[1]: Wejście do katalogu &#039;/home/user/drug-dose-server&#039;
make -f CMakeFiles/http_server.dir/build.make CMakeFiles/http_server.dir/depend
make[2]: Wejście do katalogu &#039;/home/user/drug-dose-server&#039;
cd /home/user/drug-dose-server &amp;amp;&amp;amp; /usr/bin/cmake -E cmake_depends &quot;Unix Makefiles&quot; /home/user/drug-dose-server /home/user/drug-dose-server /home/user/drug-dose-server /home/user/drug-dose-server /home/user/drug-dose-server/CMakeFiles/http_server.dir/DependInfo.cmake --color=
make[2]: Opuszczenie katalogu &#039;/home/user/drug-dose-server&#039;
make -f CMakeFiles/http_server.dir/build.make CMakeFiles/http_server.dir/build
make[2]: Wejście do katalogu &#039;/home/user/drug-dose-server&#039;
make[2]: Nie ma nic do zrobienia w &#039;CMakeFiles/http_server.dir/build&#039;.
make[2]: Opuszczenie katalogu &#039;/home/user/drug-dose-server&#039;
/usr/bin/cmake -E cmake_progress_report /home/user/drug-dose-server/CMakeFiles  1
[100%] Built target http_server
make[1]: Opuszczenie katalogu &#039;/home/user/drug-dose-server&#039;
/usr/bin/cmake -E cmake_progress_start /home/user/drug-dose-server/CMakeFiles 0
$ make clean
make -f CMakeFiles/Makefile2 clean
make[1]: Wejście do katalogu &#039;/home/user/drug-dose-server&#039;
make -f CMakeFiles/http_server.dir/build.make CMakeFiles/http_server.dir/clean
make[2]: Wejście do katalogu &#039;/home/user/drug-dose-server&#039;
/usr/bin/cmake -P CMakeFiles/http_server.dir/cmake_clean.cmake
make[2]: Opuszczenie katalogu &#039;/home/user/drug-dose-server&#039;
make[1]: Opuszczenie katalogu &#039;/home/user/drug-dose-server&#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jak widać log jest bardziej szczegółowy. Widać tu przede wszystkim polecenie
przekazywane do g++ (c++) podczas kompilacji, co może bardzo pomóc w dalszym
debugowaniu ewentualnych problemów.&lt;/p&gt;
</content:encoded>
            <pubDate>2017-03-15T21:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2017/03/15/jak-wlaczyc-tryb-debug-w-cmake.html</link>
            <atom:link href="http://lion.net.pl/2017/03/15/jak-wlaczyc-tryb-debug-w-cmake.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2017/03/15/jak-wlaczyc-tryb-debug-w-cmake.html</guid>
        </item>
                <item>
            <title>Pistacja</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2017</category>
                        <category>DDS</category>
                        <category>C++</category>
                                    <content:encoded>&lt;p&gt;Tworzenie aplikacji w modelu REST w języku C++ może stać się prostsze z frameworkiem
Pistache. Jak go zainstalować? Czytaj dalej!&lt;/p&gt;

&lt;h3 id=&quot;pistache-c%2B%2B-rest-framework&quot;&gt;Pistache C++ REST Framework&lt;/h3&gt;

&lt;p&gt;Pistache jest całkiem nowym projektem, wydanym na świat trochę ponad rok temu przez
Mathieu Stefani z Datacratic. Warto dać mu jednak już teraz szanse. Napisany jest
w C++11, jego struktura wydaje się być bardzo przemyślana, a obsługa intuicyjna.&lt;/p&gt;

&lt;p&gt;Informacje o frameworku można znaleźć na jego &lt;a href=&quot;http://pistache.io/&quot;&gt;oficjalnej witrynie&lt;/a&gt;, a &lt;a href=&quot;https://github.com/oktal/pistache&quot;&gt;źródła na
GitHubie&lt;/a&gt;. Nie ma na tą chwilę jednak paczek deb, binarek dla Windows czy innych 
gotowych do ściągnięcia plików. Pozostaje nam samodzielna kompilacja, która jest
raczej prosta, ale opiszę ja poniżej na wypadek gdybyś miał problem z uruchomieniem
i przetestowaniem tej biblioteki.&lt;/p&gt;

&lt;h4 id=&quot;instalacja&quot;&gt;Instalacja&lt;/h4&gt;

&lt;p&gt;Należy przede wszystkim pobrać źródła frameworka z GitHub. Możesz pobrać paczkę
ZIP, ale najwygodniejsze będzie sklonowanie repozytorium:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/oktal/pistache.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Po pobraniu plików należy w katalogu projektu wykonać następujące polecenia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Release ..
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jeśli nie chcesz (lub nie możesz) wykonać polecenia &lt;em&gt;make install&lt;/em&gt; z prawami
superużytkownika możesz podczas konfiguracji podać opcjonalny parametr wskazujący 
ścieżkę w której chcesz zainstalować bibliotekę:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Release DCMAKE_INSTALL_PREFIX:PATH=/home/user  ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cmake może narzekać na brak bibliotek gtest i rapidjson. Są one opcjonalne. Jeśli
używasz Debiana to ucieszy Cię pewnie fakt że są gotowe paczki dla tych narzędzi 
do pobrania z repozytorium. Może kiedyś pistache także trafi do repo Debiana...&lt;/p&gt;

&lt;p&gt;Przykładowe wyjście z polecenia konfiguracji wygląda następująco:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Release ..
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Performing Test COMPILER_SUPPORTS_CXX11
-- Performing Test COMPILER_SUPPORTS_CXX11 - Success
-- Performing Test COMPILER_SUPPORTS_CXX0X
-- Performing Test COMPILER_SUPPORTS_CXX0X - Success
CMake Warning at examples/CMakeLists.txt:16 (find_package):
  By not providing &quot;FindRapidJSON.cmake&quot; in CMAKE_MODULE_PATH this project
  has asked CMake to find a package configuration file provided by
  &quot;RapidJSON&quot;, but CMake did not find one.

  Could not find a package configuration file provided by &quot;RapidJSON&quot; with
  any of the following names:

    RapidJSONConfig.cmake
    rapidjson-config.cmake

  Add the installation prefix of &quot;RapidJSON&quot; to CMAKE_PREFIX_PATH or set
  &quot;RapidJSON_DIR&quot; to a directory containing one of the above files.  If
  &quot;RapidJSON&quot; provides a separate development package or SDK, be sure it has
  been installed.


-- Could NOT find GTest (missing:  GTEST_LIBRARY GTEST_MAIN_LIBRARY) 
-- Found PythonInterp: /usr/bin/python (found version &quot;2.7.9&quot;) 
-- Looking for include file pthread.h
-- Looking for include file pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Configuring done
-- Generating done
-- Build files have been written to: /home/user/pistache/build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a z polecenia budowania tak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make
Scanning dependencies of target net
[  1%] Building CXX object src/CMakeFiles/net.dir/common/tcp.cc.o
[  3%] Building CXX object src/CMakeFiles/net.dir/common/net.cc.o
[  5%] Building CXX object src/CMakeFiles/net.dir/common/description.cc.o
[  7%] Building CXX object src/CMakeFiles/net.dir/common/transport.cc.o
[  9%] Building CXX object src/CMakeFiles/net.dir/common/http_defs.cc.o
[ 11%] Building CXX object src/CMakeFiles/net.dir/common/mime.cc.o
[ 13%] Building CXX object src/CMakeFiles/net.dir/common/reactor.cc.o
[ 15%] Building CXX object src/CMakeFiles/net.dir/common/http_headers.cc.o
[ 17%] Building CXX object src/CMakeFiles/net.dir/common/http_header.cc.o
[ 19%] Building CXX object src/CMakeFiles/net.dir/common/cookie.cc.o
[ 21%] Building CXX object src/CMakeFiles/net.dir/common/timer_pool.cc.o
[ 23%] Building CXX object src/CMakeFiles/net.dir/common/http.cc.o
[ 25%] Building CXX object src/CMakeFiles/net.dir/common/stream.cc.o
[ 26%] Building CXX object src/CMakeFiles/net.dir/common/os.cc.o
[ 28%] Building CXX object src/CMakeFiles/net.dir/common/peer.cc.o
[ 30%] Building CXX object src/CMakeFiles/net.dir/server/listener.cc.o
[ 32%] Building CXX object src/CMakeFiles/net.dir/server/router.cc.o
[ 34%] Building CXX object src/CMakeFiles/net.dir/server/endpoint.cc.o
[ 36%] Building CXX object src/CMakeFiles/net.dir/client/client.cc.o
Linking CXX shared library libnet.so
[ 36%] Built target net
Scanning dependencies of target net_static
[ 38%] Building CXX object src/CMakeFiles/net_static.dir/common/tcp.cc.o
[ 40%] Building CXX object src/CMakeFiles/net_static.dir/common/net.cc.o
[ 42%] Building CXX object src/CMakeFiles/net_static.dir/common/description.cc.o
[ 44%] Building CXX object src/CMakeFiles/net_static.dir/common/transport.cc.o
[ 46%] Building CXX object src/CMakeFiles/net_static.dir/common/http_defs.cc.o
[ 48%] Building CXX object src/CMakeFiles/net_static.dir/common/mime.cc.o
[ 50%] Building CXX object src/CMakeFiles/net_static.dir/common/reactor.cc.o
[ 51%] Building CXX object src/CMakeFiles/net_static.dir/common/http_headers.cc.o
[ 53%] Building CXX object src/CMakeFiles/net_static.dir/common/http_header.cc.o
[ 55%] Building CXX object src/CMakeFiles/net_static.dir/common/cookie.cc.o
[ 57%] Building CXX object src/CMakeFiles/net_static.dir/common/timer_pool.cc.o
[ 59%] Building CXX object src/CMakeFiles/net_static.dir/common/http.cc.o
[ 61%] Building CXX object src/CMakeFiles/net_static.dir/common/stream.cc.o
[ 63%] Building CXX object src/CMakeFiles/net_static.dir/common/os.cc.o
[ 65%] Building CXX object src/CMakeFiles/net_static.dir/common/peer.cc.o
[ 67%] Building CXX object src/CMakeFiles/net_static.dir/server/listener.cc.o
[ 69%] Building CXX object src/CMakeFiles/net_static.dir/server/router.cc.o
[ 71%] Building CXX object src/CMakeFiles/net_static.dir/server/endpoint.cc.o
[ 73%] Building CXX object src/CMakeFiles/net_static.dir/client/client.cc.o
Linking CXX static library libnet_static.a
[ 73%] Built target net_static
Scanning dependencies of target custom_header
[ 75%] Building CXX object examples/CMakeFiles/custom_header.dir/custom_header.cc.o
Linking CXX executable custom_header
[ 75%] Built target custom_header
Scanning dependencies of target hello_server
[ 76%] Building CXX object examples/CMakeFiles/hello_server.dir/hello_server.cc.o
Linking CXX executable hello_server
[ 76%] Built target hello_server
Scanning dependencies of target http_client
[ 78%] Building CXX object examples/CMakeFiles/http_client.dir/http_client.cc.o
Linking CXX executable http_client
[ 78%] Built target http_client
Scanning dependencies of target http_server
[ 80%] Building CXX object examples/CMakeFiles/http_server.dir/http_server.cc.o
Linking CXX executable http_server
[ 80%] Built target http_server
Scanning dependencies of target rest_server
[ 82%] Building CXX object examples/CMakeFiles/rest_server.dir/rest_server.cc.o
Linking CXX executable rest_server
[ 82%] Built target rest_server
Scanning dependencies of target gtest
[ 84%] Building CXX object googletest-release-1.7.0/CMakeFiles/gtest.dir/src/gtest-all.cc.o
Linking CXX static library libgtest.a
[ 84%] Built target gtest
Scanning dependencies of target gtest_main
[ 86%] Building CXX object googletest-release-1.7.0/CMakeFiles/gtest_main.dir/src/gtest_main.cc.o
Linking CXX static library libgtest_main.a
[ 86%] Built target gtest_main
Scanning dependencies of target run_async_test
[ 88%] Building CXX object tests/CMakeFiles/run_async_test.dir/async_test.cc.o
Linking CXX executable run_async_test
[ 88%] Built target run_async_test
Scanning dependencies of target run_cookie_test
[ 90%] Building CXX object tests/CMakeFiles/run_cookie_test.dir/cookie_test.cc.o
Linking CXX executable run_cookie_test
[ 90%] Built target run_cookie_test
Scanning dependencies of target run_headers_test
[ 92%] Building CXX object tests/CMakeFiles/run_headers_test.dir/headers_test.cc.o
Linking CXX executable run_headers_test
[ 92%] Built target run_headers_test
Scanning dependencies of target run_mime_test
[ 94%] Building CXX object tests/CMakeFiles/run_mime_test.dir/mime_test.cc.o
Linking CXX executable run_mime_test
[ 94%] Built target run_mime_test
Scanning dependencies of target run_router_test
[ 96%] Building CXX object tests/CMakeFiles/run_router_test.dir/router_test.cc.o
Linking CXX executable run_router_test
[ 96%] Built target run_router_test
Scanning dependencies of target run_typeid_test
[ 98%] Building CXX object tests/CMakeFiles/run_typeid_test.dir/typeid_test.cc.o
Linking CXX executable run_typeid_test
[ 98%] Built target run_typeid_test
Scanning dependencies of target run_view_test
[100%] Building CXX object tests/CMakeFiles/run_view_test.dir/view_test.cc.o
Linking CXX executable run_view_test
[100%] Built target run_view_test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;natomiast z polecenia instalacji tak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make install
[ 36%] Built target net
[ 73%] Built target net_static
[ 75%] Built target custom_header
[ 76%] Built target hello_server
[ 78%] Built target http_client
[ 80%] Built target http_server
[ 82%] Built target rest_server
[ 84%] Built target gtest
[ 86%] Built target gtest_main
[ 88%] Built target run_async_test
[ 90%] Built target run_cookie_test
[ 92%] Built target run_headers_test
[ 94%] Built target run_mime_test
[ 96%] Built target run_router_test
[ 98%] Built target run_typeid_test
[100%] Built target run_view_test
Install the project...
-- Install configuration: &quot;Release&quot;
-- Installing: /usr/local/include/pistache/reactor.h
-- Installing: /usr/local/include/pistache/http_defs.h
-- Installing: /usr/local/include/pistache/stream.h
-- Installing: /usr/local/include/pistache/timer_pool.h
-- Installing: /usr/local/include/pistache/prototype.h
-- Installing: /usr/local/include/pistache/flags.h
-- Installing: /usr/local/include/pistache/endpoint.h
-- Installing: /usr/local/include/pistache/peer.h
-- Installing: /usr/local/include/pistache/http.h
-- Installing: /usr/local/include/pistache/http_headers.h
-- Installing: /usr/local/include/pistache/mime.h
-- Installing: /usr/local/include/pistache/iterator_adapter.h
-- Installing: /usr/local/include/pistache/net.h
-- Installing: /usr/local/include/pistache/common.h
-- Installing: /usr/local/include/pistache/tcp.h
-- Installing: /usr/local/include/pistache/optional.h
-- Installing: /usr/local/include/pistache/http_header.h
-- Installing: /usr/local/include/pistache/view.h
-- Installing: /usr/local/include/pistache/async.h
-- Installing: /usr/local/include/pistache/listener.h
-- Installing: /usr/local/include/pistache/mailbox.h
-- Installing: /usr/local/include/pistache/os.h
-- Installing: /usr/local/include/pistache/cookie.h
-- Installing: /usr/local/include/pistache/typeid.h
-- Installing: /usr/local/include/pistache/client.h
-- Installing: /usr/local/include/pistache/router.h
-- Installing: /usr/local/include/pistache/transport.h
-- Installing: /usr/local/include/pistache/description.h
-- Installing: /usr/local/lib/libnet_static.a
-- Installing: /usr/local/lib/libnet.so
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;testowanie&quot;&gt;Testowanie&lt;/h4&gt;

&lt;p&gt;Warto sprawdzić czy wszystko działa tak jak powinno. Ja przetestowałem to lekko
modyfikując przykład ze strony frameworka, tworząc kontroler dla żądania przesłania
wersji &lt;a href=&quot;http://lion.net.pl/2017/03/01/powtorka-z-rozrywki.html&quot;&gt;aplikacji DDS&lt;/a&gt;. Źródła są do podejrzenia na &lt;a href=&quot;https://github.com/maciejlew/drug-dose-server&quot;&gt;GitHubie&lt;/a&gt;. Z rzeczy
na jakie należy zwrócić uwagę podczas kompilacji tych przykładów to by użyć flag
&lt;em&gt;-std=c++11&lt;/em&gt; oraz &lt;em&gt;-pthread&lt;/em&gt;. Jeśli nie wiesz jak to zrobić podpowiedź znajdziesz
w pliku &lt;em&gt;CMakeLists.txt&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdlib&amp;gt;

#include &quot;pistache/endpoint.h&quot;

#define DDS_VERSION &quot;0.1.0&quot;

using namespace Net;

class VersionHandler : public Http::Handler {
public:

    HTTP_PROTOTYPE(VersionHandler)

    void onRequest(const Http::Request&amp;amp; request, Http::ResponseWriter response) {
         response.send(Http::Code::Ok, &quot;DDS &quot; DDS_VERSION);
    }
};

int main() {
    Http::listenAndServe&amp;lt;VersionHandler&amp;gt;(&quot;*:9080&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Po kompilacji otrzymujemy ważący około 600kB serwer HTTP odpowiadający na żądanie
GET, do którego napisania, przy pomocy frameworka Pistache, wystarczy jedynie około
15 linii kodu!&lt;/p&gt;

&lt;h4 id=&quot;co-dalej%3F&quot;&gt;Co dalej?&lt;/h4&gt;

&lt;p&gt;Możliwości frameworka Pistache będę poznawał i prezentował wraz z rozwojem &lt;a href=&quot;http://lion.net.pl/2017/03/01/powtorka-z-rozrywki.html&quot;&gt;mojej
aplikacji konkursowej DDS&lt;/a&gt;. Jeśli także dopiero zaczynasz z nim swoją przygodę 
zapraszam do śledzenia kategorii &lt;a href=&quot;http://lion.net.pl/blog/tags/#DSP2017&quot;&gt;DSP2017&lt;/a&gt; na moim blogu!&lt;/p&gt;
</content:encoded>
            <pubDate>2017-03-14T20:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2017/03/14/pistacja.html</link>
            <atom:link href="http://lion.net.pl/2017/03/14/pistacja.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2017/03/14/pistacja.html</guid>
        </item>
                <item>
            <title>Powtórka z rozrywki</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>DSP2017</category>
                        <category>C++</category>
                        <category>DDS</category>
                                    <content:encoded>&lt;p&gt;Równo rok temu informowałem Was o moim udziale w konkursie &quot;Daj się 
poznać&quot;.
Dziś startuje kolejna edycja tego programistycznego wydarzenia. Z czym tym 
razem
będzie dane mi się zmierzyć?&lt;/p&gt;

&lt;h3 id=&quot;drug-dose-server&quot;&gt;Drug Dose Server&lt;/h3&gt;

&lt;p&gt;Pamiętacie poprzednią &lt;a href=&quot;/2016/05/30/raport-3-z-prac-nad-ddf.html&quot;&gt;moją aplikację konkursową DDF&lt;/a&gt;? Udało mi się 
rok temu w ciągu trzech miesięcy poznać wytwarzanie hybrydowych aplikacji 
mobilnych na tyle by być w stanie przedstawić Wam &lt;strong&gt;działającą aplikację 
do obliczania dawek leków&lt;/strong&gt;. Aplikacja działała zgodnie z założeniami, 
czyli że dane wejściowe dla kalkulatora dawek pobierane są z lokalnie 
przechowywanych plików.&lt;/p&gt;

&lt;p&gt;Podczas tej edycji &lt;a href=&quot;http://uczestnicy.dajsiepoznac.pl/profil/maciej-lew&quot;&gt;&quot;Daj się poznać&quot;&lt;/a&gt; mam zamian rozwinąć ten pomysł i 
napisać serwer dostarczający informacji o lekach dla aplikacji takich jak 
DDF. &lt;strong&gt;Nazwa projektu to Drug Dose Server&lt;/strong&gt;, będę dalej w odniesieniu do 
niego używał akronimu DDS (fajnie jest móc tworzyć swoje własne akronimy, 
co nie?).&lt;/p&gt;

&lt;h4 id=&quot;bebechy&quot;&gt;Bebechy&lt;/h4&gt;

&lt;p&gt;Aplikację DDS zamierzam napisać w C++. Rozważałem co prawda node.js lub 
inną zdobywającą obecnie popularność technologię, ale tak się mi 
przytrafiło że aktualnie i tak muszę sobie odświeżyć wiedzę z zakresu 
C++ - upiekę dwie pieczenie na jednym ogniu.&lt;/p&gt;

&lt;p&gt;Protokołem komunikacyjnym DDS będzie REST. Nie wiem jeszcze czy wszystko 
napiszę od zera czy skorzystam z gotowych bibliotek. Tego dowiecie się wraz 
ze mną podczas konkursu.&lt;/p&gt;

&lt;h4 id=&quot;piaskownica&quot;&gt;Piaskownica&lt;/h4&gt;

&lt;p&gt;Projekt możecie śledzić przeglądając tego bloga, a zwłaszcza &lt;a href=&quot;blog/tags/#DSP2017&quot;&gt;kategorię 
DSP2017&lt;/a&gt;. Źródła aplikacji będą dostępne na &lt;a href=&quot;https://github.com/maciejlew/drug-dose-server&quot;&gt;GitHubie&lt;/a&gt;. Trzymajcie 
kciuki.&lt;/p&gt;
</content:encoded>
            <pubDate>2017-03-01T20:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2017/03/01/powtorka-z-rozrywki.html</link>
            <atom:link href="http://lion.net.pl/2017/03/01/powtorka-z-rozrywki.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2017/03/01/powtorka-z-rozrywki.html</guid>
        </item>
                <item>
            <title>Dokumenty w LAN Management System</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>LMS</category>
                                    <content:encoded>&lt;p&gt;System zarządzania przedsiębiorstwem, jakim jest LAN Management System, 
powinien być wyposażony w moduł zarządzania dokumentami. LMS posiada taki moduł i 
daje jego użytkownikom sporą swobodę w tworzeniu dokumentów wszelakiej treści.
Jeśli jeszcze nie wykorzystujesz w swojej firmie możliwości LMS w ww. zakresie, 
a chcesz poszerzyć krąg czerpanych z LMS korzyści, zapoznaj się z tym tematem 
czytając ten wpis!&lt;/p&gt;

&lt;h3 id=&quot;dokumenty-w-lms&quot;&gt;Dokumenty w LMS&lt;/h3&gt;

&lt;p&gt;Dokumenty w LMS są tworzonymi z szablonu plikami, w których możesz 
zamieścić skierowaną do konkretnego klienta spersonalizowaną treść. 
Możliwe jest przygotowanie dokumentu dowolnego typu. Dokument ten jest 
przechowywany w formacie HTML, jego treść jest statyczna, to znaczy że nie 
zmieni się gdy zmianie ulegną dane pobrane z baz danych celu jego 
wygenerowania.&lt;/p&gt;

&lt;h3 id=&quot;jakie-funkcje-zwi%C4%85zane-z-obiegiem-dokument%C3%B3w-w-firmie-posiada-lms%3F&quot;&gt;Jakie funkcje związane z obiegiem dokumentów w firmie posiada LMS?&lt;/h3&gt;

&lt;p&gt;W LMS zostało zaimplementowanych szereg funkcji znanych z systemów obiegu 
dokumentów.
Są to między innymi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lista wszystkich dokumentów;&lt;/li&gt;
&lt;li&gt;lista dokumentów danego klienta;&lt;/li&gt;
&lt;li&gt;wyszukiwanie dokumentów;&lt;/li&gt;
&lt;li&gt;konfigurator uprawnień użytkowników w module dokumentów;&lt;/li&gt;
&lt;li&gt;plany numeracyjne;&lt;/li&gt;
&lt;li&gt;generator dokumentów;&lt;/li&gt;
&lt;li&gt;dostęp do dokumentów w panelu abonenta/klienta;&lt;/li&gt;
&lt;li&gt;szablony dokumentów.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wykorzystując potencjał modułu zarządzania dokumentami w LMS, &lt;strong&gt;można 
znacząco zmniejszyć nakład czasu&lt;/strong&gt; jaki jest potrzebny w żmudnej, codziennej, 
papierkowej pracy biura obsługi klienta.&lt;/p&gt;

&lt;h4 id=&quot;lista-wystawionych-dokument%C3%B3w&quot;&gt;Lista wystawionych dokumentów&lt;/h4&gt;

&lt;p&gt;Moduł listy wystawionych dokumentów agreguje w jednym miejscu wystawione przy 
pomocy LMS dokumenty. Możesz w szybki sposób przejrzeć ostatnio wygenerowane 
pisma lub użyć wyszukiwarki aby zobaczyć pisma wybranego typu, wystawione w 
interesującym Cię okresie, sprawdzić które z nich nie zostały jeszcze
zatwierdzone.&lt;/p&gt;

&lt;p&gt;Warto wspomnieć, że LMS posiada wbudowaną listę typów pism. Dzięki temu 
szybko, bez zagłębiania się w treść dokumentu, będziesz w stanie 
określić czego on dotyczy. Na liście wbudowanych typów dokumentów 
znajdziesz m. in.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;umowy;&lt;/li&gt;
&lt;li&gt;aneksy;&lt;/li&gt;
&lt;li&gt;protokoły;&lt;/li&gt;
&lt;li&gt;zamówienia;&lt;/li&gt;
&lt;li&gt;karty klienta;&lt;/li&gt;
&lt;li&gt;wzory rozwiązania umowy;&lt;/li&gt;
&lt;li&gt;wezwania do zapłaty;&lt;/li&gt;
&lt;li&gt;cenniki;&lt;/li&gt;
&lt;li&gt;promocje;&lt;/li&gt;
&lt;li&gt;gwarancje;&lt;/li&gt;
&lt;li&gt;regulaminy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lista-dokument%C3%B3w-klienta&quot;&gt;Lista dokumentów klienta&lt;/h4&gt;

&lt;p&gt;Lista dokumentów klienta widoczna jest w panelu informacji o kliencie i 
zawęża listę wszystkich dokumentów do tych przypisanych wybranemu klientowi 
(dokument musi mieć przypisanego klienta/abonenta i nie może ich mieć 
przypisanych więcej niż jednego). Na tej liście także znajdziemy takie 
informacje jak typ dokumentu, okres obowiązywania, dane użytkownika który go 
wystawił).&lt;/p&gt;

&lt;h4 id=&quot;konfigurator-uprawnie%C5%84&quot;&gt;Konfigurator uprawnień&lt;/h4&gt;

&lt;p&gt;LMS pozwala na konfigurowanie uprawnień użytkowników w zakresie wystawiania 
dokumentów. Możliwe jest określenie szczegółowych uprawnień do podglądu, 
tworzenia, zatwierdzania, edycji oraz usuwania każdego z wbudowanych typów 
dokumentów. Dzięki temu możemy odzwierciedlić w systemie rzeczywiste 
uprawnienia jego użytkowników, wprowadzić większą kontrolę przepływu 
dokumentów i uniknąć pomyłek.&lt;/p&gt;

&lt;h4 id=&quot;plany-numeracyjne&quot;&gt;Plany numeracyjne&lt;/h4&gt;

&lt;p&gt;Plany numeracyjne pozwalają nadać konkretnym typom dokumentów 
wyróżniającego je schematu numeracji. Przemyślany schemat numeracji ułatwi 
Ci pracę w module zarządzania dokumentami, kontakt z klientem w razie 
konieczności powoływana się na zapisy w dokumentach, itd.&lt;/p&gt;

&lt;p&gt;Moduł dodawania dokumentów pozwala na określenie planu numeracyjnego z 
którego zostanie pobrany kolejny numer do aktualnie tworzonego pisma lub dla 
którego wskazany zostanie przez wystawcę konkretny numer.&lt;/p&gt;

&lt;h4 id=&quot;generator-dokument%C3%B3w&quot;&gt;Generator dokumentów&lt;/h4&gt;

&lt;p&gt;Generator pozwala na szybkie wystawienia dokumentów tego samego typu, z tego 
samego szablonu, wszystkim klientom lub określonej ich grupie. Możesz w ten 
sposób wygenerować nową wersję regulaminu dla wszystkich podłączonych 
klientów, wystawić wszystkim dłużnikom wezwanie do zapłaty, itp.&lt;/p&gt;

&lt;h4 id=&quot;podgl%C4%85d-w-panelu-abonenta&quot;&gt;Podgląd w panelu abonenta&lt;/h4&gt;

&lt;p&gt;Informacja o każdym wystawionym dla abonenta/klienta dokumencie będzie dla 
niego dostępna po zalogowaniu się do panelu abonenta. Gdy zatwierdzisz dany 
dokument Twój klient będzie go mógł pobrać i wydrukować.&lt;/p&gt;

&lt;h4 id=&quot;szablony-dokument%C3%B3w&quot;&gt;Szablony dokumentów&lt;/h4&gt;

&lt;p&gt;Wraz z pobraną instancją LMS otrzymuje się przykładowy domyślny szablon. 
Na jego podstawie możesz przygotować inny potrzebny Tobie szablon umowy, 
cennika, regulaminu lub czegokolwiek innego co będzie przydatne w codziennej 
pracy Twojego przedsiębiorstwa. Szablony przygotowuje się w formacie HTML, a 
miejsca na dynamicznie wstawiane elementy tworzy się przy pomocy systemu 
szablonów dla PHP jakim jest Smarty. Silnik szablonu napisany jest w PHP, 
może być dostosowany do potrzeb konkretnego typu dokumentu. &lt;strong&gt;Pozwala on na 
łatwe pobranie z bazy danych niezbędnych do automatycznego wypełnienia 
szablonu danych o kliencie, jego zobowiązaniach, komputerach, saldzie oraz 
innych danych.&lt;/strong&gt; Możliwe jest także rozbudowanie formatki dodawania nowego 
dokumentu o dodatkowe pola przy pomocy skojarzonego z szablonami dokumentów 
systemu pluginów. W ten sposób podczas tworzenia nowego dokumentu możesz 
podać dodatkowe dane które nie znajdują się w bazie danych lub stworzyć 
kilka ścieżek tworzenia dokumentu.&lt;/p&gt;
</content:encoded>
            <pubDate>2017-02-13T20:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2017/02/13/dokumenty_w_lan_management_system.html</link>
            <atom:link href="http://lion.net.pl/2017/02/13/dokumenty_w_lan_management_system.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2017/02/13/dokumenty_w_lan_management_system.html</guid>
        </item>
                <item>
            <title>SpreadIT 2016 - relacja</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>OOP, QA, SpreadIT, MEETING</category>
                                    <content:encoded>&lt;p&gt;Czwarta edycja SpreadIT przeszła już do historii. Zapraszam do zapoznania się
z krótką relacją z której dowiecie się co w światku IT piszczy.&lt;/p&gt;

&lt;h2 id=&quot;tematyka-konferencji&quot;&gt;Tematyka konferencji&lt;/h2&gt;

&lt;p&gt;SpreadIT oferuje uczestnikom rozbudowane ścieżki tematyczne:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inżynieria &lt;strong&gt;oprogramowania&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Tworzenie gier &lt;strong&gt;komputerowych&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Biznes i &lt;strong&gt;rozwój&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ja, jak zwykle, najbardziej zainteresowany byłem pierwszą z nich, z tego powodu
relacja ta będzie dotyczyła następujących wykładów:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you familiar with Test Doubles Patterns?&lt;/li&gt;
&lt;li&gt;P&amp;amp;A + DDD + CQRS = OO&lt;/li&gt;
&lt;li&gt;Wprowadzenie do Actor Model&lt;/li&gt;
&lt;li&gt;Jak uniknąć buzz word driven development i jak rozpoznać koncepcje, które 
pozostaną z nami na lata?&lt;/li&gt;
&lt;li&gt;Jak wróżyć z fusów skoro najczęściej pijemy kawę z ekspresu?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;are-you-familiar-with-test-doubles-patterns%3F&quot;&gt;Are you familiar with Test Doubles Patterns?&lt;/h2&gt;

&lt;p&gt;Pierwszy z wykładów na ścieżce &lt;em&gt;&quot;Inżynieria oprogramowania&quot;&lt;/em&gt;, przygotował dla nas
Sebastian Malaca. Dotyczył on tych wszystkich rodzajów obiektów wykorzystywanych
podczas tworzenia testów by symulować działanie ich rzeczywistych odpowiedników, 
by działać w separacji, które na co dzień przez wielu ludzi nazywane są po prostu 
mockami. Dowiedzieliśmy się więc jaka jest różnica pomiędzy obiektami &lt;strong&gt;dummy, 
fake, spy, mock&lt;/strong&gt;. Jakie jest ich przeznaczenie, dlaczego i kiedy należy z nich 
korzystać, oraz dlaczego nadużywanie mocków może prowadzić od bałaganu w kodzie. 
Po tej prezentacji można było odkryć, że &lt;em&gt;double patterns&lt;/em&gt; to nie proste zaślepki,
a rozbudowany zestaw narzędzi, które należy używać z głową.&lt;/p&gt;

&lt;h2 id=&quot;p%26a-%2B-ddd-%2B-cqrs-%3D-oo&quot;&gt;P&amp;amp;A + DDD + CQRS = OO&lt;/h2&gt;

&lt;p&gt;Kolejny wykład to przygotowane przez Łukasza Szydło wprowadzenie do CQRS. Autor 
przedstawił bardzo fajne porównanie obiektu do komórki żywego organizmu. Rozłożył
także na czynniki pierwsze strukturę klasy w kontekście CQRS. Dzięki temu łatwiej
można było poczuć różnicę pomiędzy metodami &quot;command&quot; a metodami &quot;query&quot; i zrozumieć
CQS. Posługując się prostym rysunkiem, pokazującym gdzie w większości systemów jakiego
typy żądania są przesyłane, autor pokazał nam gdzie jest granica pomiędzy
częścią systemu odpowiedzialną za odczyt, a gdzie &quot;siedzi&quot; cała skomplikowana 
logika biznesowa systemu. Wymienione zostały zalety wprowadzenia CQRS w projekcie, 
czyli uproszczenie kodu, możliwość cachowania, łatwiejsze podążanie za zasadą 
&lt;em&gt;&lt;a href=&quot;https://pl.wikipedia.org/wiki/Zasada_jednej_odpowiedzialno%C5%9Bci&quot;&gt;&quot;single responsibility principle&quot;&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wprowadzenie-do-actor-model&quot;&gt;Wprowadzenie do Actor Model&lt;/h2&gt;

&lt;p&gt;Wprowadzenie do actor model okazało się jednak czymś więcej niż wprowadzeniem.
Muszę przyznać że prezentacja była dobrze przygotowana, ale dla kogoś kto już ma
jakieś pojęcie czym jest &lt;em&gt;actor model&lt;/em&gt; i do czego go można wykorzystać lub właśnie
się do tego przygotowuje. Dla osób które dopiero chcą sprawdzić czym to się je,
prezentacja mogła być niezrozumiała. Łukasz Szymik przedstawił jak wprowadzenie
AM w projekcie pomogło przyspieszyć działanie aplikacji bez martwienia się o
typowe bolączki oprogramowania działającego współbieżnie. Cała prezentacja była
prowadzona w kontekście programowania w języku Scala, ale pojawiła się ciekawa
wzmianka o implementacji actor model w JS, którą postaram się niebawem zgłębić i 
coś o tym napisać na blogu.&lt;/p&gt;

&lt;h2 id=&quot;jak-unikn%C4%85%C4%87-buzz-word-driven-development-i-jak-rozpozna%C4%87-koncepcje%2C-kt%C3%B3re-pozostan%C4%85-z-nami-na-lata%3F&quot;&gt;Jak uniknąć buzz word driven development i jak rozpoznać koncepcje, które pozostaną z nami na lata?&lt;/h2&gt;

&lt;p&gt;Po tytule prezentacji można by się spodziewać że zostanie nam przedstawiony
przegląd metodologii/języków/technologii/frameworków. I tak właśnie rozpoczął się
ten wykład. Witold Adamus, posiłkując się wykresami z Google Trends, przedstawił
nam jak kształtowały się trendy w wyszukiwaniu haseł takich jak DDD, CQRS, OOP, 
Ruby, jQuery, pojęć związanych z programowaniem funkcyjnym i obiektowym. Poruszony 
został problem BWDD w projektach oraz CVDD. No i na tym skończyło się wyliczanie 
&lt;em&gt;buzz words&lt;/em&gt;, a zaczęła się ewangelizacja na temat programowania funkcyjnego. Był 
to wstęp do programowania funkcyjnego, przegląd monad, przykłady w PHP, promocja 
biblioteki &lt;a href=&quot;https://github.com/php-slang/php-slang&quot;&gt;php-slang&lt;/a&gt;. Dodatkowo autor podjął wyzwanie rozwiązania każdego 
problemu przy pomocy programowania funkcyjnego, więc jeśli taki macie to możecie 
pisać do niego e-mail.&lt;/p&gt;

&lt;h2 id=&quot;jak-wr%C3%B3%C5%BCy%C4%87-z-fus%C3%B3w-skoro-najcz%C4%99%C5%9Bciej-pijemy-kaw%C4%99-z-ekspresu%3F&quot;&gt;Jak wróżyć z fusów skoro najczęściej pijemy kawę z ekspresu?&lt;/h2&gt;

&lt;p&gt;Ostatnia prelekcja dotyczyła szacowania czasu. Marek Gajda nie ukrywał jakie to
trudne i niewdzięczne zadanie. Podał nam także kilka wskazówek jak podejść do 
tematu w sposób profesjonalny. Dowiedzieliśmy się jak ważny może być wywiad ze
zleceniodawcą, aby dowiedzieć się czego on tak właściwie chce. Zaproponowana
została znana w IT zasada &lt;em&gt;&quot;divide and conquer&quot;&lt;/em&gt;, czyli w tym przypadku podziału
zadania na mniejsze, być może znane już klocki i oszacowanie czasu wykonania
dla każdego z nich z osobna. Pokazano także jak należy szacować gdy do zlecenia
przydzielona ma zostać większa ilość osób, jak wliczać w rachunek czas na testy,
refaktoryzację oraz inne &lt;em&gt;&quot;detale&quot;&lt;/em&gt; które czasami nam umykają.&lt;/p&gt;

&lt;p&gt;A już za rok 5 edycja największej darmowej konferencji IT na Śląsku. Ma być 
jeszcze lepiej. Do zobaczenia na miejscu bo ja na pewno tego nie przegapię!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Zobacz także:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;{{site.url}}/2017/11/19/spreadit-2017-relacja.html&quot;&gt;SpreadIT 2017 - relacja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;{{site.url}}/2015/11/22/spreadit-2015-relacja.html&quot;&gt;SpreadIT 2015 - relacja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
            <pubDate>2016-11-20T20:15:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/11/20/spreadit-2016-relacja.html</link>
            <atom:link href="http://lion.net.pl/2016/11/20/spreadit-2016-relacja.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/11/20/spreadit-2016-relacja.html</guid>
        </item>
                <item>
            <title>Zbliża się SpreadIT 2016!</title>
            <dc:creator>Maciej Lew</dc:creator>
                                    <category>OOP, QA, SpreadIT, MEETING</category>
                                    <content:encoded>&lt;p&gt;Już za tydzień kolejna edycja popularnej na Śląsku konferencji SpreadIT. Spotykamy 
się, tak jak zwykle, na wydziale AEiI Politechniki Śląskiej w Gliwicach.&lt;/p&gt;

&lt;p&gt;Podobnie jak rok temu organizatorzy przygotowali trzy ścieżki tematyczne:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inżynieria &lt;strong&gt;oprogramowania&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Tworzenie gier &lt;strong&gt;komputerowych&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Biznes i &lt;strong&gt;rozwój&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;W trakcie spotkania zaplanowanych jest ponad 20 wykładów, a także panel dyskusyjny 
oraz przerwy na pogadanki.&lt;/p&gt;

&lt;p&gt;Zapisy są już zamknięte - mam nadzieję, że zdążyłeś się w porę zarejestrować.
W tym roku konferencji towarzyszy zbiórka na cel charytatywny. Darczyńcy mogą
odebrać bardzo fajną koszulkę związaną z tym wydarzeniem. Polecam.&lt;/p&gt;

&lt;p&gt;Więcej informacji znajdziecie &lt;a href=&quot;http://spreadit.pl/&quot;&gt;na stronie wydarzenia&lt;/a&gt;. Do zobaczenia na miejscu.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Zobacz także:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;{{site.url}}/2015/11/22/spreadit-2015-relacja.html&quot;&gt;SpreadIT 2015 - relacja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;{{site.url}}/2016/11/20/spreadit-2016-relacja.html&quot;&gt;SpreadIT 2016 - relacja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
            <pubDate>2016-11-13T13:00:00+01:00</pubDate>
            <link>http://lion.net.pl/2016/11/13/zbliza-sie-spreadit-2016.html</link>
            <atom:link href="http://lion.net.pl/2016/11/13/zbliza-sie-spreadit-2016.html" rel="self" type="application/rss+xml" />
            <guid isPermaLink="true">http://lion.net.pl/2016/11/13/zbliza-sie-spreadit-2016.html</guid>
        </item>
            </channel>
</rss>